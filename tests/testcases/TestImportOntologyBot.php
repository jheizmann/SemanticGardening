<?php
global $sgagIP;
require_once( $sgagIP . '/includes/SGA_GardeningIssues.php');
require_once '../includes/bots/SGA_ImportOntologyBot.php';

class TestImportOntologyBot extends PHPUnit_Framework_TestCase {

	var $bot;

	function setUp() {
		$this->bot = new ImportOntologyBot();
		$this->bot->initializeRAP();
		// do not run bot
	}

	function tearDown() {

	}

	function testImport_Family() {

		$this->bot->testOntologyImport("testcases/resources/family.owl");
		$ws = $this->bot->getWikiStatements();

		$this->replaceWhitespaces($ws);

		$this->assertEquals($ws[0]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[0]["WIKI"]);
		$this->assertEquals($ws[0]["PAGENAME"], 'Female');
		$this->assertEquals($ws[0]["ID"], 'Female');
		$this->assertEquals($ws[1]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[1]["WIKI"]);
		$this->assertEquals($ws[1]["PAGENAME"], 'Male');
		$this->assertEquals($ws[1]["ID"], 'Male');
		$this->assertEquals($ws[2]["NS"], 102);
		$this->assertEquals($ws[2]["PAGENAME"], 'HasParent');
		$this->assertEquals($ws[2]["ID"], 'hasParent');
		$this->assertEquals($ws[3]["NS"], 14);
		$this->assertContains('', $ws[3]["WIKI"]);
		$this->assertEquals($ws[3]["PAGENAME"], 'Person');
		$this->assertEquals($ws[3]["ID"], 'Person');
		$this->assertEquals($ws[4]["NS"], 14);
		$this->assertEquals($ws[4]["PAGENAME"], 'Thing');
		$this->assertEquals($ws[4]["ID"], 'Thing');
		$this->assertEquals($ws[5]["NS"], 102);
		$this->assertContains('[[Category:Transitive properties]]', $ws[5]["WIKI"]);
		$this->assertEquals($ws[5]["PAGENAME"], 'HasAncestor');
		$this->assertEquals($ws[5]["ID"], 'hasAncestor');
		$this->assertEquals($ws[6]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Male]]', $ws[6]["WIKI"]);
		$this->assertEquals($ws[6]["PAGENAME"], 'HasBrother');
		$this->assertEquals($ws[6]["ID"], 'hasBrother');
		$this->assertEquals($ws[7]["NS"], 102);
		$this->assertEquals($ws[7]["PAGENAME"], 'HasChild');
		$this->assertEquals($ws[7]["ID"], 'hasChild');
		$this->assertEquals($ws[8]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Female]]', $ws[8]["WIKI"]);
		$this->assertEquals($ws[8]["PAGENAME"], 'HasDaughter');
		$this->assertEquals($ws[8]["ID"], 'hasDaughter');
		$this->assertEquals($ws[9]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Male]]', $ws[9]["WIKI"]);
		$this->assertEquals($ws[9]["PAGENAME"], 'HasFather');
		$this->assertEquals($ws[9]["ID"], 'hasFather');
		$this->assertEquals($ws[10]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Female]]', $ws[10]["WIKI"]);
		$this->assertEquals($ws[10]["PAGENAME"], 'HasMother');
		$this->assertEquals($ws[10]["ID"], 'hasMother');
		$this->assertEquals($ws[11]["NS"], 102);
		$this->assertContains('[[Is inverse of::Property:hasChild]]', $ws[11]["WIKI"]);
		$this->assertEquals($ws[11]["PAGENAME"], 'HasParent');
		$this->assertEquals($ws[11]["ID"], 'hasParent');
		$this->assertEquals($ws[12]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Person]]', $ws[12]["WIKI"]);
		$this->assertContains('[[Category:Symmetrical properties]]', $ws[12]["WIKI"]);
		$this->assertEquals($ws[12]["PAGENAME"], 'HasSibling');
		$this->assertEquals($ws[12]["ID"], 'hasSibling');
		$this->assertEquals($ws[13]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Female]]', $ws[13]["WIKI"]);
		$this->assertEquals($ws[13]["PAGENAME"], 'HasSister');
		$this->assertEquals($ws[13]["ID"], 'hasSister');
		$this->assertEquals($ws[14]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Male]]', $ws[14]["WIKI"]);
		$this->assertEquals($ws[14]["PAGENAME"], 'HasSon');
		$this->assertEquals($ws[14]["ID"], 'hasSon');
		$this->assertEquals($ws[15]["NS"], 102);
		$this->assertEquals($ws[15]["PAGENAME"], 'HasUncle');
		$this->assertEquals($ws[15]["ID"], 'hasUncle');
		$this->assertEquals($ws[16]["NS"], 102);
		$this->assertEquals($ws[16]["PAGENAME"], 'HasAge');
		$this->assertEquals($ws[16]["ID"], 'hasAge');
		$this->assertEquals($ws[17]["NS"], 0);
		$this->assertContains('[[HasChild::Son]]', $ws[17]["WIKI"]);
		$this->assertEquals($ws[17]["PAGENAME"], 'Dad');
		$this->assertEquals($ws[17]["ID"], 'hasChild');
		$this->assertEquals($ws[18]["NS"], 0);
		$this->assertContains('[[HasSon::Son]]', $ws[18]["WIKI"]);
		$this->assertEquals($ws[18]["PAGENAME"], 'Dad');
		$this->assertEquals($ws[18]["ID"], 'hasSon');
		$this->assertEquals($ws[19]["NS"], 0);
		$this->assertContains('[[Category:Person]]', $ws[19]["WIKI"]);
		$this->assertEquals($ws[19]["PAGENAME"], 'Dad');
		$this->assertEquals($ws[19]["ID"], 'Dad');
		$this->assertEquals($ws[20]["NS"], 0);
		$this->assertContains('[[Category:Person]]', $ws[20]["WIKI"]);
		$this->assertEquals($ws[20]["PAGENAME"], 'Daughter');
		$this->assertEquals($ws[20]["ID"], 'Daughter');
		$this->assertEquals($ws[21]["NS"], 0);
		$this->assertContains('[[HasSon::Dad]]', $ws[21]["WIKI"]);
		$this->assertEquals($ws[21]["PAGENAME"], 'Grandpa');
		$this->assertEquals($ws[21]["ID"], 'hasSon');
		$this->assertEquals($ws[22]["NS"], 0);
		$this->assertContains('[[Category:Person]]', $ws[22]["WIKI"]);
		$this->assertEquals($ws[22]["PAGENAME"], 'Grandpa');
		$this->assertEquals($ws[22]["ID"], 'Grandpa');
		$this->assertEquals($ws[23]["NS"], 0);
		$this->assertContains('[[HasChild::Daughter]]', $ws[23]["WIKI"]);
		$this->assertEquals($ws[23]["PAGENAME"], 'Mom');
		$this->assertEquals($ws[23]["ID"], 'hasChild');
		$this->assertEquals($ws[24]["NS"], 0);
		$this->assertContains('[[HasChild::Son]]', $ws[24]["WIKI"]);
		$this->assertEquals($ws[24]["PAGENAME"], 'Mom');
		$this->assertEquals($ws[24]["ID"], 'hasChild');
		$this->assertEquals($ws[25]["NS"], 0);
		$this->assertContains('[[Category:Female]]', $ws[25]["WIKI"]);
		$this->assertEquals($ws[25]["PAGENAME"], 'Mom');
		$this->assertEquals($ws[25]["ID"], 'Mom');
		$this->assertEquals($ws[26]["NS"], 0);
		$this->assertContains('[[HasSister::Daughter]]', $ws[26]["WIKI"]);
		$this->assertEquals($ws[26]["PAGENAME"], 'Son');
		$this->assertEquals($ws[26]["ID"], 'hasSister');
		$this->assertEquals($ws[27]["NS"], 0);
		$this->assertContains('[[Category:Person]]', $ws[27]["WIKI"]);
		$this->assertEquals($ws[27]["PAGENAME"], 'Son');
		$this->assertEquals($ws[27]["ID"], 'Son');




	}

	function testImport_Pizza() {

		$this->bot->testOntologyImport("testcases/resources/pizza_latest.owl");
		$ws = $this->bot->getWikiStatements();
		$this->replaceWhitespaces($ws);

		$this->assertEquals($ws[0]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[0]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Americana; Category:BNode2]]', $ws[0]["WIKI"]);
		$this->assertEquals($ws[0]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[0]["ID"], 'hasTopping');
		$this->assertEquals($ws[1]["NS"], 102);
		$this->assertEquals($ws[1]["PAGENAME"], 'HasCountryOfOrigin');
		$this->assertEquals($ws[1]["ID"], 'hasCountryOfOrigin');
		$this->assertEquals($ws[2]["NS"], 102);
		$this->assertEquals($ws[2]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[2]["ID"], 'hasTopping');
		$this->assertEquals($ws[3]["NS"], 102);
		$this->assertEquals($ws[3]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[3]["ID"], 'hasTopping');
		$this->assertEquals($ws[4]["NS"], 102);
		$this->assertEquals($ws[4]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[4]["ID"], 'hasTopping');
		$this->assertEquals($ws[5]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[5]["WIKI"]);
		$this->assertContains('', $ws[5]["WIKI"]);
		$this->assertContains('', $ws[5]["WIKI"]);
		$this->assertContains('', $ws[5]["WIKI"]);
		$this->assertContains('', $ws[5]["WIKI"]);
		$this->assertContains('', $ws[5]["WIKI"]);
		$this->assertEquals($ws[5]["PAGENAME"], 'Americana');
		$this->assertEquals($ws[5]["ID"], 'American');
		$this->assertEquals($ws[6]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[6]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:AmericanaPicante; Category:BNode11]]', $ws[6]["WIKI"]);
		$this->assertEquals($ws[6]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[6]["ID"], 'hasTopping');
		$this->assertEquals($ws[7]["NS"], 102);
		$this->assertEquals($ws[7]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[7]["ID"], 'hasTopping');
		$this->assertEquals($ws[8]["NS"], 102);
		$this->assertEquals($ws[8]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[8]["ID"], 'hasTopping');
		$this->assertEquals($ws[9]["NS"], 102);
		$this->assertEquals($ws[9]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[9]["ID"], 'hasTopping');
		$this->assertEquals($ws[10]["NS"], 102);
		$this->assertEquals($ws[10]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[10]["ID"], 'hasTopping');
		$this->assertEquals($ws[11]["NS"], 102);
		$this->assertEquals($ws[11]["PAGENAME"], 'HasCountryOfOrigin');
		$this->assertEquals($ws[11]["ID"], 'hasCountryOfOrigin');
		$this->assertEquals($ws[12]["NS"], 102);
		$this->assertEquals($ws[12]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[12]["ID"], 'hasTopping');
		$this->assertEquals($ws[13]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertEquals($ws[13]["PAGENAME"], 'AmericanaPicante');
		$this->assertEquals($ws[13]["ID"], 'AmericanHot');
		$this->assertEquals($ws[14]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePeixe]]', $ws[14]["WIKI"]);
		$this->assertEquals($ws[14]["PAGENAME"], 'CoberturaDeAnchovies');
		$this->assertEquals($ws[14]["ID"], 'AnchoviesTopping');
		$this->assertEquals($ws[15]["NS"], 102);
		$this->assertEquals($ws[15]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[15]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[16]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[16]["WIKI"]);
		$this->assertContains('', $ws[16]["WIKI"]);
		$this->assertEquals($ws[16]["PAGENAME"], 'CoberturaDeArtichoke');
		$this->assertEquals($ws[16]["ID"], 'ArtichokeTopping');
		$this->assertEquals($ws[17]["NS"], 102);
		$this->assertEquals($ws[17]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[17]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[18]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[18]["WIKI"]);
		$this->assertContains('', $ws[18]["WIKI"]);
		$this->assertEquals($ws[18]["PAGENAME"], 'CoberturaDeAspargos');
		$this->assertEquals($ws[18]["ID"], 'AsparagusTopping');
		$this->assertEquals($ws[19]["NS"], 102);
		$this->assertEquals($ws[19]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[19]["ID"], 'hasTopping');
		$this->assertEquals($ws[20]["NS"], 102);
		$this->assertEquals($ws[20]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[20]["ID"], 'hasTopping');
		$this->assertEquals($ws[21]["NS"], 102);
		$this->assertEquals($ws[21]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[21]["ID"], 'hasTopping');
		$this->assertEquals($ws[22]["NS"], 102);
		$this->assertEquals($ws[22]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[22]["ID"], 'hasTopping');
		$this->assertEquals($ws[23]["NS"], 102);
		$this->assertEquals($ws[23]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[23]["ID"], 'hasTopping');
		$this->assertEquals($ws[24]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[24]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Cajun; Category:BNode31]]', $ws[24]["WIKI"]);
		$this->assertEquals($ws[24]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[24]["ID"], 'hasTopping');
		$this->assertEquals($ws[25]["NS"], 102);
		$this->assertEquals($ws[25]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[25]["ID"], 'hasTopping');
		$this->assertEquals($ws[26]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[26]["WIKI"]);
		$this->assertContains('', $ws[26]["WIKI"]);
		$this->assertContains('', $ws[26]["WIKI"]);
		$this->assertContains('', $ws[26]["WIKI"]);
		$this->assertContains('', $ws[26]["WIKI"]);
		$this->assertContains('', $ws[26]["WIKI"]);
		$this->assertContains('', $ws[26]["WIKI"]);
		$this->assertContains('', $ws[26]["WIKI"]);
		$this->assertEquals($ws[26]["PAGENAME"], 'Cajun');
		$this->assertEquals($ws[26]["ID"], 'Cajun');
		$this->assertEquals($ws[27]["NS"], 102);
		$this->assertEquals($ws[27]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[27]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[28]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeErvas]]', $ws[28]["WIKI"]);
		$this->assertContains('', $ws[28]["WIKI"]);
		$this->assertEquals($ws[28]["PAGENAME"], 'CoberturaDeCajun');
		$this->assertEquals($ws[28]["ID"], 'CajunSpiceTopping');
		$this->assertEquals($ws[29]["NS"], 102);
		$this->assertEquals($ws[29]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[29]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[30]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[30]["WIKI"]);
		$this->assertContains('', $ws[30]["WIKI"]);
		$this->assertEquals($ws[30]["PAGENAME"], 'CoberturaDeCaper');
		$this->assertEquals($ws[30]["ID"], 'CaperTopping');
		$this->assertEquals($ws[31]["NS"], 102);
		$this->assertEquals($ws[31]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[31]["ID"], 'hasTopping');
		$this->assertEquals($ws[32]["NS"], 102);
		$this->assertEquals($ws[32]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[32]["ID"], 'hasTopping');
		$this->assertEquals($ws[33]["NS"], 102);
		$this->assertEquals($ws[33]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[33]["ID"], 'hasTopping');
		$this->assertEquals($ws[34]["NS"], 102);
		$this->assertEquals($ws[34]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[34]["ID"], 'hasTopping');
		$this->assertEquals($ws[35]["NS"], 102);
		$this->assertEquals($ws[35]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[35]["ID"], 'hasTopping');
		$this->assertEquals($ws[36]["NS"], 102);
		$this->assertEquals($ws[36]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[36]["ID"], 'hasTopping');
		$this->assertEquals($ws[37]["NS"], 102);
		$this->assertEquals($ws[37]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[37]["ID"], 'hasTopping');
		$this->assertEquals($ws[38]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[38]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Capricciosa; Category:BNode49]]', $ws[38]["WIKI"]);
		$this->assertEquals($ws[38]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[38]["ID"], 'hasTopping');
		$this->assertEquals($ws[39]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertContains('', $ws[39]["WIKI"]);
		$this->assertEquals($ws[39]["PAGENAME"], 'Capricciosa');
		$this->assertEquals($ws[39]["ID"], 'Capricciosa');
		$this->assertEquals($ws[40]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[40]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Caprina; Category:BNode58]]', $ws[40]["WIKI"]);
		$this->assertEquals($ws[40]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[40]["ID"], 'hasTopping');
		$this->assertEquals($ws[41]["NS"], 102);
		$this->assertEquals($ws[41]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[41]["ID"], 'hasTopping');
		$this->assertEquals($ws[42]["NS"], 102);
		$this->assertEquals($ws[42]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[42]["ID"], 'hasTopping');
		$this->assertEquals($ws[43]["NS"], 102);
		$this->assertEquals($ws[43]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[43]["ID"], 'hasTopping');
		$this->assertEquals($ws[44]["NS"], 102);
		$this->assertEquals($ws[44]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[44]["ID"], 'hasTopping');
		$this->assertEquals($ws[45]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[45]["WIKI"]);
		$this->assertContains('', $ws[45]["WIKI"]);
		$this->assertContains('', $ws[45]["WIKI"]);
		$this->assertContains('', $ws[45]["WIKI"]);
		$this->assertContains('', $ws[45]["WIKI"]);
		$this->assertContains('', $ws[45]["WIKI"]);
		$this->assertEquals($ws[45]["PAGENAME"], 'Caprina');
		$this->assertEquals($ws[45]["ID"], 'Caprina');
		$this->assertEquals($ws[46]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[46]["WIKI"]);
		$this->assertEquals($ws[46]["PAGENAME"], 'CoberturaDeQueijo');
		$this->assertEquals($ws[46]["ID"], 'CheeseTopping');
		$this->assertEquals($ws[47]["NS"], 14);
		$this->assertEquals($ws[47]["PAGENAME"], 'PizzaComQueijo');
		$this->assertEquals($ws[47]["ID"], 'CheeseyPizza');
		$this->assertEquals($ws[48]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeQueijo]]', $ws[48]["WIKI"]);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[48]["WIKI"]);
		$this->assertEquals($ws[48]["PAGENAME"], 'CoberturaDeQueijoComVegetais');
		$this->assertEquals($ws[48]["ID"], 'CheeseyVegetableTopping');
		$this->assertEquals($ws[49]["NS"], 102);
		$this->assertEquals($ws[49]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[49]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[50]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeCarne]]', $ws[50]["WIKI"]);
		$this->assertContains('', $ws[50]["WIKI"]);
		$this->assertEquals($ws[50]["PAGENAME"], 'CoberturaDeFrango');
		$this->assertEquals($ws[50]["ID"], 'ChickenTopping');
		$this->assertEquals($ws[51]["NS"], 14);
		$this->assertEquals($ws[51]["PAGENAME"], 'Pais');
		$this->assertEquals($ws[51]["ID"], 'Country');
		$this->assertEquals($ws[52]["NS"], 14);
		$this->assertContains('[[Category:BaseDaPizza]]', $ws[52]["WIKI"]);
		$this->assertEquals($ws[52]["PAGENAME"], 'BaseEspessa');
		$this->assertEquals($ws[52]["ID"], 'DeepPanBase');
		$this->assertEquals($ws[53]["NS"], 14);
		$this->assertEquals($ws[53]["PAGENAME"], 'DomainConcept');
		$this->assertEquals($ws[53]["ID"], 'DomainConcept');
		$this->assertEquals($ws[54]["NS"], 102);
		$this->assertEquals($ws[54]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[54]["ID"], 'hasTopping');
		$this->assertEquals($ws[55]["NS"], 102);
		$this->assertEquals($ws[55]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[55]["ID"], 'hasTopping');
		$this->assertEquals($ws[56]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[56]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Fiorentina; Category:BNode80]]', $ws[56]["WIKI"]);
		$this->assertEquals($ws[56]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[56]["ID"], 'hasTopping');
		$this->assertEquals($ws[57]["NS"], 102);
		$this->assertEquals($ws[57]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[57]["ID"], 'hasTopping');
		$this->assertEquals($ws[58]["NS"], 102);
		$this->assertEquals($ws[58]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[58]["ID"], 'hasTopping');
		$this->assertEquals($ws[59]["NS"], 102);
		$this->assertEquals($ws[59]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[59]["ID"], 'hasTopping');
		$this->assertEquals($ws[60]["NS"], 102);
		$this->assertEquals($ws[60]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[60]["ID"], 'hasTopping');
		$this->assertEquals($ws[61]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[61]["WIKI"]);
		$this->assertContains('', $ws[61]["WIKI"]);
		$this->assertContains('', $ws[61]["WIKI"]);
		$this->assertContains('', $ws[61]["WIKI"]);
		$this->assertContains('', $ws[61]["WIKI"]);
		$this->assertContains('', $ws[61]["WIKI"]);
		$this->assertContains('', $ws[61]["WIKI"]);
		$this->assertContains('', $ws[61]["WIKI"]);
		$this->assertEquals($ws[61]["PAGENAME"], 'Fiorentina');
		$this->assertEquals($ws[61]["ID"], 'Fiorentina');
		$this->assertEquals($ws[62]["NS"], 102);
		$this->assertEquals($ws[62]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[62]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[63]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[63]["WIKI"]);
		$this->assertContains('', $ws[63]["WIKI"]);
		$this->assertEquals($ws[63]["PAGENAME"], 'CoberturaDePeixe');
		$this->assertEquals($ws[63]["ID"], 'FishTopping');
		$this->assertEquals($ws[64]["NS"], 14);
		$this->assertContains('[[Category:DomainConcept]]', $ws[64]["WIKI"]);
		$this->assertEquals($ws[64]["PAGENAME"], 'Food');
		$this->assertEquals($ws[64]["ID"], 'Food');
		$this->assertEquals($ws[65]["NS"], 102);
		$this->assertEquals($ws[65]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[65]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[66]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeQueijo]]', $ws[66]["WIKI"]);
		$this->assertContains('', $ws[66]["WIKI"]);
		$this->assertEquals($ws[66]["PAGENAME"], 'CoberturaQuatroQueijos');
		$this->assertEquals($ws[66]["ID"], 'FourCheesesTopping');
		$this->assertEquals($ws[67]["NS"], 102);
		$this->assertEquals($ws[67]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[67]["ID"], 'hasTopping');
		$this->assertEquals($ws[68]["NS"], 102);
		$this->assertEquals($ws[68]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[68]["ID"], 'hasTopping');
		$this->assertEquals($ws[69]["NS"], 102);
		$this->assertEquals($ws[69]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[69]["ID"], 'hasTopping');
		$this->assertEquals($ws[70]["NS"], 102);
		$this->assertEquals($ws[70]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[70]["ID"], 'hasTopping');
		$this->assertEquals($ws[71]["NS"], 102);
		$this->assertEquals($ws[71]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[71]["ID"], 'hasTopping');
		$this->assertEquals($ws[72]["NS"], 102);
		$this->assertEquals($ws[72]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[72]["ID"], 'hasTopping');
		$this->assertEquals($ws[73]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[73]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:QuatroQueijos; Category:BNode100]]', $ws[73]["WIKI"]);
		$this->assertEquals($ws[73]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[73]["ID"], 'hasTopping');
		$this->assertEquals($ws[74]["NS"], 102);
		$this->assertEquals($ws[74]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[74]["ID"], 'hasTopping');
		$this->assertEquals($ws[75]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertContains('', $ws[75]["WIKI"]);
		$this->assertEquals($ws[75]["PAGENAME"], 'QuatroQueijos');
		$this->assertEquals($ws[75]["ID"], 'FourSeasons');
		$this->assertEquals($ws[76]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[76]["WIKI"]);
		$this->assertEquals($ws[76]["PAGENAME"], 'CoberturaDeFrutas');
		$this->assertEquals($ws[76]["ID"], 'FruitTopping');
		$this->assertEquals($ws[77]["NS"], 102);
		$this->assertEquals($ws[77]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[77]["ID"], 'hasTopping');
		$this->assertEquals($ws[78]["NS"], 102);
		$this->assertEquals($ws[78]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[78]["ID"], 'hasTopping');
		$this->assertEquals($ws[79]["NS"], 102);
		$this->assertEquals($ws[79]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[79]["ID"], 'hasTopping');
		$this->assertEquals($ws[80]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[80]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:FrutosDoMar; Category:BNode113]]', $ws[80]["WIKI"]);
		$this->assertEquals($ws[80]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[80]["ID"], 'hasTopping');
		$this->assertEquals($ws[81]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[81]["WIKI"]);
		$this->assertContains('', $ws[81]["WIKI"]);
		$this->assertContains('', $ws[81]["WIKI"]);
		$this->assertContains('', $ws[81]["WIKI"]);
		$this->assertContains('', $ws[81]["WIKI"]);
		$this->assertEquals($ws[81]["PAGENAME"], 'FrutosDoMar');
		$this->assertEquals($ws[81]["ID"], 'FruttiDiMare');
		$this->assertEquals($ws[82]["NS"], 102);
		$this->assertEquals($ws[82]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[82]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[83]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[83]["WIKI"]);
		$this->assertContains('', $ws[83]["WIKI"]);
		$this->assertEquals($ws[83]["PAGENAME"], 'CoberturaDeAlho');
		$this->assertEquals($ws[83]["ID"], 'GarlicTopping');
		$this->assertEquals($ws[84]["NS"], 102);
		$this->assertEquals($ws[84]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[84]["ID"], 'hasTopping');
		$this->assertEquals($ws[85]["NS"], 102);
		$this->assertEquals($ws[85]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[85]["ID"], 'hasTopping');
		$this->assertEquals($ws[86]["NS"], 102);
		$this->assertEquals($ws[86]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[86]["ID"], 'hasTopping');
		$this->assertEquals($ws[87]["NS"], 102);
		$this->assertEquals($ws[87]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[87]["ID"], 'hasTopping');
		$this->assertEquals($ws[88]["NS"], 102);
		$this->assertEquals($ws[88]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[88]["ID"], 'hasTopping');
		$this->assertEquals($ws[89]["NS"], 102);
		$this->assertEquals($ws[89]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[89]["ID"], 'hasTopping');
		$this->assertEquals($ws[90]["NS"], 102);
		$this->assertEquals($ws[90]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[90]["ID"], 'hasTopping');
		$this->assertEquals($ws[91]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[91]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Giardiniera; Category:BNode126]]', $ws[91]["WIKI"]);
		$this->assertEquals($ws[91]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[91]["ID"], 'hasTopping');
		$this->assertEquals($ws[92]["NS"], 102);
		$this->assertEquals($ws[92]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[92]["ID"], 'hasTopping');
		$this->assertEquals($ws[93]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertContains('', $ws[93]["WIKI"]);
		$this->assertEquals($ws[93]["PAGENAME"], 'Giardiniera');
		$this->assertEquals($ws[93]["ID"], 'Giardiniera');
		$this->assertEquals($ws[94]["NS"], 102);
		$this->assertEquals($ws[94]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[94]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[95]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeQueijo]]', $ws[95]["WIKI"]);
		$this->assertContains('', $ws[95]["WIKI"]);
		$this->assertEquals($ws[95]["PAGENAME"], 'CoberturaDeQueijoDeCabra');
		$this->assertEquals($ws[95]["ID"], 'GoatsCheeseTopping');
		$this->assertEquals($ws[96]["NS"], 102);
		$this->assertEquals($ws[96]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[96]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[97]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeQueijo]]', $ws[97]["WIKI"]);
		$this->assertContains('', $ws[97]["WIKI"]);
		$this->assertEquals($ws[97]["PAGENAME"], 'CoberturaDeGorgonzola');
		$this->assertEquals($ws[97]["ID"], 'GorgonzolaTopping');
		$this->assertEquals($ws[98]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePimentao]]', $ws[98]["WIKI"]);
		$this->assertEquals($ws[98]["PAGENAME"], 'CoberturaDePimentaoVerde');
		$this->assertEquals($ws[98]["ID"], 'GreenPepperTopping');
		$this->assertEquals($ws[99]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeCarne]]', $ws[99]["WIKI"]);
		$this->assertEquals($ws[99]["PAGENAME"], 'CoberturaDePresunto');
		$this->assertEquals($ws[99]["ID"], 'HamTopping');
		$this->assertEquals($ws[100]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[100]["WIKI"]);
		$this->assertEquals($ws[100]["PAGENAME"], 'CoberturaDeErvas');
		$this->assertEquals($ws[100]["ID"], 'HerbSpiceTopping');
		$this->assertEquals($ws[101]["NS"], 14);
		$this->assertContains('[[Category:Tempero]]', $ws[101]["WIKI"]);
		$this->assertEquals($ws[101]["PAGENAME"], 'Picante');
		$this->assertEquals($ws[101]["ID"], 'Hot');
		$this->assertEquals($ws[102]["NS"], 102);
		$this->assertEquals($ws[102]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[102]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[103]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePimentaoVerde]]', $ws[103]["WIKI"]);
		$this->assertContains('', $ws[103]["WIKI"]);
		$this->assertEquals($ws[103]["PAGENAME"], 'CoberturaDePimentaoVerdePicante');
		$this->assertEquals($ws[103]["ID"], 'HotGreenPepperTopping');
		$this->assertEquals($ws[104]["NS"], 102);
		$this->assertEquals($ws[104]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[104]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[105]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeCarne]]', $ws[105]["WIKI"]);
		$this->assertContains('', $ws[105]["WIKI"]);
		$this->assertEquals($ws[105]["PAGENAME"], 'CoberturaDeBifePicante');
		$this->assertEquals($ws[105]["ID"], 'HotSpicedBeefTopping');
		$this->assertEquals($ws[106]["NS"], 102);
		$this->assertEquals($ws[106]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[106]["ID"], 'hasTopping');
		$this->assertEquals($ws[107]["NS"], 14);
		$this->assertContains('[[Category:Food]]', $ws[107]["WIKI"]);
		$this->assertContains('', $ws[107]["WIKI"]);
		$this->assertEquals($ws[107]["PAGENAME"], 'Sorvete');
		$this->assertEquals($ws[107]["ID"], 'IceCream');
		$this->assertEquals($ws[108]["NS"], 14);
		$this->assertEquals($ws[108]["PAGENAME"], 'PizzaInteressante');
		$this->assertEquals($ws[108]["ID"], 'InterestingPizza');
		$this->assertEquals($ws[109]["NS"], 102);
		$this->assertEquals($ws[109]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[109]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[110]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePimentao]]', $ws[110]["WIKI"]);
		$this->assertContains('', $ws[110]["WIKI"]);
		$this->assertEquals($ws[110]["PAGENAME"], 'CoberturaDeJalapeno');
		$this->assertEquals($ws[110]["ID"], 'JalapenoPepperTopping');
		$this->assertEquals($ws[111]["NS"], 102);
		$this->assertEquals($ws[111]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[111]["ID"], 'hasTopping');
		$this->assertEquals($ws[112]["NS"], 102);
		$this->assertEquals($ws[112]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[112]["ID"], 'hasTopping');
		$this->assertEquals($ws[113]["NS"], 102);
		$this->assertEquals($ws[113]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[113]["ID"], 'hasTopping');
		$this->assertEquals($ws[114]["NS"], 102);
		$this->assertEquals($ws[114]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[114]["ID"], 'hasTopping');
		$this->assertEquals($ws[115]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[115]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:LaReine; Category:BNode150]]', $ws[115]["WIKI"]);
		$this->assertEquals($ws[115]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[115]["ID"], 'hasTopping');
		$this->assertEquals($ws[116]["NS"], 102);
		$this->assertEquals($ws[116]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[116]["ID"], 'hasTopping');
		$this->assertEquals($ws[117]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[117]["WIKI"]);
		$this->assertContains('', $ws[117]["WIKI"]);
		$this->assertContains('', $ws[117]["WIKI"]);
		$this->assertContains('', $ws[117]["WIKI"]);
		$this->assertContains('', $ws[117]["WIKI"]);
		$this->assertContains('', $ws[117]["WIKI"]);
		$this->assertContains('', $ws[117]["WIKI"]);
		$this->assertEquals($ws[117]["PAGENAME"], 'LaReine');
		$this->assertEquals($ws[117]["ID"], 'LaReine');
		$this->assertEquals($ws[118]["NS"], 102);
		$this->assertEquals($ws[118]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[118]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[119]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[119]["WIKI"]);
		$this->assertContains('', $ws[119]["WIKI"]);
		$this->assertEquals($ws[119]["PAGENAME"], 'CoberturaDeLeek');
		$this->assertEquals($ws[119]["ID"], 'LeekTopping');
		$this->assertEquals($ws[120]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[120]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Margherita; Category:BNode159]]', $ws[120]["WIKI"]);
		$this->assertEquals($ws[120]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[120]["ID"], 'hasTopping');
		$this->assertEquals($ws[121]["NS"], 102);
		$this->assertEquals($ws[121]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[121]["ID"], 'hasTopping');
		$this->assertEquals($ws[122]["NS"], 102);
		$this->assertEquals($ws[122]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[122]["ID"], 'hasTopping');
		$this->assertEquals($ws[123]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[123]["WIKI"]);
		$this->assertContains('', $ws[123]["WIKI"]);
		$this->assertContains('', $ws[123]["WIKI"]);
		$this->assertContains('', $ws[123]["WIKI"]);
		$this->assertEquals($ws[123]["PAGENAME"], 'Margherita');
		$this->assertEquals($ws[123]["ID"], 'Margherita');
		$this->assertEquals($ws[124]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[124]["WIKI"]);
		$this->assertEquals($ws[124]["PAGENAME"], 'CoberturaDeCarne');
		$this->assertEquals($ws[124]["ID"], 'MeatTopping');
		$this->assertEquals($ws[125]["NS"], 14);
		$this->assertEquals($ws[125]["PAGENAME"], 'PizzaDeCarne');
		$this->assertEquals($ws[125]["ID"], 'MeatyPizza');
		$this->assertEquals($ws[126]["NS"], 14);
		$this->assertContains('[[Category:Tempero]]', $ws[126]["WIKI"]);
		$this->assertEquals($ws[126]["PAGENAME"], 'Media');
		$this->assertEquals($ws[126]["ID"], 'Medium');
		$this->assertEquals($ws[127]["NS"], 14);
		$this->assertContains('[[Category:Tempero]]', $ws[127]["WIKI"]);
		$this->assertEquals($ws[127]["PAGENAME"], 'NaoPicante');
		$this->assertEquals($ws[127]["ID"], 'Mild');
		$this->assertEquals($ws[128]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePeixe]]', $ws[128]["WIKI"]);
		$this->assertEquals($ws[128]["PAGENAME"], 'CoberturaDeFrutosDoMarMistos');
		$this->assertEquals($ws[128]["ID"], 'MixedSeafoodTopping');
		$this->assertEquals($ws[129]["NS"], 102);
		$this->assertEquals($ws[129]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[129]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[130]["NS"], 102);
		$this->assertEquals($ws[130]["PAGENAME"], 'HasCountryOfOrigin');
		$this->assertEquals($ws[130]["ID"], 'hasCountryOfOrigin');
		$this->assertEquals($ws[131]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeQueijo]]', $ws[131]["WIKI"]);
		$this->assertContains('', $ws[131]["WIKI"]);
		$this->assertContains('', $ws[131]["WIKI"]);
		$this->assertEquals($ws[131]["PAGENAME"], 'CoberturaDeMozzarella');
		$this->assertEquals($ws[131]["ID"], 'MozzarellaTopping');
		$this->assertEquals($ws[132]["NS"], 102);
		$this->assertEquals($ws[132]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[132]["ID"], 'hasTopping');
		$this->assertEquals($ws[133]["NS"], 102);
		$this->assertEquals($ws[133]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[133]["ID"], 'hasTopping');
		$this->assertEquals($ws[134]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[134]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Cogumelo; Category:BNode172]]', $ws[134]["WIKI"]);
		$this->assertEquals($ws[134]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[134]["ID"], 'hasTopping');
		$this->assertEquals($ws[135]["NS"], 102);
		$this->assertEquals($ws[135]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[135]["ID"], 'hasTopping');
		$this->assertEquals($ws[136]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[136]["WIKI"]);
		$this->assertContains('', $ws[136]["WIKI"]);
		$this->assertContains('', $ws[136]["WIKI"]);
		$this->assertContains('', $ws[136]["WIKI"]);
		$this->assertContains('', $ws[136]["WIKI"]);
		$this->assertEquals($ws[136]["PAGENAME"], 'Cogumelo');
		$this->assertEquals($ws[136]["ID"], 'Mushroom');
		$this->assertEquals($ws[137]["NS"], 102);
		$this->assertEquals($ws[137]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[137]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[138]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[138]["WIKI"]);
		$this->assertContains('', $ws[138]["WIKI"]);
		$this->assertEquals($ws[138]["PAGENAME"], 'CoberturaDeCogumelo');
		$this->assertEquals($ws[138]["ID"], 'MushroomTopping');
		$this->assertEquals($ws[139]["NS"], 14);
		$this->assertContains('[[Category:Pizza]]', $ws[139]["WIKI"]);
		$this->assertEquals($ws[139]["PAGENAME"], 'PizzaComUmNome');
		$this->assertEquals($ws[139]["ID"], 'NamedPizza');
		$this->assertEquals($ws[140]["NS"], 102);
		$this->assertEquals($ws[140]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[140]["ID"], 'hasTopping');
		$this->assertEquals($ws[141]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[141]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Napoletana; Category:BNode180]]', $ws[141]["WIKI"]);
		$this->assertEquals($ws[141]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[141]["ID"], 'hasTopping');
		$this->assertEquals($ws[142]["NS"], 102);
		$this->assertEquals($ws[142]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[142]["ID"], 'hasTopping');
		$this->assertEquals($ws[143]["NS"], 102);
		$this->assertEquals($ws[143]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[143]["ID"], 'hasTopping');
		$this->assertEquals($ws[144]["NS"], 102);
		$this->assertEquals($ws[144]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[144]["ID"], 'hasTopping');
		$this->assertEquals($ws[145]["NS"], 102);
		$this->assertEquals($ws[145]["PAGENAME"], 'HasCountryOfOrigin');
		$this->assertEquals($ws[145]["ID"], 'hasCountryOfOrigin');
		$this->assertEquals($ws[146]["NS"], 102);
		$this->assertEquals($ws[146]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[146]["ID"], 'hasTopping');
		$this->assertEquals($ws[147]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[147]["WIKI"]);
		$this->assertContains('', $ws[147]["WIKI"]);
		$this->assertContains('', $ws[147]["WIKI"]);
		$this->assertContains('', $ws[147]["WIKI"]);
		$this->assertContains('', $ws[147]["WIKI"]);
		$this->assertContains('', $ws[147]["WIKI"]);
		$this->assertContains('', $ws[147]["WIKI"]);
		$this->assertContains('', $ws[147]["WIKI"]);
		$this->assertEquals($ws[147]["PAGENAME"], 'Napoletana');
		$this->assertEquals($ws[147]["ID"], 'Napoletana');
		$this->assertEquals($ws[148]["NS"], 14);
		$this->assertEquals($ws[148]["PAGENAME"], 'PizzaNaoVegetariana');
		$this->assertEquals($ws[148]["ID"], 'NonVegetarianPizza');
		$this->assertEquals($ws[149]["NS"], 102);
		$this->assertEquals($ws[149]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[149]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[150]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[150]["WIKI"]);
		$this->assertContains('', $ws[150]["WIKI"]);
		$this->assertEquals($ws[150]["PAGENAME"], 'CoberturaDeCastanha');
		$this->assertEquals($ws[150]["ID"], 'NutTopping');
		$this->assertEquals($ws[151]["NS"], 102);
		$this->assertEquals($ws[151]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[151]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[152]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[152]["WIKI"]);
		$this->assertContains('', $ws[152]["WIKI"]);
		$this->assertEquals($ws[152]["PAGENAME"], 'CoberturaDeAzeitona');
		$this->assertEquals($ws[152]["ID"], 'OliveTopping');
		$this->assertEquals($ws[153]["NS"], 102);
		$this->assertEquals($ws[153]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[153]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[154]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[154]["WIKI"]);
		$this->assertContains('', $ws[154]["WIKI"]);
		$this->assertEquals($ws[154]["PAGENAME"], 'CoberturaDeCebola');
		$this->assertEquals($ws[154]["ID"], 'OnionTopping');
		$this->assertEquals($ws[155]["NS"], 102);
		$this->assertEquals($ws[155]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[155]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[156]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePresunto]]', $ws[156]["WIKI"]);
		$this->assertContains('', $ws[156]["WIKI"]);
		$this->assertEquals($ws[156]["PAGENAME"], 'CoberturaDePrezuntoParma');
		$this->assertEquals($ws[156]["ID"], 'ParmaHamTopping');
		$this->assertEquals($ws[157]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[157]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Parmense; Category:BNode198]]', $ws[157]["WIKI"]);
		$this->assertEquals($ws[157]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[157]["ID"], 'hasTopping');
		$this->assertEquals($ws[158]["NS"], 102);
		$this->assertEquals($ws[158]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[158]["ID"], 'hasTopping');
		$this->assertEquals($ws[159]["NS"], 102);
		$this->assertEquals($ws[159]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[159]["ID"], 'hasTopping');
		$this->assertEquals($ws[160]["NS"], 102);
		$this->assertEquals($ws[160]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[160]["ID"], 'hasTopping');
		$this->assertEquals($ws[161]["NS"], 102);
		$this->assertEquals($ws[161]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[161]["ID"], 'hasTopping');
		$this->assertEquals($ws[162]["NS"], 102);
		$this->assertEquals($ws[162]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[162]["ID"], 'hasTopping');
		$this->assertEquals($ws[163]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[163]["WIKI"]);
		$this->assertContains('', $ws[163]["WIKI"]);
		$this->assertContains('', $ws[163]["WIKI"]);
		$this->assertContains('', $ws[163]["WIKI"]);
		$this->assertContains('', $ws[163]["WIKI"]);
		$this->assertContains('', $ws[163]["WIKI"]);
		$this->assertContains('', $ws[163]["WIKI"]);
		$this->assertEquals($ws[163]["PAGENAME"], 'Parmense');
		$this->assertEquals($ws[163]["ID"], 'Parmense');
		$this->assertEquals($ws[164]["NS"], 102);
		$this->assertEquals($ws[164]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[164]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[165]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeQueijo]]', $ws[165]["WIKI"]);
		$this->assertContains('', $ws[165]["WIKI"]);
		$this->assertEquals($ws[165]["PAGENAME"], 'CoberturaDeParmesao');
		$this->assertEquals($ws[165]["ID"], 'ParmesanTopping');
		$this->assertEquals($ws[166]["NS"], 102);
		$this->assertEquals($ws[166]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[166]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[167]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePimentao]]', $ws[167]["WIKI"]);
		$this->assertContains('', $ws[167]["WIKI"]);
		$this->assertEquals($ws[167]["PAGENAME"], 'CoberturaPeperonata');
		$this->assertEquals($ws[167]["ID"], 'PeperonataTopping');
		$this->assertEquals($ws[168]["NS"], 102);
		$this->assertEquals($ws[168]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[168]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[169]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeCarne]]', $ws[169]["WIKI"]);
		$this->assertContains('', $ws[169]["WIKI"]);
		$this->assertEquals($ws[169]["PAGENAME"], 'CoberturaDeCalabreza');
		$this->assertEquals($ws[169]["ID"], 'PeperoniSausageTopping');
		$this->assertEquals($ws[170]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[170]["WIKI"]);
		$this->assertEquals($ws[170]["PAGENAME"], 'CoberturaDePimentao');
		$this->assertEquals($ws[170]["ID"], 'PepperTopping');
		$this->assertEquals($ws[171]["NS"], 102);
		$this->assertEquals($ws[171]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[171]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[172]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[172]["WIKI"]);
		$this->assertContains('', $ws[172]["WIKI"]);
		$this->assertEquals($ws[172]["PAGENAME"], 'CoberturaPetitPois');
		$this->assertEquals($ws[172]["ID"], 'PetitPoisTopping');
		$this->assertEquals($ws[173]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeCastanha]]', $ws[173]["WIKI"]);
		$this->assertEquals($ws[173]["PAGENAME"], 'CoberturaPineKernels');
		$this->assertEquals($ws[173]["ID"], 'PineKernels');
		$this->assertEquals($ws[174]["NS"], 102);
		$this->assertEquals($ws[174]["PAGENAME"], 'HasBase');
		$this->assertEquals($ws[174]["ID"], 'hasBase');
		$this->assertEquals($ws[175]["NS"], 14);
		$this->assertContains('[[Category:Food]]', $ws[175]["WIKI"]);
		$this->assertContains('', $ws[175]["WIKI"]);
		$this->assertEquals($ws[175]["PAGENAME"], 'Pizza');
		$this->assertEquals($ws[175]["ID"], 'Pizza');
		$this->assertEquals($ws[176]["NS"], 14);
		$this->assertContains('[[Category:Food]]', $ws[176]["WIKI"]);
		$this->assertEquals($ws[176]["PAGENAME"], 'BaseDaPizza');
		$this->assertEquals($ws[176]["ID"], 'PizzaBase');
		$this->assertEquals($ws[177]["NS"], 14);
		$this->assertContains('[[Category:Food]]', $ws[177]["WIKI"]);
		$this->assertEquals($ws[177]["PAGENAME"], 'CoberturaDaPizza');
		$this->assertEquals($ws[177]["ID"], 'PizzaTopping');
		$this->assertEquals($ws[178]["NS"], 102);
		$this->assertEquals($ws[178]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[178]["ID"], 'hasTopping');
		$this->assertEquals($ws[179]["NS"], 102);
		$this->assertEquals($ws[179]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[179]["ID"], 'hasTopping');
		$this->assertEquals($ws[180]["NS"], 102);
		$this->assertEquals($ws[180]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[180]["ID"], 'hasTopping');
		$this->assertEquals($ws[181]["NS"], 102);
		$this->assertEquals($ws[181]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[181]["ID"], 'hasTopping');
		$this->assertEquals($ws[182]["NS"], 102);
		$this->assertEquals($ws[182]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[182]["ID"], 'hasTopping');
		$this->assertEquals($ws[183]["NS"], 102);
		$this->assertEquals($ws[183]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[183]["ID"], 'hasTopping');
		$this->assertEquals($ws[184]["NS"], 102);
		$this->assertEquals($ws[184]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[184]["ID"], 'hasTopping');
		$this->assertEquals($ws[185]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[185]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:PolloAdAstra; Category:BNode222]]', $ws[185]["WIKI"]);
		$this->assertEquals($ws[185]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[185]["ID"], 'hasTopping');
		$this->assertEquals($ws[186]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertContains('', $ws[186]["WIKI"]);
		$this->assertEquals($ws[186]["PAGENAME"], 'PolloAdAstra');
		$this->assertEquals($ws[186]["ID"], 'PolloAdAstra');
		$this->assertEquals($ws[187]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePeixe]]', $ws[187]["WIKI"]);
		$this->assertEquals($ws[187]["PAGENAME"], 'CoberturaDeCamarao');
		$this->assertEquals($ws[187]["ID"], 'PrawnsTopping');
		$this->assertEquals($ws[188]["NS"], 102);
		$this->assertEquals($ws[188]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[188]["ID"], 'hasTopping');
		$this->assertEquals($ws[189]["NS"], 102);
		$this->assertEquals($ws[189]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[189]["ID"], 'hasTopping');
		$this->assertEquals($ws[190]["NS"], 102);
		$this->assertEquals($ws[190]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[190]["ID"], 'hasTopping');
		$this->assertEquals($ws[191]["NS"], 102);
		$this->assertEquals($ws[191]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[191]["ID"], 'hasTopping');
		$this->assertEquals($ws[192]["NS"], 102);
		$this->assertEquals($ws[192]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[192]["ID"], 'hasTopping');
		$this->assertEquals($ws[193]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[193]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:CoberturaPrinceCarlo; Category:BNode236]]', $ws[193]["WIKI"]);
		$this->assertEquals($ws[193]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[193]["ID"], 'hasTopping');
		$this->assertEquals($ws[194]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[194]["WIKI"]);
		$this->assertContains('', $ws[194]["WIKI"]);
		$this->assertContains('', $ws[194]["WIKI"]);
		$this->assertContains('', $ws[194]["WIKI"]);
		$this->assertContains('', $ws[194]["WIKI"]);
		$this->assertContains('', $ws[194]["WIKI"]);
		$this->assertContains('', $ws[194]["WIKI"]);
		$this->assertEquals($ws[194]["PAGENAME"], 'CoberturaPrinceCarlo');
		$this->assertEquals($ws[194]["ID"], 'PrinceCarlo');
		$this->assertEquals($ws[195]["NS"], 102);
		$this->assertEquals($ws[195]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[195]["ID"], 'hasTopping');
		$this->assertEquals($ws[196]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[196]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:QuatroQueijos; Category:BNode244]]', $ws[196]["WIKI"]);
		$this->assertEquals($ws[196]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[196]["ID"], 'hasTopping');
		$this->assertEquals($ws[197]["NS"], 102);
		$this->assertEquals($ws[197]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[197]["ID"], 'hasTopping');
		$this->assertEquals($ws[198]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[198]["WIKI"]);
		$this->assertContains('', $ws[198]["WIKI"]);
		$this->assertContains('', $ws[198]["WIKI"]);
		$this->assertContains('', $ws[198]["WIKI"]);
		$this->assertEquals($ws[198]["PAGENAME"], 'QuatroQueijos');
		$this->assertEquals($ws[198]["ID"], 'QuattroFormaggi');
		$this->assertEquals($ws[199]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[199]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:PizzaItalianaReal; Category:BaseFinaEQuebradica]]', $ws[199]["WIKI"]);
		$this->assertEquals($ws[199]["PAGENAME"], 'HasBase');
		$this->assertEquals($ws[199]["ID"], 'hasBase');
		$this->assertEquals($ws[200]["NS"], 14);
		$this->assertContains('', $ws[200]["WIKI"]);
		$this->assertEquals($ws[200]["PAGENAME"], 'PizzaItalianaReal');
		$this->assertEquals($ws[200]["ID"], 'RealItalianPizza');
		$this->assertEquals($ws[201]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeCebola]]', $ws[201]["WIKI"]);
		$this->assertEquals($ws[201]["PAGENAME"], 'CoberturaDeCebolaVermelha');
		$this->assertEquals($ws[201]["ID"], 'RedOnionTopping');
		$this->assertEquals($ws[202]["NS"], 102);
		$this->assertEquals($ws[202]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[202]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[203]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[203]["WIKI"]);
		$this->assertContains('', $ws[203]["WIKI"]);
		$this->assertEquals($ws[203]["PAGENAME"], 'CoberturaRocket');
		$this->assertEquals($ws[203]["ID"], 'RocketTopping');
		$this->assertEquals($ws[204]["NS"], 102);
		$this->assertEquals($ws[204]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[204]["ID"], 'hasTopping');
		$this->assertEquals($ws[205]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[205]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Rosa; Category:BNode255]]', $ws[205]["WIKI"]);
		$this->assertEquals($ws[205]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[205]["ID"], 'hasTopping');
		$this->assertEquals($ws[206]["NS"], 102);
		$this->assertEquals($ws[206]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[206]["ID"], 'hasTopping');
		$this->assertEquals($ws[207]["NS"], 102);
		$this->assertEquals($ws[207]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[207]["ID"], 'hasTopping');
		$this->assertEquals($ws[208]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[208]["WIKI"]);
		$this->assertContains('', $ws[208]["WIKI"]);
		$this->assertContains('', $ws[208]["WIKI"]);
		$this->assertContains('', $ws[208]["WIKI"]);
		$this->assertContains('', $ws[208]["WIKI"]);
		$this->assertEquals($ws[208]["PAGENAME"], 'Rosa');
		$this->assertEquals($ws[208]["ID"], 'Rosa');
		$this->assertEquals($ws[209]["NS"], 102);
		$this->assertEquals($ws[209]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[209]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[210]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeErvas]]', $ws[210]["WIKI"]);
		$this->assertContains('', $ws[210]["WIKI"]);
		$this->assertEquals($ws[210]["PAGENAME"], 'CoberturaRosemary');
		$this->assertEquals($ws[210]["ID"], 'RosemaryTopping');
		$this->assertEquals($ws[211]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[211]["WIKI"]);
		$this->assertEquals($ws[211]["PAGENAME"], 'CoberturaEmMolho');
		$this->assertEquals($ws[211]["ID"], 'SauceTopping');
		$this->assertEquals($ws[212]["NS"], 102);
		$this->assertEquals($ws[212]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[212]["ID"], 'hasTopping');
		$this->assertEquals($ws[213]["NS"], 102);
		$this->assertEquals($ws[213]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[213]["ID"], 'hasTopping');
		$this->assertEquals($ws[214]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[214]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Siciliana; Category:BNode265]]', $ws[214]["WIKI"]);
		$this->assertEquals($ws[214]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[214]["ID"], 'hasTopping');
		$this->assertEquals($ws[215]["NS"], 102);
		$this->assertEquals($ws[215]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[215]["ID"], 'hasTopping');
		$this->assertEquals($ws[216]["NS"], 102);
		$this->assertEquals($ws[216]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[216]["ID"], 'hasTopping');
		$this->assertEquals($ws[217]["NS"], 102);
		$this->assertEquals($ws[217]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[217]["ID"], 'hasTopping');
		$this->assertEquals($ws[218]["NS"], 102);
		$this->assertEquals($ws[218]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[218]["ID"], 'hasTopping');
		$this->assertEquals($ws[219]["NS"], 102);
		$this->assertEquals($ws[219]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[219]["ID"], 'hasTopping');
		$this->assertEquals($ws[220]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertContains('', $ws[220]["WIKI"]);
		$this->assertEquals($ws[220]["PAGENAME"], 'Siciliana');
		$this->assertEquals($ws[220]["ID"], 'Siciliana');
		$this->assertEquals($ws[221]["NS"], 102);
		$this->assertEquals($ws[221]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[221]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[222]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeTomate]]', $ws[222]["WIKI"]);
		$this->assertContains('', $ws[222]["WIKI"]);
		$this->assertEquals($ws[222]["PAGENAME"], 'CoberturaDeTomateFatiado');
		$this->assertEquals($ws[222]["ID"], 'SlicedTomatoTopping');
		$this->assertEquals($ws[223]["NS"], 102);
		$this->assertEquals($ws[223]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[223]["ID"], 'hasTopping');
		$this->assertEquals($ws[224]["NS"], 102);
		$this->assertEquals($ws[224]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[224]["ID"], 'hasTopping');
		$this->assertEquals($ws[225]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[225]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:SloppyGiuseppe; Category:BNode282]]', $ws[225]["WIKI"]);
		$this->assertEquals($ws[225]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[225]["ID"], 'hasTopping');
		$this->assertEquals($ws[226]["NS"], 102);
		$this->assertEquals($ws[226]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[226]["ID"], 'hasTopping');
		$this->assertEquals($ws[227]["NS"], 102);
		$this->assertEquals($ws[227]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[227]["ID"], 'hasTopping');
		$this->assertEquals($ws[228]["NS"], 102);
		$this->assertEquals($ws[228]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[228]["ID"], 'hasTopping');
		$this->assertEquals($ws[229]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[229]["WIKI"]);
		$this->assertContains('', $ws[229]["WIKI"]);
		$this->assertContains('', $ws[229]["WIKI"]);
		$this->assertContains('', $ws[229]["WIKI"]);
		$this->assertContains('', $ws[229]["WIKI"]);
		$this->assertContains('', $ws[229]["WIKI"]);
		$this->assertContains('', $ws[229]["WIKI"]);
		$this->assertEquals($ws[229]["PAGENAME"], 'SloppyGiuseppe');
		$this->assertEquals($ws[229]["ID"], 'SloppyGiuseppe');
		$this->assertEquals($ws[230]["NS"], 102);
		$this->assertEquals($ws[230]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[230]["ID"], 'hasTopping');
		$this->assertEquals($ws[231]["NS"], 102);
		$this->assertEquals($ws[231]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[231]["ID"], 'hasTopping');
		$this->assertEquals($ws[232]["NS"], 102);
		$this->assertEquals($ws[232]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[232]["ID"], 'hasTopping');
		$this->assertEquals($ws[233]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[233]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Soho; Category:BNode295]]', $ws[233]["WIKI"]);
		$this->assertEquals($ws[233]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[233]["ID"], 'hasTopping');
		$this->assertEquals($ws[234]["NS"], 102);
		$this->assertEquals($ws[234]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[234]["ID"], 'hasTopping');
		$this->assertEquals($ws[235]["NS"], 102);
		$this->assertEquals($ws[235]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[235]["ID"], 'hasTopping');
		$this->assertEquals($ws[236]["NS"], 102);
		$this->assertEquals($ws[236]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[236]["ID"], 'hasTopping');
		$this->assertEquals($ws[237]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[237]["WIKI"]);
		$this->assertContains('', $ws[237]["WIKI"]);
		$this->assertContains('', $ws[237]["WIKI"]);
		$this->assertContains('', $ws[237]["WIKI"]);
		$this->assertContains('', $ws[237]["WIKI"]);
		$this->assertContains('', $ws[237]["WIKI"]);
		$this->assertContains('', $ws[237]["WIKI"]);
		$this->assertContains('', $ws[237]["WIKI"]);
		$this->assertEquals($ws[237]["PAGENAME"], 'Soho');
		$this->assertEquals($ws[237]["ID"], 'Soho');
		$this->assertEquals($ws[238]["NS"], 14);
		$this->assertContains('[[Category:ValorDaParticao]]', $ws[238]["WIKI"]);
		$this->assertEquals($ws[238]["PAGENAME"], 'Tempero');
		$this->assertEquals($ws[238]["ID"], 'Spiciness');
		$this->assertEquals($ws[239]["NS"], 14);
		$this->assertEquals($ws[239]["PAGENAME"], 'PizzaTemperada');
		$this->assertEquals($ws[239]["ID"], 'SpicyPizza');
		$this->assertEquals($ws[240]["NS"], 14);
		$this->assertEquals($ws[240]["PAGENAME"], 'PizzaTemperadaEquivalente');
		$this->assertEquals($ws[240]["ID"], 'SpicyPizzaEquivalent');
		$this->assertEquals($ws[241]["NS"], 14);
		$this->assertEquals($ws[241]["PAGENAME"], 'CoberturaTemperada');
		$this->assertEquals($ws[241]["ID"], 'SpicyTopping');
		$this->assertEquals($ws[242]["NS"], 102);
		$this->assertEquals($ws[242]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[242]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[243]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[243]["WIKI"]);
		$this->assertContains('', $ws[243]["WIKI"]);
		$this->assertEquals($ws[243]["PAGENAME"], 'CoberturaDeEspinafre');
		$this->assertEquals($ws[243]["ID"], 'SpinachTopping');
		$this->assertEquals($ws[244]["NS"], 102);
		$this->assertEquals($ws[244]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[244]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[245]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeFrutas]]', $ws[245]["WIKI"]);
		$this->assertContains('', $ws[245]["WIKI"]);
		$this->assertEquals($ws[245]["PAGENAME"], 'CoberturaSultana');
		$this->assertEquals($ws[245]["ID"], 'SultanaTopping');
		$this->assertEquals($ws[246]["NS"], 102);
		$this->assertEquals($ws[246]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[246]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[247]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeTomate]]', $ws[247]["WIKI"]);
		$this->assertContains('', $ws[247]["WIKI"]);
		$this->assertEquals($ws[247]["PAGENAME"], 'CoberturaDeTomateRessecadoAoSol');
		$this->assertEquals($ws[247]["ID"], 'SundriedTomatoTopping');
		$this->assertEquals($ws[248]["NS"], 102);
		$this->assertEquals($ws[248]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[248]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[249]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDePimentao]]', $ws[249]["WIKI"]);
		$this->assertContains('', $ws[249]["WIKI"]);
		$this->assertEquals($ws[249]["PAGENAME"], 'CoberturaDePimentaoDoce');
		$this->assertEquals($ws[249]["ID"], 'SweetPepperTopping');
		$this->assertEquals($ws[250]["NS"], 14);
		$this->assertContains('[[Category:BaseDaPizza]]', $ws[250]["WIKI"]);
		$this->assertEquals($ws[250]["PAGENAME"], 'BaseFinaEQuebradica');
		$this->assertEquals($ws[250]["ID"], 'ThinAndCrispyBase');
		$this->assertEquals($ws[251]["NS"], 14);
		$this->assertEquals($ws[251]["PAGENAME"], 'ThinAndCrispyPizza');
		$this->assertEquals($ws[251]["ID"], 'ThinAndCrispyPizza');
		$this->assertEquals($ws[252]["NS"], 102);
		$this->assertEquals($ws[252]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[252]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[253]["NS"], 14);
		$this->assertContains('[[Category:CoberturaEmMolho]]', $ws[253]["WIKI"]);
		$this->assertContains('', $ws[253]["WIKI"]);
		$this->assertEquals($ws[253]["PAGENAME"], 'MolhoTobascoPepper');
		$this->assertEquals($ws[253]["ID"], 'TobascoPepperSauce');
		$this->assertEquals($ws[254]["NS"], 102);
		$this->assertEquals($ws[254]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[254]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[255]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDeVegetais]]', $ws[255]["WIKI"]);
		$this->assertContains('', $ws[255]["WIKI"]);
		$this->assertEquals($ws[255]["PAGENAME"], 'CoberturaDeTomate');
		$this->assertEquals($ws[255]["ID"], 'TomatoTopping');
		$this->assertEquals($ws[256]["NS"], 102);
		$this->assertEquals($ws[256]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[256]["ID"], 'hasTopping');
		$this->assertEquals($ws[257]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[257]["WIKI"]);
		$this->assertContains('', $ws[257]["WIKI"]);
		$this->assertEquals($ws[257]["PAGENAME"], 'PizzaAberta');
		$this->assertEquals($ws[257]["ID"], 'UnclosedPizza');
		$this->assertEquals($ws[258]["NS"], 14);
		$this->assertEquals($ws[258]["PAGENAME"], 'ValorDaParticao');
		$this->assertEquals($ws[258]["ID"], 'ValuePartition');
		$this->assertEquals($ws[259]["NS"], 14);
		$this->assertContains('[[Category:CoberturaDaPizza]]', $ws[259]["WIKI"]);
		$this->assertEquals($ws[259]["PAGENAME"], 'CoberturaDeVegetais');
		$this->assertEquals($ws[259]["ID"], 'VegetableTopping');
		$this->assertEquals($ws[260]["NS"], 14);
		$this->assertEquals($ws[260]["PAGENAME"], 'PizzaVegetariana');
		$this->assertEquals($ws[260]["ID"], 'VegetarianPizza');
		$this->assertEquals($ws[261]["NS"], 14);
		$this->assertEquals($ws[261]["PAGENAME"], 'PizzaVegetarianaEquivalente1');
		$this->assertEquals($ws[261]["ID"], 'VegetarianPizzaEquivalent1');
		$this->assertEquals($ws[262]["NS"], 14);
		$this->assertEquals($ws[262]["PAGENAME"], 'PizzaVegetarianaEquivalente2');
		$this->assertEquals($ws[262]["ID"], 'VegetarianPizzaEquivalent2');
		$this->assertEquals($ws[263]["NS"], 14);
		$this->assertEquals($ws[263]["PAGENAME"], 'CoberturaVegetariana');
		$this->assertEquals($ws[263]["ID"], 'VegetarianTopping');
		$this->assertEquals($ws[264]["NS"], 102);
		$this->assertEquals($ws[264]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[264]["ID"], 'hasTopping');
		$this->assertEquals($ws[265]["NS"], 102);
		$this->assertEquals($ws[265]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[265]["ID"], 'hasTopping');
		$this->assertEquals($ws[266]["NS"], 102);
		$this->assertEquals($ws[266]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[266]["ID"], 'hasTopping');
		$this->assertEquals($ws[267]["NS"], 102);
		$this->assertEquals($ws[267]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[267]["ID"], 'hasTopping');
		$this->assertEquals($ws[268]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[268]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Veneziana; Category:BNode354]]', $ws[268]["WIKI"]);
		$this->assertEquals($ws[268]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[268]["ID"], 'hasTopping');
		$this->assertEquals($ws[269]["NS"], 102);
		$this->assertEquals($ws[269]["PAGENAME"], 'HasCountryOfOrigin');
		$this->assertEquals($ws[269]["ID"], 'hasCountryOfOrigin');
		$this->assertEquals($ws[270]["NS"], 102);
		$this->assertEquals($ws[270]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[270]["ID"], 'hasTopping');
		$this->assertEquals($ws[271]["NS"], 102);
		$this->assertEquals($ws[271]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[271]["ID"], 'hasTopping');
		$this->assertEquals($ws[272]["NS"], 102);
		$this->assertEquals($ws[272]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[272]["ID"], 'hasTopping');
		$this->assertEquals($ws[273]["NS"], 14);
		$this->assertContains('[[Category:PizzaComUmNome]]', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertContains('', $ws[273]["WIKI"]);
		$this->assertEquals($ws[273]["PAGENAME"], 'Veneziana');
		$this->assertEquals($ws[273]["ID"], 'Veneziana');
		$this->assertEquals($ws[274]["NS"], 14);
		$this->assertEquals($ws[274]["PAGENAME"], 'Thing');
		$this->assertEquals($ws[274]["ID"], 'Thing');
		$this->assertEquals($ws[275]["NS"], 102);
		$this->assertContains('[[Has domain and range::Category:Pizza; Category:BaseDaPizza]]', $ws[275]["WIKI"]);
		$this->assertContains('[[Is inverse of::Property:isBaseOf]]', $ws[275]["WIKI"]);
		$this->assertEquals($ws[275]["PAGENAME"], 'HasBase');
		$this->assertEquals($ws[275]["ID"], 'hasBase');
		$this->assertEquals($ws[276]["NS"], 102);
		$this->assertEquals($ws[276]["PAGENAME"], 'HasCountryOfOrigin');
		$this->assertEquals($ws[276]["ID"], 'hasCountryOfOrigin');
		$this->assertEquals($ws[277]["NS"], 102);
		$this->assertContains('[[Has domain and range::Category:Food; Category:Food]]', $ws[277]["WIKI"]);
		$this->assertContains('[[Category:Transitive properties]]', $ws[277]["WIKI"]);
		$this->assertEquals($ws[277]["PAGENAME"], 'HasIngredient');
		$this->assertEquals($ws[277]["ID"], 'hasIngredient');
		$this->assertEquals($ws[278]["NS"], 102);
		$this->assertContains('[[Has domain and range:: ;Category:Tempero]]', $ws[278]["WIKI"]);
		$this->assertEquals($ws[278]["PAGENAME"], 'HasSpiciness');
		$this->assertEquals($ws[278]["ID"], 'hasSpiciness');
		$this->assertEquals($ws[279]["NS"], 102);
		$this->assertContains('[[Has domain and range::Category:Pizza; Category:CoberturaDaPizza]]', $ws[279]["WIKI"]);
		$this->assertContains('[[Is inverse of::Property:isToppingOf]]', $ws[279]["WIKI"]);
		$this->assertEquals($ws[279]["PAGENAME"], 'HasTopping');
		$this->assertEquals($ws[279]["ID"], 'hasTopping');
		$this->assertEquals($ws[280]["NS"], 102);
		$this->assertContains('[[Has domain and range::Category:BaseDaPizza; Category:Pizza]]', $ws[280]["WIKI"]);
		$this->assertEquals($ws[280]["PAGENAME"], 'IsBaseOf');
		$this->assertEquals($ws[280]["ID"], 'isBaseOf');
		$this->assertEquals($ws[281]["NS"], 102);
		$this->assertContains('[[Has domain and range::Category:Food; Category:Food]]', $ws[281]["WIKI"]);
		$this->assertContains('[[Is inverse of::Property:hasIngredient]]', $ws[281]["WIKI"]);
		$this->assertContains('[[Category:Transitive properties]]', $ws[281]["WIKI"]);
		$this->assertEquals($ws[281]["PAGENAME"], 'IsIngredientOf');
		$this->assertEquals($ws[281]["ID"], 'isIngredientOf');
		$this->assertEquals($ws[282]["NS"], 102);
		$this->assertContains('[[Has domain and range::Category:CoberturaDaPizza; Category:Pizza]]', $ws[282]["WIKI"]);
		$this->assertEquals($ws[282]["PAGENAME"], 'IsToppingOf');
		$this->assertEquals($ws[282]["ID"], 'isToppingOf');
		$this->assertEquals($ws[283]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[283]["WIKI"]);
		$this->assertEquals($ws[283]["PAGENAME"], 'America');
		$this->assertEquals($ws[283]["ID"], 'America');
		$this->assertEquals($ws[284]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[284]["WIKI"]);
		$this->assertEquals($ws[284]["PAGENAME"], 'America');
		$this->assertEquals($ws[284]["ID"], 'America');
		$this->assertEquals($ws[285]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[285]["WIKI"]);
		$this->assertEquals($ws[285]["PAGENAME"], 'America');
		$this->assertEquals($ws[285]["ID"], 'America');
		$this->assertEquals($ws[286]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[286]["WIKI"]);
		$this->assertEquals($ws[286]["PAGENAME"], 'America');
		$this->assertEquals($ws[286]["ID"], 'America');
		$this->assertEquals($ws[287]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[287]["WIKI"]);
		$this->assertEquals($ws[287]["PAGENAME"], 'England');
		$this->assertEquals($ws[287]["ID"], 'England');
		$this->assertEquals($ws[288]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[288]["WIKI"]);
		$this->assertEquals($ws[288]["PAGENAME"], 'England');
		$this->assertEquals($ws[288]["ID"], 'England');
		$this->assertEquals($ws[289]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[289]["WIKI"]);
		$this->assertEquals($ws[289]["PAGENAME"], 'England');
		$this->assertEquals($ws[289]["ID"], 'England');
		$this->assertEquals($ws[290]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[290]["WIKI"]);
		$this->assertEquals($ws[290]["PAGENAME"], 'England');
		$this->assertEquals($ws[290]["ID"], 'England');
		$this->assertEquals($ws[291]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[291]["WIKI"]);
		$this->assertEquals($ws[291]["PAGENAME"], 'France');
		$this->assertEquals($ws[291]["ID"], 'France');
		$this->assertEquals($ws[292]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[292]["WIKI"]);
		$this->assertEquals($ws[292]["PAGENAME"], 'France');
		$this->assertEquals($ws[292]["ID"], 'France');
		$this->assertEquals($ws[293]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[293]["WIKI"]);
		$this->assertEquals($ws[293]["PAGENAME"], 'France');
		$this->assertEquals($ws[293]["ID"], 'France');
		$this->assertEquals($ws[294]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[294]["WIKI"]);
		$this->assertEquals($ws[294]["PAGENAME"], 'France');
		$this->assertEquals($ws[294]["ID"], 'France');
		$this->assertEquals($ws[295]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[295]["WIKI"]);
		$this->assertEquals($ws[295]["PAGENAME"], 'Germany');
		$this->assertEquals($ws[295]["ID"], 'Germany');
		$this->assertEquals($ws[296]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[296]["WIKI"]);
		$this->assertEquals($ws[296]["PAGENAME"], 'Germany');
		$this->assertEquals($ws[296]["ID"], 'Germany');
		$this->assertEquals($ws[297]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[297]["WIKI"]);
		$this->assertEquals($ws[297]["PAGENAME"], 'Germany');
		$this->assertEquals($ws[297]["ID"], 'Germany');
		$this->assertEquals($ws[298]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[298]["WIKI"]);
		$this->assertEquals($ws[298]["PAGENAME"], 'Germany');
		$this->assertEquals($ws[298]["ID"], 'Germany');
		$this->assertEquals($ws[299]["NS"], 0);
		$this->assertContains('[[Category:HasValue]]', $ws[299]["WIKI"]);
		$this->assertEquals($ws[299]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[299]["ID"], 'Italy');
		$this->assertEquals($ws[300]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[300]["WIKI"]);
		$this->assertEquals($ws[300]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[300]["ID"], 'Italy');
		$this->assertEquals($ws[301]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[301]["WIKI"]);
		$this->assertEquals($ws[301]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[301]["ID"], 'Italy');
		$this->assertEquals($ws[302]["NS"], 0);
		$this->assertContains('[[Category:HasValue]]', $ws[302]["WIKI"]);
		$this->assertEquals($ws[302]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[302]["ID"], 'Italy');
		$this->assertEquals($ws[303]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[303]["WIKI"]);
		$this->assertEquals($ws[303]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[303]["ID"], 'Italy');
		$this->assertEquals($ws[304]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[304]["WIKI"]);
		$this->assertEquals($ws[304]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[304]["ID"], 'Italy');
		$this->assertEquals($ws[305]["NS"], 0);
		$this->assertContains('[[Category:HasValue]]', $ws[305]["WIKI"]);
		$this->assertEquals($ws[305]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[305]["ID"], 'Italy');
		$this->assertEquals($ws[306]["NS"], 0);
		$this->assertContains('[[Category:Thing]]', $ws[306]["WIKI"]);
		$this->assertEquals($ws[306]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[306]["ID"], 'Italy');
		$this->assertEquals($ws[307]["NS"], 0);
		$this->assertContains('[[Category:Pais]]', $ws[307]["WIKI"]);
		$this->assertEquals($ws[307]["PAGENAME"], 'Italy');
		$this->assertEquals($ws[307]["ID"], 'Italy');


	}

	function testImport_Products() {

		$this->bot->testOntologyImport("testcases/resources/products.owl");
		$ws = $this->bot->getWikiStatements();
		$this->replaceWhitespaces($ws);

		$this->assertEquals($ws[0]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[0]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:DocumentWriter; Category:Component]]', $ws[0]["WIKI"]);
		$this->assertEquals($ws[0]["PAGENAME"], 'WritesDocumentationFor');
		$this->assertEquals($ws[0]["ID"], 'writesDocumentationFor');
		$this->assertEquals($ws[1]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[1]["WIKI"]);
		$this->assertContains('', $ws[1]["WIKI"]);
		$this->assertEquals($ws[1]["PAGENAME"], 'DocumentWriter');
		$this->assertEquals($ws[1]["ID"], 'DocumentWriter');
		$this->assertEquals($ws[2]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[2]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Developer; Category:Feature]]', $ws[2]["WIKI"]);
		$this->assertEquals($ws[2]["PAGENAME"], 'Developed');
		$this->assertEquals($ws[2]["ID"], 'developed');
		$this->assertEquals($ws[3]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[3]["WIKI"]);
		$this->assertContains('', $ws[3]["WIKI"]);
		$this->assertEquals($ws[3]["PAGENAME"], 'Developer');
		$this->assertEquals($ws[3]["ID"], 'Developer');
		$this->assertEquals($ws[4]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[4]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:DocumentWriter; Category:Component]]', $ws[4]["WIKI"]);
		$this->assertEquals($ws[4]["PAGENAME"], 'WritesDocumentationFor');
		$this->assertEquals($ws[4]["ID"], 'writesDocumentationFor');
		$this->assertEquals($ws[5]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[5]["WIKI"]);
		$this->assertContains('', $ws[5]["WIKI"]);
		$this->assertEquals($ws[5]["PAGENAME"], 'DocumentWriter');
		$this->assertEquals($ws[5]["ID"], 'DocumentWriter');
		$this->assertEquals($ws[6]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[6]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Person]]', $ws[6]["WIKI"]);
		$this->assertEquals($ws[6]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[6]["ID"], 'hasName');
		$this->assertEquals($ws[7]["NS"], 14);
		$this->assertContains('', $ws[7]["WIKI"]);
		$this->assertEquals($ws[7]["PAGENAME"], 'Person');
		$this->assertEquals($ws[7]["ID"], 'Person');
		$this->assertEquals($ws[8]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[8]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Developer; Category:Feature]]', $ws[8]["WIKI"]);
		$this->assertEquals($ws[8]["PAGENAME"], 'Developed');
		$this->assertEquals($ws[8]["ID"], 'developed');
		$this->assertEquals($ws[9]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[9]["WIKI"]);
		$this->assertContains('', $ws[9]["WIKI"]);
		$this->assertEquals($ws[9]["PAGENAME"], 'Developer');
		$this->assertEquals($ws[9]["ID"], 'Developer');
		$this->assertEquals($ws[10]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[10]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Feature]]', $ws[10]["WIKI"]);
		$this->assertEquals($ws[10]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[10]["ID"], 'hasName');
		$this->assertEquals($ws[11]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[11]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Feature; Category:Component]]', $ws[11]["WIKI"]);
		$this->assertEquals($ws[11]["PAGENAME"], 'BelongsTo');
		$this->assertEquals($ws[11]["ID"], 'belongsTo');
		$this->assertEquals($ws[12]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[12]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Feature; Category:Technology]]', $ws[12]["WIKI"]);
		$this->assertEquals($ws[12]["PAGENAME"], 'Uses');
		$this->assertEquals($ws[12]["ID"], 'uses');
		$this->assertEquals($ws[13]["NS"], 14);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertContains('', $ws[13]["WIKI"]);
		$this->assertEquals($ws[13]["PAGENAME"], 'Feature');
		$this->assertEquals($ws[13]["ID"], 'Feature');
		$this->assertEquals($ws[14]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[14]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product]]', $ws[14]["WIKI"]);
		$this->assertEquals($ws[14]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[14]["ID"], 'hasName');
		$this->assertEquals($ws[15]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[15]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product; Category:Technology]]', $ws[15]["WIKI"]);
		$this->assertEquals($ws[15]["PAGENAME"], 'BasedOn');
		$this->assertEquals($ws[15]["ID"], 'basedOn');
		$this->assertEquals($ws[16]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[16]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product; Category:Feature]]', $ws[16]["WIKI"]);
		$this->assertEquals($ws[16]["PAGENAME"], 'HasFeature');
		$this->assertEquals($ws[16]["ID"], 'hasFeature');
		$this->assertEquals($ws[17]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[17]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product; Category:Component]]', $ws[17]["WIKI"]);
		$this->assertEquals($ws[17]["PAGENAME"], 'ConsistsOf');
		$this->assertEquals($ws[17]["ID"], 'consistsOf');
		$this->assertEquals($ws[18]["NS"], 14);
		$this->assertContains('', $ws[18]["WIKI"]);
		$this->assertContains('', $ws[18]["WIKI"]);
		$this->assertContains('', $ws[18]["WIKI"]);
		$this->assertContains('', $ws[18]["WIKI"]);
		$this->assertEquals($ws[18]["PAGENAME"], 'Product');
		$this->assertEquals($ws[18]["ID"], 'Product');
		$this->assertEquals($ws[19]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[19]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Technology]]', $ws[19]["WIKI"]);
		$this->assertEquals($ws[19]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[19]["ID"], 'hasName');
		$this->assertEquals($ws[20]["NS"], 14);
		$this->assertContains('', $ws[20]["WIKI"]);
		$this->assertEquals($ws[20]["PAGENAME"], 'Technology');
		$this->assertEquals($ws[20]["ID"], 'Technology');
		$this->assertEquals($ws[21]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[21]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component]]', $ws[21]["WIKI"]);
		$this->assertEquals($ws[21]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[21]["ID"], 'hasName');
		$this->assertEquals($ws[22]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[22]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component; Category:Technology]]', $ws[22]["WIKI"]);
		$this->assertEquals($ws[22]["PAGENAME"], 'BasedOn');
		$this->assertEquals($ws[22]["ID"], 'basedOn');
		$this->assertEquals($ws[23]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[23]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component; Category:Feature]]', $ws[23]["WIKI"]);
		$this->assertEquals($ws[23]["PAGENAME"], 'ConsistsOf');
		$this->assertEquals($ws[23]["ID"], 'consistsOf');
		$this->assertEquals($ws[24]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[24]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component; Category:Product]]', $ws[24]["WIKI"]);
		$this->assertEquals($ws[24]["PAGENAME"], 'BelongsTo');
		$this->assertEquals($ws[24]["ID"], 'belongsTo');
		$this->assertEquals($ws[25]["NS"], 14);
		$this->assertContains('', $ws[25]["WIKI"]);
		$this->assertContains('', $ws[25]["WIKI"]);
		$this->assertContains('', $ws[25]["WIKI"]);
		$this->assertContains('', $ws[25]["WIKI"]);
		$this->assertEquals($ws[25]["PAGENAME"], 'Component');
		$this->assertEquals($ws[25]["ID"], 'Component');
		$this->assertEquals($ws[26]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[26]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:DocumentWriter; Category:Component]]', $ws[26]["WIKI"]);
		$this->assertEquals($ws[26]["PAGENAME"], 'WritesDocumentationFor');
		$this->assertEquals($ws[26]["ID"], 'writesDocumentationFor');
		$this->assertEquals($ws[27]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[27]["WIKI"]);
		$this->assertContains('', $ws[27]["WIKI"]);
		$this->assertEquals($ws[27]["PAGENAME"], 'DocumentWriter');
		$this->assertEquals($ws[27]["ID"], 'DocumentWriter');
		$this->assertEquals($ws[28]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[28]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Person]]', $ws[28]["WIKI"]);
		$this->assertEquals($ws[28]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[28]["ID"], 'hasName');
		$this->assertEquals($ws[29]["NS"], 14);
		$this->assertContains('', $ws[29]["WIKI"]);
		$this->assertEquals($ws[29]["PAGENAME"], 'Person');
		$this->assertEquals($ws[29]["ID"], 'Person');
		$this->assertEquals($ws[30]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[30]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Developer; Category:Feature]]', $ws[30]["WIKI"]);
		$this->assertEquals($ws[30]["PAGENAME"], 'Developed');
		$this->assertEquals($ws[30]["ID"], 'developed');
		$this->assertEquals($ws[31]["NS"], 14);
		$this->assertContains('[[Category:Person]]', $ws[31]["WIKI"]);
		$this->assertContains('', $ws[31]["WIKI"]);
		$this->assertEquals($ws[31]["PAGENAME"], 'Developer');
		$this->assertEquals($ws[31]["ID"], 'Developer');
		$this->assertEquals($ws[32]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[32]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Feature]]', $ws[32]["WIKI"]);
		$this->assertEquals($ws[32]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[32]["ID"], 'hasName');
		$this->assertEquals($ws[33]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[33]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Feature; Category:Component]]', $ws[33]["WIKI"]);
		$this->assertEquals($ws[33]["PAGENAME"], 'BelongsTo');
		$this->assertEquals($ws[33]["ID"], 'belongsTo');
		$this->assertEquals($ws[34]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[34]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Feature; Category:Technology]]', $ws[34]["WIKI"]);
		$this->assertEquals($ws[34]["PAGENAME"], 'Uses');
		$this->assertEquals($ws[34]["ID"], 'uses');
		$this->assertEquals($ws[35]["NS"], 14);
		$this->assertContains('', $ws[35]["WIKI"]);
		$this->assertContains('', $ws[35]["WIKI"]);
		$this->assertContains('', $ws[35]["WIKI"]);
		$this->assertEquals($ws[35]["PAGENAME"], 'Feature');
		$this->assertEquals($ws[35]["ID"], 'Feature');
		$this->assertEquals($ws[36]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[36]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product]]', $ws[36]["WIKI"]);
		$this->assertEquals($ws[36]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[36]["ID"], 'hasName');
		$this->assertEquals($ws[37]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[37]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product; Category:Technology]]', $ws[37]["WIKI"]);
		$this->assertEquals($ws[37]["PAGENAME"], 'BasedOn');
		$this->assertEquals($ws[37]["ID"], 'basedOn');
		$this->assertEquals($ws[38]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[38]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product; Category:Feature]]', $ws[38]["WIKI"]);
		$this->assertEquals($ws[38]["PAGENAME"], 'HasFeature');
		$this->assertEquals($ws[38]["ID"], 'hasFeature');
		$this->assertEquals($ws[39]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[39]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Product; Category:Component]]', $ws[39]["WIKI"]);
		$this->assertEquals($ws[39]["PAGENAME"], 'ConsistsOf');
		$this->assertEquals($ws[39]["ID"], 'consistsOf');
		$this->assertEquals($ws[40]["NS"], 14);
		$this->assertContains('', $ws[40]["WIKI"]);
		$this->assertContains('', $ws[40]["WIKI"]);
		$this->assertContains('', $ws[40]["WIKI"]);
		$this->assertContains('', $ws[40]["WIKI"]);
		$this->assertEquals($ws[40]["PAGENAME"], 'Product');
		$this->assertEquals($ws[40]["ID"], 'Product');
		$this->assertEquals($ws[41]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[41]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Technology]]', $ws[41]["WIKI"]);
		$this->assertEquals($ws[41]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[41]["ID"], 'hasName');
		$this->assertEquals($ws[42]["NS"], 14);
		$this->assertContains('', $ws[42]["WIKI"]);
		$this->assertEquals($ws[42]["PAGENAME"], 'Technology');
		$this->assertEquals($ws[42]["ID"], 'Technology');
		$this->assertEquals($ws[43]["NS"], 102);
		$this->assertContains('[[Has type::Type:String]]', $ws[43]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component]]', $ws[43]["WIKI"]);
		$this->assertEquals($ws[43]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[43]["ID"], 'hasName');
		$this->assertEquals($ws[44]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[44]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component; Category:Technology]]', $ws[44]["WIKI"]);
		$this->assertEquals($ws[44]["PAGENAME"], 'BasedOn');
		$this->assertEquals($ws[44]["ID"], 'basedOn');
		$this->assertEquals($ws[45]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[45]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component; Category:Feature]]', $ws[45]["WIKI"]);
		$this->assertEquals($ws[45]["PAGENAME"], 'ConsistsOf');
		$this->assertEquals($ws[45]["ID"], 'consistsOf');
		$this->assertEquals($ws[46]["NS"], 102);
		$this->assertContains('[[Has type::Type:Page]]', $ws[46]["WIKI"]);
		$this->assertContains('[[Has domain and range::Category:Component; Category:Product]]', $ws[46]["WIKI"]);
		$this->assertEquals($ws[46]["PAGENAME"], 'BelongsTo');
		$this->assertEquals($ws[46]["ID"], 'belongsTo');
		$this->assertEquals($ws[47]["NS"], 14);
		$this->assertContains('', $ws[47]["WIKI"]);
		$this->assertContains('', $ws[47]["WIKI"]);
		$this->assertContains('', $ws[47]["WIKI"]);
		$this->assertContains('', $ws[47]["WIKI"]);
		$this->assertEquals($ws[47]["PAGENAME"], 'Component');
		$this->assertEquals($ws[47]["ID"], 'Component');
		$this->assertEquals($ws[48]["NS"], 102);
		$this->assertContains('[[Is inverse of::Property:belongsTo]]', $ws[48]["WIKI"]);
		$this->assertEquals($ws[48]["PAGENAME"], 'ConsistsOf');
		$this->assertEquals($ws[48]["ID"], 'consistsOf');
		$this->assertEquals($ws[49]["NS"], 102);
		$this->assertEquals($ws[49]["PAGENAME"], 'BasedOn');
		$this->assertEquals($ws[49]["ID"], 'basedOn');
		$this->assertEquals($ws[50]["NS"], 102);
		$this->assertEquals($ws[50]["PAGENAME"], 'BelongsTo');
		$this->assertEquals($ws[50]["ID"], 'belongsTo');
		$this->assertEquals($ws[51]["NS"], 102);
		$this->assertEquals($ws[51]["PAGENAME"], 'Developed');
		$this->assertEquals($ws[51]["ID"], 'developed');
		$this->assertEquals($ws[52]["NS"], 102);
		$this->assertEquals($ws[52]["PAGENAME"], 'HasFeature');
		$this->assertEquals($ws[52]["ID"], 'hasFeature');
		$this->assertEquals($ws[53]["NS"], 102);
		$this->assertEquals($ws[53]["PAGENAME"], 'Uses');
		$this->assertEquals($ws[53]["ID"], 'uses');
		$this->assertEquals($ws[54]["NS"], 102);
		$this->assertEquals($ws[54]["PAGENAME"], 'WritesDocumentationFor');
		$this->assertEquals($ws[54]["ID"], 'writesDocumentationFor');
		$this->assertEquals($ws[55]["NS"], 102);
		$this->assertEquals($ws[55]["PAGENAME"], 'HasName');
		$this->assertEquals($ws[55]["ID"], 'hasName');


	}

	function testImport_SWRC() {

	 $this->bot->testOntologyImport("testcases/resources/swrc_updated_v0.7.1.owl");
	 $ws = $this->bot->getWikiStatements();
	 $this->replaceWhitespaces($ws);
	 $this->assertEquals($ws[0]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[0]["WIKI"]);
	 $this->assertEquals($ws[0]["PAGENAME"], 'Teil_eines_Buches_mit_eigenem_Titel');
	 $this->assertEquals($ws[0]["ID"], 'InCollection');
	 $this->assertEquals($ws[1]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[1]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[1]["WIKI"]);
	 $this->assertEquals($ws[1]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[1]["ID"], 'cite');
	 $this->assertEquals($ws[2]["NS"], 14);
	 $this->assertContains('', $ws[2]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[2]["WIKI"]);
	 $this->assertEquals($ws[2]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[2]["ID"], 'Publication');
	 $this->assertEquals($ws[3]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[3]["WIKI"]);
	 $this->assertEquals($ws[3]["PAGENAME"], 'Teil_eines_Buches');
	 $this->assertEquals($ws[3]["ID"], 'InBook');
	 $this->assertEquals($ws[4]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[4]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[4]["WIKI"]);
	 $this->assertEquals($ws[4]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[4]["ID"], 'cite');
	 $this->assertEquals($ws[5]["NS"], 14);
	 $this->assertContains('', $ws[5]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[5]["WIKI"]);
	 $this->assertEquals($ws[5]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[5]["ID"], 'Publication');
	 $this->assertEquals($ws[6]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[6]["WIKI"]);
	 $this->assertEquals($ws[6]["PAGENAME"], 'Forschungsarbeit');
	 $this->assertEquals($ws[6]["ID"], 'ResearchPaper');
	 $this->assertEquals($ws[7]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[7]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[7]["WIKI"]);
	 $this->assertEquals($ws[7]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[7]["ID"], 'cite');
	 $this->assertEquals($ws[8]["NS"], 14);
	 $this->assertContains('', $ws[8]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[8]["WIKI"]);
	 $this->assertEquals($ws[8]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[8]["ID"], 'Publication');
	 $this->assertEquals($ws[9]["NS"], 14);
	 $this->assertContains('[[Category:Projekt]]', $ws[9]["WIKI"]);
	 $this->assertEquals($ws[9]["PAGENAME"], 'Forschungsprojekt');
	 $this->assertEquals($ws[9]["ID"], 'ResearchProject');
	 $this->assertEquals($ws[10]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[10]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[10]["WIKI"]);
	 $this->assertEquals($ws[10]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[10]["ID"], 'member');
	 $this->assertEquals($ws[11]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[11]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[11]["WIKI"]);
	 $this->assertEquals($ws[11]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[11]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[12]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[12]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[12]["WIKI"]);
	 $this->assertEquals($ws[12]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[12]["ID"], 'head');
	 $this->assertEquals($ws[13]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[13]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[13]["WIKI"]);
	 $this->assertEquals($ws[13]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[13]["ID"], 'projectInfo');
	 $this->assertEquals($ws[14]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[14]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[14]["WIKI"]);
	 $this->assertEquals($ws[14]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[14]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[15]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[15]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[15]["WIKI"]);
	 $this->assertEquals($ws[15]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[15]["ID"], 'isAbout');
	 $this->assertEquals($ws[16]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[16]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[16]["WIKI"]);
	 $this->assertEquals($ws[16]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[16]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[17]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[17]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[17]["WIKI"]);
	 $this->assertEquals($ws[17]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[17]["ID"], 'status');
	 $this->assertEquals($ws[18]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[18]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[18]["WIKI"]);
	 $this->assertEquals($ws[18]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[18]["ID"], 'startDate');
	 $this->assertEquals($ws[19]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[19]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[19]["WIKI"]);
	 $this->assertEquals($ws[19]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[19]["ID"], 'financedBy');
	 $this->assertEquals($ws[20]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[20]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[20]["WIKI"]);
	 $this->assertEquals($ws[20]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[20]["ID"], 'homepage');
	 $this->assertEquals($ws[21]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[21]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[21]["WIKI"]);
	 $this->assertEquals($ws[21]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[21]["ID"], 'endDate');
	 $this->assertEquals($ws[22]["NS"], 14);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertEquals($ws[22]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[22]["ID"], 'Project');
	 $this->assertEquals($ws[23]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[23]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Institut; Category:Forschungsgruppe]]', $ws[23]["WIKI"]);
	 $this->assertEquals($ws[23]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[23]["ID"], 'hasParts');
	 $this->assertEquals($ws[24]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[24]["WIKI"]);
	 $this->assertContains('', $ws[24]["WIKI"]);
	 $this->assertEquals($ws[24]["PAGENAME"], 'Institut');
	 $this->assertEquals($ws[24]["ID"], 'Institute');
	 $this->assertEquals($ws[25]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[25]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[25]["WIKI"]);
	 $this->assertEquals($ws[25]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[25]["ID"], 'employs');
	 $this->assertEquals($ws[26]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[26]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[26]["WIKI"]);
	 $this->assertEquals($ws[26]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[26]["ID"], 'technicalReport');
	 $this->assertEquals($ws[27]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[27]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[27]["WIKI"]);
	 $this->assertEquals($ws[27]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[27]["ID"], 'finances');
	 $this->assertEquals($ws[28]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[28]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[28]["WIKI"]);
	 $this->assertEquals($ws[28]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[28]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[29]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[29]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[29]["WIKI"]);
	 $this->assertEquals($ws[29]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[29]["ID"], 'publisherOf');
	 $this->assertEquals($ws[30]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[30]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[30]["WIKI"]);
	 $this->assertEquals($ws[30]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[30]["ID"], 'develops');
	 $this->assertEquals($ws[31]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[31]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[31]["WIKI"]);
	 $this->assertEquals($ws[31]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[31]["ID"], 'carriesOut');
	 $this->assertEquals($ws[32]["NS"], 14);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertContains('', $ws[32]["WIKI"]);
	 $this->assertEquals($ws[32]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[32]["ID"], 'Organization');
	 $this->assertEquals($ws[33]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[33]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[33]["WIKI"]);
	 $this->assertEquals($ws[33]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[33]["ID"], 'head');
	 $this->assertEquals($ws[34]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[34]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[34]["WIKI"]);
	 $this->assertEquals($ws[34]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[34]["ID"], 'member');
	 $this->assertEquals($ws[35]["NS"], 14);
	 $this->assertContains('', $ws[35]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[35]["WIKI"]);
	 $this->assertContains('', $ws[35]["WIKI"]);
	 $this->assertEquals($ws[35]["PAGENAME"], 'Forschungsgruppe');
	 $this->assertEquals($ws[35]["ID"], 'ResearchGroup');
	 $this->assertEquals($ws[36]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[36]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Fachbereich]]', $ws[36]["WIKI"]);
	 $this->assertEquals($ws[36]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[36]["ID"], 'hasParts');
	 $this->assertEquals($ws[37]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[37]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Student]]', $ws[37]["WIKI"]);
	 $this->assertEquals($ws[37]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[37]["ID"], 'student');
	 $this->assertEquals($ws[38]["NS"], 14);
	 $this->assertContains('', $ws[38]["WIKI"]);
	 $this->assertContains('', $ws[38]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[38]["WIKI"]);
	 $this->assertEquals($ws[38]["PAGENAME"], 'Unversität');
	 $this->assertEquals($ws[38]["ID"], 'University');
	 $this->assertEquals($ws[39]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[39]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[39]["WIKI"]);
	 $this->assertEquals($ws[39]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[39]["ID"], 'head');
	 $this->assertEquals($ws[40]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[40]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[40]["WIKI"]);
	 $this->assertEquals($ws[40]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[40]["ID"], 'member');
	 $this->assertEquals($ws[41]["NS"], 14);
	 $this->assertContains('', $ws[41]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[41]["WIKI"]);
	 $this->assertContains('', $ws[41]["WIKI"]);
	 $this->assertEquals($ws[41]["PAGENAME"], 'Forschungsgruppe');
	 $this->assertEquals($ws[41]["ID"], 'ResearchGroup');
	 $this->assertEquals($ws[42]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[42]["WIKI"]);
	 $this->assertEquals($ws[42]["PAGENAME"], 'Unternehmen');
	 $this->assertEquals($ws[42]["ID"], 'Enterprise');
	 $this->assertEquals($ws[43]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[43]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Fachbereich; Category:Institut]]', $ws[43]["WIKI"]);
	 $this->assertEquals($ws[43]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[43]["ID"], 'hasParts');
	 $this->assertEquals($ws[44]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[44]["WIKI"]);
	 $this->assertContains('', $ws[44]["WIKI"]);
	 $this->assertEquals($ws[44]["PAGENAME"], 'Fachbereich');
	 $this->assertEquals($ws[44]["ID"], 'Department');
	 $this->assertEquals($ws[45]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[45]["WIKI"]);
	 $this->assertEquals($ws[45]["PAGENAME"], 'Verband');
	 $this->assertEquals($ws[45]["ID"], 'Association');
	 $this->assertEquals($ws[46]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[46]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Seminar; Category:Person]]', $ws[46]["WIKI"]);
	 $this->assertEquals($ws[46]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[46]["ID"], 'participant');
	 $this->assertEquals($ws[47]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[47]["WIKI"]);
	 $this->assertContains('', $ws[47]["WIKI"]);
	 $this->assertEquals($ws[47]["PAGENAME"], 'Seminar');
	 $this->assertEquals($ws[47]["ID"], 'Seminar');
	 $this->assertEquals($ws[48]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[48]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Workshop; Category:Person]]', $ws[48]["WIKI"]);
	 $this->assertEquals($ws[48]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[48]["ID"], 'participant');
	 $this->assertEquals($ws[49]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[49]["WIKI"]);
	 $this->assertContains('', $ws[49]["WIKI"]);
	 $this->assertEquals($ws[49]["PAGENAME"], 'Workshop');
	 $this->assertEquals($ws[49]["ID"], 'Workshop');
	 $this->assertEquals($ws[50]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[50]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Konferenz; Category:Person]]', $ws[50]["WIKI"]);
	 $this->assertEquals($ws[50]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[50]["ID"], 'participant');
	 $this->assertEquals($ws[51]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[51]["WIKI"]);
	 $this->assertContains('', $ws[51]["WIKI"]);
	 $this->assertEquals($ws[51]["PAGENAME"], 'Konferenz');
	 $this->assertEquals($ws[51]["ID"], 'Conference');
	 $this->assertEquals($ws[52]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[52]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Besprechung; Category:Person]]', $ws[52]["WIKI"]);
	 $this->assertEquals($ws[52]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[52]["ID"], 'participant');
	 $this->assertEquals($ws[53]["NS"], 14);
	 $this->assertContains('', $ws[53]["WIKI"]);
	 $this->assertContains('[[Category:Ereignis]]', $ws[53]["WIKI"]);
	 $this->assertEquals($ws[53]["PAGENAME"], 'Besprechung');
	 $this->assertEquals($ws[53]["ID"], 'Meeting');
	 $this->assertEquals($ws[54]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[54]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Kolloquium; Category:Person]]', $ws[54]["WIKI"]);
	 $this->assertEquals($ws[54]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[54]["ID"], 'participant');
	 $this->assertEquals($ws[55]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[55]["WIKI"]);
	 $this->assertContains('', $ws[55]["WIKI"]);
	 $this->assertEquals($ws[55]["PAGENAME"], 'Kolloquium');
	 $this->assertEquals($ws[55]["ID"], 'Colloquium');
	 $this->assertEquals($ws[56]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[56]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Vortrag; Category:Person]]', $ws[56]["WIKI"]);
	 $this->assertEquals($ws[56]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[56]["ID"], 'givenBy');
	 $this->assertEquals($ws[57]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[57]["WIKI"]);
	 $this->assertContains('', $ws[57]["WIKI"]);
	 $this->assertEquals($ws[57]["PAGENAME"], 'Vortrag');
	 $this->assertEquals($ws[57]["ID"], 'Lecture');
	 $this->assertEquals($ws[58]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[58]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[58]["WIKI"]);
	 $this->assertEquals($ws[58]["PAGENAME"], 'BeiEreignis');
	 $this->assertEquals($ws[58]["ID"], 'atEvent');
	 $this->assertEquals($ws[59]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[59]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[59]["WIKI"]);
	 $this->assertEquals($ws[59]["PAGENAME"], 'HatTeilEreignis');
	 $this->assertEquals($ws[59]["ID"], 'hasPartEvent');
	 $this->assertEquals($ws[60]["NS"], 14);
	 $this->assertContains('', $ws[60]["WIKI"]);
	 $this->assertContains('', $ws[60]["WIKI"]);
	 $this->assertEquals($ws[60]["PAGENAME"], 'Ereignis');
	 $this->assertEquals($ws[60]["ID"], 'Event');
	 $this->assertEquals($ws[61]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[61]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[61]["WIKI"]);
	 $this->assertEquals($ws[61]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[61]["ID"], 'lastName');
	 $this->assertEquals($ws[62]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[62]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[62]["WIKI"]);
	 $this->assertEquals($ws[62]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[62]["ID"], 'email');
	 $this->assertEquals($ws[63]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[63]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[63]["WIKI"]);
	 $this->assertEquals($ws[63]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[63]["ID"], 'homepage');
	 $this->assertEquals($ws[64]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[64]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[64]["WIKI"]);
	 $this->assertEquals($ws[64]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[64]["ID"], 'address');
	 $this->assertEquals($ws[65]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[65]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[65]["WIKI"]);
	 $this->assertEquals($ws[65]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[65]["ID"], 'firstName');
	 $this->assertEquals($ws[66]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[66]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[66]["WIKI"]);
	 $this->assertEquals($ws[66]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[66]["ID"], 'phone');
	 $this->assertEquals($ws[67]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[67]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[67]["WIKI"]);
	 $this->assertEquals($ws[67]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[67]["ID"], 'fax');
	 $this->assertEquals($ws[68]["NS"], 14);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertContains('', $ws[68]["WIKI"]);
	 $this->assertEquals($ws[68]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[68]["ID"], 'Person');
	 $this->assertEquals($ws[69]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[69]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Messe; Category:Person]]', $ws[69]["WIKI"]);
	 $this->assertEquals($ws[69]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[69]["ID"], 'participant');
	 $this->assertEquals($ws[70]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[70]["WIKI"]);
	 $this->assertContains('', $ws[70]["WIKI"]);
	 $this->assertEquals($ws[70]["PAGENAME"], 'Messe');
	 $this->assertEquals($ws[70]["ID"], 'Exhibition');
	 $this->assertEquals($ws[71]["NS"], 14);
	 $this->assertContains('[[Category:Seminar]]', $ws[71]["WIKI"]);
	 $this->assertEquals($ws[71]["PAGENAME"], 'Oberseminar');
	 $this->assertEquals($ws[71]["ID"], 'GraduateClass');
	 $this->assertEquals($ws[72]["NS"], 14);
	 $this->assertContains('[[Category:Seminar]]', $ws[72]["WIKI"]);
	 $this->assertEquals($ws[72]["PAGENAME"], 'Hauptseminar');
	 $this->assertEquals($ws[72]["ID"], 'UndergraduateAdvancedClass');
	 $this->assertEquals($ws[73]["NS"], 14);
	 $this->assertContains('[[Category:Seminar]]', $ws[73]["WIKI"]);
	 $this->assertEquals($ws[73]["PAGENAME"], 'Proseminar');
	 $this->assertEquals($ws[73]["ID"], 'UndergraduateIntermediateClass');
	 $this->assertEquals($ws[74]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[74]["WIKI"]);
	 $this->assertEquals($ws[74]["PAGENAME"], 'Unternehmen');
	 $this->assertEquals($ws[74]["ID"], 'Enterprise');
	 $this->assertEquals($ws[75]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[75]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[75]["WIKI"]);
	 $this->assertEquals($ws[75]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[75]["ID"], 'employs');
	 $this->assertEquals($ws[76]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[76]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[76]["WIKI"]);
	 $this->assertEquals($ws[76]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[76]["ID"], 'technicalReport');
	 $this->assertEquals($ws[77]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[77]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[77]["WIKI"]);
	 $this->assertEquals($ws[77]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[77]["ID"], 'finances');
	 $this->assertEquals($ws[78]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[78]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[78]["WIKI"]);
	 $this->assertEquals($ws[78]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[78]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[79]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[79]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[79]["WIKI"]);
	 $this->assertEquals($ws[79]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[79]["ID"], 'publisherOf');
	 $this->assertEquals($ws[80]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[80]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[80]["WIKI"]);
	 $this->assertEquals($ws[80]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[80]["ID"], 'develops');
	 $this->assertEquals($ws[81]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[81]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[81]["WIKI"]);
	 $this->assertEquals($ws[81]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[81]["ID"], 'carriesOut');
	 $this->assertEquals($ws[82]["NS"], 14);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertContains('', $ws[82]["WIKI"]);
	 $this->assertEquals($ws[82]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[82]["ID"], 'Organization');
	 $this->assertEquals($ws[83]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[83]["WIKI"]);
	 $this->assertEquals($ws[83]["PAGENAME"], 'Verband');
	 $this->assertEquals($ws[83]["ID"], 'Association');
	 $this->assertEquals($ws[84]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[84]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Fachbereich; Category:Institut]]', $ws[84]["WIKI"]);
	 $this->assertEquals($ws[84]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[84]["ID"], 'hasParts');
	 $this->assertEquals($ws[85]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[85]["WIKI"]);
	 $this->assertContains('', $ws[85]["WIKI"]);
	 $this->assertEquals($ws[85]["PAGENAME"], 'Fachbereich');
	 $this->assertEquals($ws[85]["ID"], 'Department');
	 $this->assertEquals($ws[86]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[86]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[86]["WIKI"]);
	 $this->assertEquals($ws[86]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[86]["ID"], 'head');
	 $this->assertEquals($ws[87]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[87]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[87]["WIKI"]);
	 $this->assertEquals($ws[87]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[87]["ID"], 'member');
	 $this->assertEquals($ws[88]["NS"], 14);
	 $this->assertContains('', $ws[88]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[88]["WIKI"]);
	 $this->assertContains('', $ws[88]["WIKI"]);
	 $this->assertEquals($ws[88]["PAGENAME"], 'Forschungsgruppe');
	 $this->assertEquals($ws[88]["ID"], 'ResearchGroup');
	 $this->assertEquals($ws[89]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[89]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Fachbereich]]', $ws[89]["WIKI"]);
	 $this->assertEquals($ws[89]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[89]["ID"], 'hasParts');
	 $this->assertEquals($ws[90]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[90]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Student]]', $ws[90]["WIKI"]);
	 $this->assertEquals($ws[90]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[90]["ID"], 'student');
	 $this->assertEquals($ws[91]["NS"], 14);
	 $this->assertContains('', $ws[91]["WIKI"]);
	 $this->assertContains('', $ws[91]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[91]["WIKI"]);
	 $this->assertEquals($ws[91]["PAGENAME"], 'Unversität');
	 $this->assertEquals($ws[91]["ID"], 'University');
	 $this->assertEquals($ws[92]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[92]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[92]["WIKI"]);
	 $this->assertEquals($ws[92]["PAGENAME"], 'BeiEreignis');
	 $this->assertEquals($ws[92]["ID"], 'atEvent');
	 $this->assertEquals($ws[93]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[93]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[93]["WIKI"]);
	 $this->assertEquals($ws[93]["PAGENAME"], 'HatTeilEreignis');
	 $this->assertEquals($ws[93]["ID"], 'hasPartEvent');
	 $this->assertEquals($ws[94]["NS"], 14);
	 $this->assertContains('', $ws[94]["WIKI"]);
	 $this->assertContains('', $ws[94]["WIKI"]);
	 $this->assertEquals($ws[94]["PAGENAME"], 'Ereignis');
	 $this->assertEquals($ws[94]["ID"], 'Event');
	 $this->assertEquals($ws[95]["NS"], 14);
	 $this->assertContains('[[Category:Fakultaetsmitglied]]', $ws[95]["WIKI"]);
	 $this->assertEquals($ws[95]["PAGENAME"], 'Ordentlicher_Professor');
	 $this->assertEquals($ws[95]["ID"], 'FullProfessor');
	 $this->assertEquals($ws[96]["NS"], 14);
	 $this->assertContains('[[Category:Wissenschaftlicher Mitarbeiter]]', $ws[96]["WIKI"]);
	 $this->assertEquals($ws[96]["PAGENAME"], 'Fakultaetsmitglied');
	 $this->assertEquals($ws[96]["ID"], 'FacultyMember');
	 $this->assertEquals($ws[97]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[97]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Kolloquium; Category:Person]]', $ws[97]["WIKI"]);
	 $this->assertEquals($ws[97]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[97]["ID"], 'participant');
	 $this->assertEquals($ws[98]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[98]["WIKI"]);
	 $this->assertContains('', $ws[98]["WIKI"]);
	 $this->assertEquals($ws[98]["PAGENAME"], 'Kolloquium');
	 $this->assertEquals($ws[98]["ID"], 'Colloquium');
	 $this->assertEquals($ws[99]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[99]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Besprechung; Category:Person]]', $ws[99]["WIKI"]);
	 $this->assertEquals($ws[99]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[99]["ID"], 'participant');
	 $this->assertEquals($ws[100]["NS"], 14);
	 $this->assertContains('', $ws[100]["WIKI"]);
	 $this->assertContains('[[Category:Ereignis]]', $ws[100]["WIKI"]);
	 $this->assertEquals($ws[100]["PAGENAME"], 'Besprechung');
	 $this->assertEquals($ws[100]["ID"], 'Meeting');
	 $this->assertEquals($ws[101]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[101]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[101]["WIKI"]);
	 $this->assertEquals($ws[101]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[101]["ID"], 'lastName');
	 $this->assertEquals($ws[102]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[102]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[102]["WIKI"]);
	 $this->assertEquals($ws[102]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[102]["ID"], 'email');
	 $this->assertEquals($ws[103]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[103]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[103]["WIKI"]);
	 $this->assertEquals($ws[103]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[103]["ID"], 'homepage');
	 $this->assertEquals($ws[104]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[104]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[104]["WIKI"]);
	 $this->assertEquals($ws[104]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[104]["ID"], 'address');
	 $this->assertEquals($ws[105]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[105]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[105]["WIKI"]);
	 $this->assertEquals($ws[105]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[105]["ID"], 'firstName');
	 $this->assertEquals($ws[106]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[106]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[106]["WIKI"]);
	 $this->assertEquals($ws[106]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[106]["ID"], 'phone');
	 $this->assertEquals($ws[107]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[107]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[107]["WIKI"]);
	 $this->assertEquals($ws[107]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[107]["ID"], 'fax');
	 $this->assertEquals($ws[108]["NS"], 14);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertContains('', $ws[108]["WIKI"]);
	 $this->assertEquals($ws[108]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[108]["ID"], 'Person');
	 $this->assertEquals($ws[109]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[109]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Vortrag; Category:Person]]', $ws[109]["WIKI"]);
	 $this->assertEquals($ws[109]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[109]["ID"], 'givenBy');
	 $this->assertEquals($ws[110]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[110]["WIKI"]);
	 $this->assertContains('', $ws[110]["WIKI"]);
	 $this->assertEquals($ws[110]["PAGENAME"], 'Vortrag');
	 $this->assertEquals($ws[110]["ID"], 'Lecture');
	 $this->assertEquals($ws[111]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[111]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Konferenz; Category:Person]]', $ws[111]["WIKI"]);
	 $this->assertEquals($ws[111]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[111]["ID"], 'participant');
	 $this->assertEquals($ws[112]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[112]["WIKI"]);
	 $this->assertContains('', $ws[112]["WIKI"]);
	 $this->assertEquals($ws[112]["PAGENAME"], 'Konferenz');
	 $this->assertEquals($ws[112]["ID"], 'Conference');
	 $this->assertEquals($ws[113]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[113]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Messe; Category:Person]]', $ws[113]["WIKI"]);
	 $this->assertEquals($ws[113]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[113]["ID"], 'participant');
	 $this->assertEquals($ws[114]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[114]["WIKI"]);
	 $this->assertContains('', $ws[114]["WIKI"]);
	 $this->assertEquals($ws[114]["PAGENAME"], 'Messe');
	 $this->assertEquals($ws[114]["ID"], 'Exhibition');
	 $this->assertEquals($ws[115]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[115]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Workshop; Category:Person]]', $ws[115]["WIKI"]);
	 $this->assertEquals($ws[115]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[115]["ID"], 'participant');
	 $this->assertEquals($ws[116]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[116]["WIKI"]);
	 $this->assertContains('', $ws[116]["WIKI"]);
	 $this->assertEquals($ws[116]["PAGENAME"], 'Workshop');
	 $this->assertEquals($ws[116]["ID"], 'Workshop');
	 $this->assertEquals($ws[117]["NS"], 14);
	 $this->assertContains('[[Category:Besprechung]]', $ws[117]["WIKI"]);
	 $this->assertEquals($ws[117]["PAGENAME"], 'Projektbesprechung');
	 $this->assertEquals($ws[117]["ID"], 'ProjectMeeting');
	 $this->assertEquals($ws[118]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[118]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Besprechung; Category:Person]]', $ws[118]["WIKI"]);
	 $this->assertEquals($ws[118]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[118]["ID"], 'participant');
	 $this->assertEquals($ws[119]["NS"], 14);
	 $this->assertContains('', $ws[119]["WIKI"]);
	 $this->assertContains('[[Category:Ereignis]]', $ws[119]["WIKI"]);
	 $this->assertEquals($ws[119]["PAGENAME"], 'Besprechung');
	 $this->assertEquals($ws[119]["ID"], 'Meeting');
	 $this->assertEquals($ws[120]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[120]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Messe; Category:Person]]', $ws[120]["WIKI"]);
	 $this->assertEquals($ws[120]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[120]["ID"], 'participant');
	 $this->assertEquals($ws[121]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[121]["WIKI"]);
	 $this->assertContains('', $ws[121]["WIKI"]);
	 $this->assertEquals($ws[121]["PAGENAME"], 'Messe');
	 $this->assertEquals($ws[121]["ID"], 'Exhibition');
	 $this->assertEquals($ws[122]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[122]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Vortrag; Category:Person]]', $ws[122]["WIKI"]);
	 $this->assertEquals($ws[122]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[122]["ID"], 'givenBy');
	 $this->assertEquals($ws[123]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[123]["WIKI"]);
	 $this->assertContains('', $ws[123]["WIKI"]);
	 $this->assertEquals($ws[123]["PAGENAME"], 'Vortrag');
	 $this->assertEquals($ws[123]["ID"], 'Lecture');
	 $this->assertEquals($ws[124]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[124]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Besprechung; Category:Person]]', $ws[124]["WIKI"]);
	 $this->assertEquals($ws[124]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[124]["ID"], 'participant');
	 $this->assertEquals($ws[125]["NS"], 14);
	 $this->assertContains('', $ws[125]["WIKI"]);
	 $this->assertContains('[[Category:Ereignis]]', $ws[125]["WIKI"]);
	 $this->assertEquals($ws[125]["PAGENAME"], 'Besprechung');
	 $this->assertEquals($ws[125]["ID"], 'Meeting');
	 $this->assertEquals($ws[126]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[126]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Workshop; Category:Person]]', $ws[126]["WIKI"]);
	 $this->assertEquals($ws[126]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[126]["ID"], 'participant');
	 $this->assertEquals($ws[127]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[127]["WIKI"]);
	 $this->assertContains('', $ws[127]["WIKI"]);
	 $this->assertEquals($ws[127]["PAGENAME"], 'Workshop');
	 $this->assertEquals($ws[127]["ID"], 'Workshop');
	 $this->assertEquals($ws[128]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[128]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Konferenz; Category:Person]]', $ws[128]["WIKI"]);
	 $this->assertEquals($ws[128]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[128]["ID"], 'participant');
	 $this->assertEquals($ws[129]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[129]["WIKI"]);
	 $this->assertContains('', $ws[129]["WIKI"]);
	 $this->assertEquals($ws[129]["PAGENAME"], 'Konferenz');
	 $this->assertEquals($ws[129]["ID"], 'Conference');
	 $this->assertEquals($ws[130]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[130]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[130]["WIKI"]);
	 $this->assertEquals($ws[130]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[130]["ID"], 'lastName');
	 $this->assertEquals($ws[131]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[131]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[131]["WIKI"]);
	 $this->assertEquals($ws[131]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[131]["ID"], 'email');
	 $this->assertEquals($ws[132]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[132]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[132]["WIKI"]);
	 $this->assertEquals($ws[132]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[132]["ID"], 'homepage');
	 $this->assertEquals($ws[133]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[133]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[133]["WIKI"]);
	 $this->assertEquals($ws[133]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[133]["ID"], 'address');
	 $this->assertEquals($ws[134]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[134]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[134]["WIKI"]);
	 $this->assertEquals($ws[134]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[134]["ID"], 'firstName');
	 $this->assertEquals($ws[135]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[135]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[135]["WIKI"]);
	 $this->assertEquals($ws[135]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[135]["ID"], 'phone');
	 $this->assertEquals($ws[136]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[136]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[136]["WIKI"]);
	 $this->assertEquals($ws[136]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[136]["ID"], 'fax');
	 $this->assertEquals($ws[137]["NS"], 14);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertContains('', $ws[137]["WIKI"]);
	 $this->assertEquals($ws[137]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[137]["ID"], 'Person');
	 $this->assertEquals($ws[138]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[138]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Fachbereich]]', $ws[138]["WIKI"]);
	 $this->assertEquals($ws[138]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[138]["ID"], 'hasParts');
	 $this->assertEquals($ws[139]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[139]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Student]]', $ws[139]["WIKI"]);
	 $this->assertEquals($ws[139]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[139]["ID"], 'student');
	 $this->assertEquals($ws[140]["NS"], 14);
	 $this->assertContains('', $ws[140]["WIKI"]);
	 $this->assertContains('', $ws[140]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[140]["WIKI"]);
	 $this->assertEquals($ws[140]["PAGENAME"], 'Unversität');
	 $this->assertEquals($ws[140]["ID"], 'University');
	 $this->assertEquals($ws[141]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[141]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Fachbereich; Category:Institut]]', $ws[141]["WIKI"]);
	 $this->assertEquals($ws[141]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[141]["ID"], 'hasParts');
	 $this->assertEquals($ws[142]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[142]["WIKI"]);
	 $this->assertContains('', $ws[142]["WIKI"]);
	 $this->assertEquals($ws[142]["PAGENAME"], 'Fachbereich');
	 $this->assertEquals($ws[142]["ID"], 'Department');
	 $this->assertEquals($ws[143]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[143]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Fachbereich; Category:Institut]]', $ws[143]["WIKI"]);
	 $this->assertEquals($ws[143]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[143]["ID"], 'hasParts');
	 $this->assertEquals($ws[144]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[144]["WIKI"]);
	 $this->assertContains('', $ws[144]["WIKI"]);
	 $this->assertEquals($ws[144]["PAGENAME"], 'Fachbereich');
	 $this->assertEquals($ws[144]["ID"], 'Department');
	 $this->assertEquals($ws[145]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[145]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[145]["WIKI"]);
	 $this->assertEquals($ws[145]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[145]["ID"], 'head');
	 $this->assertEquals($ws[146]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[146]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[146]["WIKI"]);
	 $this->assertEquals($ws[146]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[146]["ID"], 'member');
	 $this->assertEquals($ws[147]["NS"], 14);
	 $this->assertContains('', $ws[147]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[147]["WIKI"]);
	 $this->assertContains('', $ws[147]["WIKI"]);
	 $this->assertEquals($ws[147]["PAGENAME"], 'Forschungsgruppe');
	 $this->assertEquals($ws[147]["ID"], 'ResearchGroup');
	 $this->assertEquals($ws[148]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[148]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Student; Category:Unversität]]', $ws[148]["WIKI"]);
	 $this->assertEquals($ws[148]["PAGENAME"], 'StudiertAn');
	 $this->assertEquals($ws[148]["ID"], 'studiesAt');
	 $this->assertEquals($ws[149]["NS"], 14);
	 $this->assertContains('[[Category:Person]]', $ws[149]["WIKI"]);
	 $this->assertContains('', $ws[149]["WIKI"]);
	 $this->assertEquals($ws[149]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[149]["ID"], 'Student');
	 $this->assertEquals($ws[150]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[150]["WIKI"]);
	 $this->assertEquals($ws[150]["PAGENAME"], 'Verband');
	 $this->assertEquals($ws[150]["ID"], 'Association');
	 $this->assertEquals($ws[151]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[151]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[151]["WIKI"]);
	 $this->assertEquals($ws[151]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[151]["ID"], 'employs');
	 $this->assertEquals($ws[152]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[152]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[152]["WIKI"]);
	 $this->assertEquals($ws[152]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[152]["ID"], 'technicalReport');
	 $this->assertEquals($ws[153]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[153]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[153]["WIKI"]);
	 $this->assertEquals($ws[153]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[153]["ID"], 'finances');
	 $this->assertEquals($ws[154]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[154]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[154]["WIKI"]);
	 $this->assertEquals($ws[154]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[154]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[155]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[155]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[155]["WIKI"]);
	 $this->assertEquals($ws[155]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[155]["ID"], 'publisherOf');
	 $this->assertEquals($ws[156]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[156]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[156]["WIKI"]);
	 $this->assertEquals($ws[156]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[156]["ID"], 'develops');
	 $this->assertEquals($ws[157]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[157]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[157]["WIKI"]);
	 $this->assertEquals($ws[157]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[157]["ID"], 'carriesOut');
	 $this->assertEquals($ws[158]["NS"], 14);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertContains('', $ws[158]["WIKI"]);
	 $this->assertEquals($ws[158]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[158]["ID"], 'Organization');
	 $this->assertEquals($ws[159]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[159]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Workshop; Category:Person]]', $ws[159]["WIKI"]);
	 $this->assertEquals($ws[159]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[159]["ID"], 'participant');
	 $this->assertEquals($ws[160]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[160]["WIKI"]);
	 $this->assertContains('', $ws[160]["WIKI"]);
	 $this->assertEquals($ws[160]["PAGENAME"], 'Workshop');
	 $this->assertEquals($ws[160]["ID"], 'Workshop');
	 $this->assertEquals($ws[161]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[161]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Vortrag; Category:Person]]', $ws[161]["WIKI"]);
	 $this->assertEquals($ws[161]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[161]["ID"], 'givenBy');
	 $this->assertEquals($ws[162]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[162]["WIKI"]);
	 $this->assertContains('', $ws[162]["WIKI"]);
	 $this->assertEquals($ws[162]["PAGENAME"], 'Vortrag');
	 $this->assertEquals($ws[162]["ID"], 'Lecture');
	 $this->assertEquals($ws[163]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[163]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[163]["WIKI"]);
	 $this->assertEquals($ws[163]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[163]["ID"], 'lastName');
	 $this->assertEquals($ws[164]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[164]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[164]["WIKI"]);
	 $this->assertEquals($ws[164]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[164]["ID"], 'email');
	 $this->assertEquals($ws[165]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[165]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[165]["WIKI"]);
	 $this->assertEquals($ws[165]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[165]["ID"], 'homepage');
	 $this->assertEquals($ws[166]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[166]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[166]["WIKI"]);
	 $this->assertEquals($ws[166]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[166]["ID"], 'address');
	 $this->assertEquals($ws[167]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[167]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[167]["WIKI"]);
	 $this->assertEquals($ws[167]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[167]["ID"], 'firstName');
	 $this->assertEquals($ws[168]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[168]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[168]["WIKI"]);
	 $this->assertEquals($ws[168]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[168]["ID"], 'phone');
	 $this->assertEquals($ws[169]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[169]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[169]["WIKI"]);
	 $this->assertEquals($ws[169]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[169]["ID"], 'fax');
	 $this->assertEquals($ws[170]["NS"], 14);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertContains('', $ws[170]["WIKI"]);
	 $this->assertEquals($ws[170]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[170]["ID"], 'Person');
	 $this->assertEquals($ws[171]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[171]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Besprechung; Category:Person]]', $ws[171]["WIKI"]);
	 $this->assertEquals($ws[171]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[171]["ID"], 'participant');
	 $this->assertEquals($ws[172]["NS"], 14);
	 $this->assertContains('', $ws[172]["WIKI"]);
	 $this->assertContains('[[Category:Ereignis]]', $ws[172]["WIKI"]);
	 $this->assertEquals($ws[172]["PAGENAME"], 'Besprechung');
	 $this->assertEquals($ws[172]["ID"], 'Meeting');
	 $this->assertEquals($ws[173]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[173]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Konferenz; Category:Person]]', $ws[173]["WIKI"]);
	 $this->assertEquals($ws[173]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[173]["ID"], 'participant');
	 $this->assertEquals($ws[174]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[174]["WIKI"]);
	 $this->assertContains('', $ws[174]["WIKI"]);
	 $this->assertEquals($ws[174]["PAGENAME"], 'Konferenz');
	 $this->assertEquals($ws[174]["ID"], 'Conference');
	 $this->assertEquals($ws[175]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[175]["WIKI"]);
	 $this->assertEquals($ws[175]["PAGENAME"], 'Tagungsband');
	 $this->assertEquals($ws[175]["ID"], 'Proceedings');
	 $this->assertEquals($ws[176]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[176]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[176]["WIKI"]);
	 $this->assertEquals($ws[176]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[176]["ID"], 'cite');
	 $this->assertEquals($ws[177]["NS"], 14);
	 $this->assertContains('', $ws[177]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[177]["WIKI"]);
	 $this->assertEquals($ws[177]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[177]["ID"], 'Publication');
	 $this->assertEquals($ws[178]["NS"], 14);
	 $this->assertContains('[[Category:Fakultaetsmitglied]]', $ws[178]["WIKI"]);
	 $this->assertEquals($ws[178]["PAGENAME"], 'Ausserordentlicher_Professor');
	 $this->assertEquals($ws[178]["ID"], 'AssociateProfessor');
	 $this->assertEquals($ws[179]["NS"], 14);
	 $this->assertContains('[[Category:Wissenschaftlicher Mitarbeiter]]', $ws[179]["WIKI"]);
	 $this->assertEquals($ws[179]["PAGENAME"], 'Fakultaetsmitglied');
	 $this->assertEquals($ws[179]["ID"], 'FacultyMember');
	 $this->assertEquals($ws[180]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[180]["WIKI"]);
	 $this->assertEquals($ws[180]["PAGENAME"], 'Buch');
	 $this->assertEquals($ws[180]["ID"], 'Book');
	 $this->assertEquals($ws[181]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[181]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[181]["WIKI"]);
	 $this->assertEquals($ws[181]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[181]["ID"], 'cite');
	 $this->assertEquals($ws[182]["NS"], 14);
	 $this->assertContains('', $ws[182]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[182]["WIKI"]);
	 $this->assertEquals($ws[182]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[182]["ID"], 'Publication');
	 $this->assertEquals($ws[183]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[183]["WIKI"]);
	 $this->assertEquals($ws[183]["PAGENAME"], 'Broschuere');
	 $this->assertEquals($ws[183]["ID"], 'Booklet');
	 $this->assertEquals($ws[184]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[184]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[184]["WIKI"]);
	 $this->assertEquals($ws[184]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[184]["ID"], 'cite');
	 $this->assertEquals($ws[185]["NS"], 14);
	 $this->assertContains('', $ws[185]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[185]["WIKI"]);
	 $this->assertEquals($ws[185]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[185]["ID"], 'Publication');
	 $this->assertEquals($ws[186]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[186]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Vortrag; Category:Person]]', $ws[186]["WIKI"]);
	 $this->assertEquals($ws[186]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[186]["ID"], 'givenBy');
	 $this->assertEquals($ws[187]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[187]["WIKI"]);
	 $this->assertContains('', $ws[187]["WIKI"]);
	 $this->assertEquals($ws[187]["PAGENAME"], 'Vortrag');
	 $this->assertEquals($ws[187]["ID"], 'Lecture');
	 $this->assertEquals($ws[188]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[188]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[188]["WIKI"]);
	 $this->assertEquals($ws[188]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[188]["ID"], 'lastName');
	 $this->assertEquals($ws[189]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[189]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[189]["WIKI"]);
	 $this->assertEquals($ws[189]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[189]["ID"], 'email');
	 $this->assertEquals($ws[190]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[190]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[190]["WIKI"]);
	 $this->assertEquals($ws[190]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[190]["ID"], 'homepage');
	 $this->assertEquals($ws[191]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[191]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[191]["WIKI"]);
	 $this->assertEquals($ws[191]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[191]["ID"], 'address');
	 $this->assertEquals($ws[192]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[192]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[192]["WIKI"]);
	 $this->assertEquals($ws[192]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[192]["ID"], 'firstName');
	 $this->assertEquals($ws[193]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[193]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[193]["WIKI"]);
	 $this->assertEquals($ws[193]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[193]["ID"], 'phone');
	 $this->assertEquals($ws[194]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[194]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[194]["WIKI"]);
	 $this->assertEquals($ws[194]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[194]["ID"], 'fax');
	 $this->assertEquals($ws[195]["NS"], 14);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertContains('', $ws[195]["WIKI"]);
	 $this->assertEquals($ws[195]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[195]["ID"], 'Person');
	 $this->assertEquals($ws[196]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[196]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Besprechung; Category:Person]]', $ws[196]["WIKI"]);
	 $this->assertEquals($ws[196]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[196]["ID"], 'participant');
	 $this->assertEquals($ws[197]["NS"], 14);
	 $this->assertContains('', $ws[197]["WIKI"]);
	 $this->assertContains('[[Category:Ereignis]]', $ws[197]["WIKI"]);
	 $this->assertEquals($ws[197]["PAGENAME"], 'Besprechung');
	 $this->assertEquals($ws[197]["ID"], 'Meeting');
	 $this->assertEquals($ws[198]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[198]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Konferenz; Category:Person]]', $ws[198]["WIKI"]);
	 $this->assertEquals($ws[198]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[198]["ID"], 'participant');
	 $this->assertEquals($ws[199]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[199]["WIKI"]);
	 $this->assertContains('', $ws[199]["WIKI"]);
	 $this->assertEquals($ws[199]["PAGENAME"], 'Konferenz');
	 $this->assertEquals($ws[199]["ID"], 'Conference');
	 $this->assertEquals($ws[200]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[200]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Besprechung; Category:Person]]', $ws[200]["WIKI"]);
	 $this->assertEquals($ws[200]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[200]["ID"], 'participant');
	 $this->assertEquals($ws[201]["NS"], 14);
	 $this->assertContains('', $ws[201]["WIKI"]);
	 $this->assertContains('[[Category:Ereignis]]', $ws[201]["WIKI"]);
	 $this->assertEquals($ws[201]["PAGENAME"], 'Besprechung');
	 $this->assertEquals($ws[201]["ID"], 'Meeting');
	 $this->assertEquals($ws[202]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[202]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[202]["WIKI"]);
	 $this->assertEquals($ws[202]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[202]["ID"], 'lastName');
	 $this->assertEquals($ws[203]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[203]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[203]["WIKI"]);
	 $this->assertEquals($ws[203]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[203]["ID"], 'email');
	 $this->assertEquals($ws[204]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[204]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[204]["WIKI"]);
	 $this->assertEquals($ws[204]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[204]["ID"], 'homepage');
	 $this->assertEquals($ws[205]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[205]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[205]["WIKI"]);
	 $this->assertEquals($ws[205]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[205]["ID"], 'address');
	 $this->assertEquals($ws[206]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[206]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[206]["WIKI"]);
	 $this->assertEquals($ws[206]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[206]["ID"], 'firstName');
	 $this->assertEquals($ws[207]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[207]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[207]["WIKI"]);
	 $this->assertEquals($ws[207]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[207]["ID"], 'phone');
	 $this->assertEquals($ws[208]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[208]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[208]["WIKI"]);
	 $this->assertEquals($ws[208]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[208]["ID"], 'fax');
	 $this->assertEquals($ws[209]["NS"], 14);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertContains('', $ws[209]["WIKI"]);
	 $this->assertEquals($ws[209]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[209]["ID"], 'Person');
	 $this->assertEquals($ws[210]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[210]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Konferenz; Category:Person]]', $ws[210]["WIKI"]);
	 $this->assertEquals($ws[210]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[210]["ID"], 'participant');
	 $this->assertEquals($ws[211]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[211]["WIKI"]);
	 $this->assertContains('', $ws[211]["WIKI"]);
	 $this->assertEquals($ws[211]["PAGENAME"], 'Konferenz');
	 $this->assertEquals($ws[211]["ID"], 'Conference');
	 $this->assertEquals($ws[212]["NS"], 14);
	 $this->assertContains('[[Category:Abschlussarbeit]]', $ws[212]["WIKI"]);
	 $this->assertEquals($ws[212]["PAGENAME"], 'Doktorarbeit');
	 $this->assertEquals($ws[212]["ID"], 'PhDThesis');
	 $this->assertEquals($ws[213]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[213]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Abschlussarbeit; Category:Unversität]]', $ws[213]["WIKI"]);
	 $this->assertEquals($ws[213]["PAGENAME"], 'Schule');
	 $this->assertEquals($ws[213]["ID"], 'school');
	 $this->assertEquals($ws[214]["NS"], 14);
	 $this->assertContains('', $ws[214]["WIKI"]);
	 $this->assertContains('[[Category:Publikation]]', $ws[214]["WIKI"]);
	 $this->assertEquals($ws[214]["PAGENAME"], 'Abschlussarbeit');
	 $this->assertEquals($ws[214]["ID"], 'Thesis');
	 $this->assertEquals($ws[215]["NS"], 14);
	 $this->assertContains('[[Category:Abschlussarbeit]]', $ws[215]["WIKI"]);
	 $this->assertEquals($ws[215]["PAGENAME"], 'Diplomarbeit');
	 $this->assertEquals($ws[215]["ID"], 'DiplomaThesis');
	 $this->assertEquals($ws[216]["NS"], 14);
	 $this->assertContains('[[Category:Abschlussarbeit]]', $ws[216]["WIKI"]);
	 $this->assertEquals($ws[216]["PAGENAME"], 'Master_Thesis');
	 $this->assertEquals($ws[216]["ID"], 'MasterThesis');
	 $this->assertEquals($ws[217]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[217]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsthema; Category:Wissenschaftlicher Mitarbeiter]]', $ws[217]["WIKI"]);
	 $this->assertEquals($ws[217]["PAGENAME"], 'WirdBearbeitetVon');
	 $this->assertEquals($ws[217]["ID"], 'isWorkedOnBy');
	 $this->assertEquals($ws[218]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[218]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsthema; Category:Projekt]]', $ws[218]["WIKI"]);
	 $this->assertEquals($ws[218]["PAGENAME"], 'BehandeltIn');
	 $this->assertEquals($ws[218]["ID"], 'dealtWithIn');
	 $this->assertEquals($ws[219]["NS"], 14);
	 $this->assertContains('[[Category:Thema]]', $ws[219]["WIKI"]);
	 $this->assertContains('', $ws[219]["WIKI"]);
	 $this->assertContains('', $ws[219]["WIKI"]);
	 $this->assertEquals($ws[219]["PAGENAME"], 'Forschungsthema');
	 $this->assertEquals($ws[219]["ID"], 'ResearchTopic');
	 $this->assertEquals($ws[220]["NS"], 14);
	 $this->assertEquals($ws[220]["PAGENAME"], 'Thema');
	 $this->assertEquals($ws[220]["ID"], 'Topic');
	 $this->assertEquals($ws[221]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[221]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Person]]', $ws[221]["WIKI"]);
	 $this->assertEquals($ws[221]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[221]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[222]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[222]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Projekt]]', $ws[222]["WIKI"]);
	 $this->assertEquals($ws[222]["PAGENAME"], 'ArbeitetAnProjekt');
	 $this->assertEquals($ws[222]["ID"], 'worksAtProject');
	 $this->assertEquals($ws[223]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[223]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Doktorand]]', $ws[223]["WIKI"]);
	 $this->assertEquals($ws[223]["PAGENAME"], 'Betreut');
	 $this->assertEquals($ws[223]["ID"], 'supervises');
	 $this->assertEquals($ws[224]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[224]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Forschungsgruppe]]', $ws[224]["WIKI"]);
	 $this->assertEquals($ws[224]["PAGENAME"], 'LeiterVonGruppe');
	 $this->assertEquals($ws[224]["ID"], 'headOfGroup');
	 $this->assertEquals($ws[225]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[225]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Publikation]]', $ws[225]["WIKI"]);
	 $this->assertEquals($ws[225]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[225]["ID"], 'publication');
	 $this->assertEquals($ws[226]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[226]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Publikation]]', $ws[226]["WIKI"]);
	 $this->assertEquals($ws[226]["PAGENAME"], 'Editor');
	 $this->assertEquals($ws[226]["ID"], 'editor');
	 $this->assertEquals($ws[227]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[227]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Ereignis]]', $ws[227]["WIKI"]);
	 $this->assertEquals($ws[227]["PAGENAME"], 'MitgliedVonPC');
	 $this->assertEquals($ws[227]["ID"], 'memberOfPC');
	 $this->assertEquals($ws[228]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[228]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Ereignis]]', $ws[228]["WIKI"]);
	 $this->assertEquals($ws[228]["PAGENAME"], 'VeranstalterOderVorsitzenderVon');
	 $this->assertEquals($ws[228]["ID"], 'organizerOrChairOf');
	 $this->assertEquals($ws[229]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[229]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Projekt]]', $ws[229]["WIKI"]);
	 $this->assertEquals($ws[229]["PAGENAME"], 'LeiterVon');
	 $this->assertEquals($ws[229]["ID"], 'headOf');
	 $this->assertEquals($ws[230]["NS"], 14);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertContains('', $ws[230]["WIKI"]);
	 $this->assertEquals($ws[230]["PAGENAME"], 'Wissenschaftlicher_Mitarbeiter');
	 $this->assertEquals($ws[230]["ID"], 'AcademicStaff');
	 $this->assertEquals($ws[231]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[231]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[231]["WIKI"]);
	 $this->assertEquals($ws[231]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[231]["ID"], 'member');
	 $this->assertEquals($ws[232]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[232]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[232]["WIKI"]);
	 $this->assertEquals($ws[232]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[232]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[233]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[233]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[233]["WIKI"]);
	 $this->assertEquals($ws[233]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[233]["ID"], 'head');
	 $this->assertEquals($ws[234]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[234]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[234]["WIKI"]);
	 $this->assertEquals($ws[234]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[234]["ID"], 'projectInfo');
	 $this->assertEquals($ws[235]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[235]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[235]["WIKI"]);
	 $this->assertEquals($ws[235]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[235]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[236]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[236]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[236]["WIKI"]);
	 $this->assertEquals($ws[236]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[236]["ID"], 'isAbout');
	 $this->assertEquals($ws[237]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[237]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[237]["WIKI"]);
	 $this->assertEquals($ws[237]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[237]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[238]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[238]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[238]["WIKI"]);
	 $this->assertEquals($ws[238]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[238]["ID"], 'status');
	 $this->assertEquals($ws[239]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[239]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[239]["WIKI"]);
	 $this->assertEquals($ws[239]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[239]["ID"], 'startDate');
	 $this->assertEquals($ws[240]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[240]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[240]["WIKI"]);
	 $this->assertEquals($ws[240]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[240]["ID"], 'financedBy');
	 $this->assertEquals($ws[241]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[241]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[241]["WIKI"]);
	 $this->assertEquals($ws[241]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[241]["ID"], 'homepage');
	 $this->assertEquals($ws[242]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[242]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[242]["WIKI"]);
	 $this->assertEquals($ws[242]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[242]["ID"], 'endDate');
	 $this->assertEquals($ws[243]["NS"], 14);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertContains('', $ws[243]["WIKI"]);
	 $this->assertEquals($ws[243]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[243]["ID"], 'Project');
	 $this->assertEquals($ws[244]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[244]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Person]]', $ws[244]["WIKI"]);
	 $this->assertEquals($ws[244]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[244]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[245]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[245]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Projekt]]', $ws[245]["WIKI"]);
	 $this->assertEquals($ws[245]["PAGENAME"], 'ArbeitetAnProjekt');
	 $this->assertEquals($ws[245]["ID"], 'worksAtProject');
	 $this->assertEquals($ws[246]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[246]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Doktorand]]', $ws[246]["WIKI"]);
	 $this->assertEquals($ws[246]["PAGENAME"], 'Betreut');
	 $this->assertEquals($ws[246]["ID"], 'supervises');
	 $this->assertEquals($ws[247]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[247]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Forschungsgruppe]]', $ws[247]["WIKI"]);
	 $this->assertEquals($ws[247]["PAGENAME"], 'LeiterVonGruppe');
	 $this->assertEquals($ws[247]["ID"], 'headOfGroup');
	 $this->assertEquals($ws[248]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[248]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Publikation]]', $ws[248]["WIKI"]);
	 $this->assertEquals($ws[248]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[248]["ID"], 'publication');
	 $this->assertEquals($ws[249]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[249]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Publikation]]', $ws[249]["WIKI"]);
	 $this->assertEquals($ws[249]["PAGENAME"], 'Editor');
	 $this->assertEquals($ws[249]["ID"], 'editor');
	 $this->assertEquals($ws[250]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[250]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Ereignis]]', $ws[250]["WIKI"]);
	 $this->assertEquals($ws[250]["PAGENAME"], 'MitgliedVonPC');
	 $this->assertEquals($ws[250]["ID"], 'memberOfPC');
	 $this->assertEquals($ws[251]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[251]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Ereignis]]', $ws[251]["WIKI"]);
	 $this->assertEquals($ws[251]["PAGENAME"], 'VeranstalterOderVorsitzenderVon');
	 $this->assertEquals($ws[251]["ID"], 'organizerOrChairOf');
	 $this->assertEquals($ws[252]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[252]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Wissenschaftlicher Mitarbeiter; Category:Projekt]]', $ws[252]["WIKI"]);
	 $this->assertEquals($ws[252]["PAGENAME"], 'LeiterVon');
	 $this->assertEquals($ws[252]["ID"], 'headOf');
	 $this->assertEquals($ws[253]["NS"], 14);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertContains('', $ws[253]["WIKI"]);
	 $this->assertEquals($ws[253]["PAGENAME"], 'Wissenschaftlicher_Mitarbeiter');
	 $this->assertEquals($ws[253]["ID"], 'AcademicStaff');
	 $this->assertEquals($ws[254]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[254]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[254]["WIKI"]);
	 $this->assertEquals($ws[254]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[254]["ID"], 'lastName');
	 $this->assertEquals($ws[255]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[255]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[255]["WIKI"]);
	 $this->assertEquals($ws[255]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[255]["ID"], 'email');
	 $this->assertEquals($ws[256]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[256]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[256]["WIKI"]);
	 $this->assertEquals($ws[256]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[256]["ID"], 'homepage');
	 $this->assertEquals($ws[257]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[257]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[257]["WIKI"]);
	 $this->assertEquals($ws[257]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[257]["ID"], 'address');
	 $this->assertEquals($ws[258]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[258]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[258]["WIKI"]);
	 $this->assertEquals($ws[258]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[258]["ID"], 'firstName');
	 $this->assertEquals($ws[259]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[259]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[259]["WIKI"]);
	 $this->assertEquals($ws[259]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[259]["ID"], 'phone');
	 $this->assertEquals($ws[260]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[260]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[260]["WIKI"]);
	 $this->assertEquals($ws[260]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[260]["ID"], 'fax');
	 $this->assertEquals($ws[261]["NS"], 14);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertContains('', $ws[261]["WIKI"]);
	 $this->assertEquals($ws[261]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[261]["ID"], 'Person');
	 $this->assertEquals($ws[262]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[262]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[262]["WIKI"]);
	 $this->assertEquals($ws[262]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[262]["ID"], 'member');
	 $this->assertEquals($ws[263]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[263]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[263]["WIKI"]);
	 $this->assertEquals($ws[263]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[263]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[264]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[264]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[264]["WIKI"]);
	 $this->assertEquals($ws[264]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[264]["ID"], 'head');
	 $this->assertEquals($ws[265]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[265]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[265]["WIKI"]);
	 $this->assertEquals($ws[265]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[265]["ID"], 'projectInfo');
	 $this->assertEquals($ws[266]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[266]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[266]["WIKI"]);
	 $this->assertEquals($ws[266]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[266]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[267]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[267]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[267]["WIKI"]);
	 $this->assertEquals($ws[267]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[267]["ID"], 'isAbout');
	 $this->assertEquals($ws[268]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[268]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[268]["WIKI"]);
	 $this->assertEquals($ws[268]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[268]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[269]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[269]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[269]["WIKI"]);
	 $this->assertEquals($ws[269]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[269]["ID"], 'status');
	 $this->assertEquals($ws[270]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[270]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[270]["WIKI"]);
	 $this->assertEquals($ws[270]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[270]["ID"], 'startDate');
	 $this->assertEquals($ws[271]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[271]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[271]["WIKI"]);
	 $this->assertEquals($ws[271]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[271]["ID"], 'financedBy');
	 $this->assertEquals($ws[272]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[272]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[272]["WIKI"]);
	 $this->assertEquals($ws[272]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[272]["ID"], 'homepage');
	 $this->assertEquals($ws[273]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[273]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[273]["WIKI"]);
	 $this->assertEquals($ws[273]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[273]["ID"], 'endDate');
	 $this->assertEquals($ws[274]["NS"], 14);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertContains('', $ws[274]["WIKI"]);
	 $this->assertEquals($ws[274]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[274]["ID"], 'Project');
	 $this->assertEquals($ws[275]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[275]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Mitarbeiter; Category:Organisation]]', $ws[275]["WIKI"]);
	 $this->assertEquals($ws[275]["PAGENAME"], 'Zugehoerigkeit');
	 $this->assertEquals($ws[275]["ID"], 'affiliation');
	 $this->assertEquals($ws[276]["NS"], 14);
	 $this->assertContains('', $ws[276]["WIKI"]);
	 $this->assertContains('[[Category:Person]]', $ws[276]["WIKI"]);
	 $this->assertEquals($ws[276]["PAGENAME"], 'Mitarbeiter');
	 $this->assertEquals($ws[276]["ID"], 'Employee');
	 $this->assertEquals($ws[277]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[277]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Doktorand; Category:Projekt]]', $ws[277]["WIKI"]);
	 $this->assertEquals($ws[277]["PAGENAME"], 'ArbeitetAnProjekt');
	 $this->assertEquals($ws[277]["ID"], 'worksAtProject');
	 $this->assertEquals($ws[278]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[278]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Doktorand; Category:Wissenschaftlicher Mitarbeiter]]', $ws[278]["WIKI"]);
	 $this->assertEquals($ws[278]["PAGENAME"], 'HatBetreuer');
	 $this->assertEquals($ws[278]["ID"], 'supervisor');
	 $this->assertEquals($ws[279]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[279]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Doktorand; Category:Publikation]]', $ws[279]["WIKI"]);
	 $this->assertEquals($ws[279]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[279]["ID"], 'publication');
	 $this->assertEquals($ws[280]["NS"], 14);
	 $this->assertContains('', $ws[280]["WIKI"]);
	 $this->assertContains('[[Category:Absolvent]]', $ws[280]["WIKI"]);
	 $this->assertContains('', $ws[280]["WIKI"]);
	 $this->assertContains('', $ws[280]["WIKI"]);
	 $this->assertEquals($ws[280]["PAGENAME"], 'Doktorand');
	 $this->assertEquals($ws[280]["ID"], 'PhDStudent');
	 $this->assertEquals($ws[281]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[281]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[281]["WIKI"]);
	 $this->assertEquals($ws[281]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[281]["ID"], 'head');
	 $this->assertEquals($ws[282]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[282]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[282]["WIKI"]);
	 $this->assertEquals($ws[282]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[282]["ID"], 'member');
	 $this->assertEquals($ws[283]["NS"], 14);
	 $this->assertContains('', $ws[283]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[283]["WIKI"]);
	 $this->assertContains('', $ws[283]["WIKI"]);
	 $this->assertEquals($ws[283]["PAGENAME"], 'Forschungsgruppe');
	 $this->assertEquals($ws[283]["ID"], 'ResearchGroup');
	 $this->assertEquals($ws[284]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[284]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[284]["WIKI"]);
	 $this->assertEquals($ws[284]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[284]["ID"], 'cite');
	 $this->assertEquals($ws[285]["NS"], 14);
	 $this->assertContains('', $ws[285]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[285]["WIKI"]);
	 $this->assertEquals($ws[285]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[285]["ID"], 'Publication');
	 $this->assertEquals($ws[286]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[286]["WIKI"]);
	 $this->assertEquals($ws[286]["PAGENAME"], 'Manager');
	 $this->assertEquals($ws[286]["ID"], 'Manager');
	 $this->assertEquals($ws[287]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[287]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[287]["WIKI"]);
	 $this->assertEquals($ws[287]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[287]["ID"], 'cite');
	 $this->assertEquals($ws[288]["NS"], 14);
	 $this->assertContains('', $ws[288]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[288]["WIKI"]);
	 $this->assertEquals($ws[288]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[288]["ID"], 'Publication');
	 $this->assertEquals($ws[289]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[289]["WIKI"]);
	 $this->assertEquals($ws[289]["PAGENAME"], 'Technischer_Angestellter');
	 $this->assertEquals($ws[289]["ID"], 'TechnicalStaff');
	 $this->assertEquals($ws[290]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[290]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[290]["WIKI"]);
	 $this->assertEquals($ws[290]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[290]["ID"], 'member');
	 $this->assertEquals($ws[291]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[291]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[291]["WIKI"]);
	 $this->assertEquals($ws[291]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[291]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[292]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[292]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[292]["WIKI"]);
	 $this->assertEquals($ws[292]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[292]["ID"], 'head');
	 $this->assertEquals($ws[293]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[293]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[293]["WIKI"]);
	 $this->assertEquals($ws[293]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[293]["ID"], 'projectInfo');
	 $this->assertEquals($ws[294]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[294]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[294]["WIKI"]);
	 $this->assertEquals($ws[294]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[294]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[295]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[295]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[295]["WIKI"]);
	 $this->assertEquals($ws[295]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[295]["ID"], 'isAbout');
	 $this->assertEquals($ws[296]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[296]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[296]["WIKI"]);
	 $this->assertEquals($ws[296]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[296]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[297]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[297]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[297]["WIKI"]);
	 $this->assertEquals($ws[297]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[297]["ID"], 'status');
	 $this->assertEquals($ws[298]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[298]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[298]["WIKI"]);
	 $this->assertEquals($ws[298]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[298]["ID"], 'startDate');
	 $this->assertEquals($ws[299]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[299]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[299]["WIKI"]);
	 $this->assertEquals($ws[299]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[299]["ID"], 'financedBy');
	 $this->assertEquals($ws[300]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[300]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[300]["WIKI"]);
	 $this->assertEquals($ws[300]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[300]["ID"], 'homepage');
	 $this->assertEquals($ws[301]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[301]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[301]["WIKI"]);
	 $this->assertEquals($ws[301]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[301]["ID"], 'endDate');
	 $this->assertEquals($ws[302]["NS"], 14);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertContains('', $ws[302]["WIKI"]);
	 $this->assertEquals($ws[302]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[302]["ID"], 'Project');
	 $this->assertEquals($ws[303]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[303]["WIKI"]);
	 $this->assertEquals($ws[303]["PAGENAME"], 'Verwaltungsangestellter');
	 $this->assertEquals($ws[303]["ID"], 'AdministrativeStaff');
	 $this->assertEquals($ws[304]["NS"], 14);
	 $this->assertContains('[[Category:Produkt]]', $ws[304]["WIKI"]);
	 $this->assertEquals($ws[304]["PAGENAME"], 'Softwarekomponente');
	 $this->assertEquals($ws[304]["ID"], 'SoftwareComponent');
	 $this->assertEquals($ws[305]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[305]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[305]["WIKI"]);
	 $this->assertEquals($ws[305]["PAGENAME"], 'Preis');
	 $this->assertEquals($ws[305]["ID"], 'price');
	 $this->assertEquals($ws[306]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[306]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:BNode56]]', $ws[306]["WIKI"]);
	 $this->assertEquals($ws[306]["PAGENAME"], 'Verkaeufer');
	 $this->assertEquals($ws[306]["ID"], 'vendor');
	 $this->assertEquals($ws[307]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[307]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:Organisation]]', $ws[307]["WIKI"]);
	 $this->assertEquals($ws[307]["PAGENAME"], 'EntwickeltVon');
	 $this->assertEquals($ws[307]["ID"], 'developedBy');
	 $this->assertEquals($ws[308]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[308]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[308]["WIKI"]);
	 $this->assertEquals($ws[308]["PAGENAME"], 'Herstellungsdatum');
	 $this->assertEquals($ws[308]["ID"], 'creationDate');
	 $this->assertEquals($ws[309]["NS"], 14);
	 $this->assertContains('', $ws[309]["WIKI"]);
	 $this->assertContains('', $ws[309]["WIKI"]);
	 $this->assertContains('', $ws[309]["WIKI"]);
	 $this->assertContains('', $ws[309]["WIKI"]);
	 $this->assertContains('', $ws[309]["WIKI"]);
	 $this->assertEquals($ws[309]["PAGENAME"], 'Produkt');
	 $this->assertEquals($ws[309]["ID"], 'Product');
	 $this->assertEquals($ws[310]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[310]["WIKI"]);
	 $this->assertEquals($ws[310]["PAGENAME"], 'Nicht_begutachteter_Artikel');
	 $this->assertEquals($ws[310]["ID"], 'UnrefereedArticle');
	 $this->assertEquals($ws[311]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[311]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[311]["WIKI"]);
	 $this->assertEquals($ws[311]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[311]["ID"], 'cite');
	 $this->assertEquals($ws[312]["NS"], 14);
	 $this->assertContains('', $ws[312]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[312]["WIKI"]);
	 $this->assertEquals($ws[312]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[312]["ID"], 'Publication');
	 $this->assertEquals($ws[313]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[313]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Mitarbeiter; Category:Organisation]]', $ws[313]["WIKI"]);
	 $this->assertEquals($ws[313]["PAGENAME"], 'Zugehoerigkeit');
	 $this->assertEquals($ws[313]["ID"], 'affiliation');
	 $this->assertEquals($ws[314]["NS"], 14);
	 $this->assertContains('', $ws[314]["WIKI"]);
	 $this->assertContains('[[Category:Person]]', $ws[314]["WIKI"]);
	 $this->assertEquals($ws[314]["PAGENAME"], 'Mitarbeiter');
	 $this->assertEquals($ws[314]["ID"], 'Employee');
	 $this->assertEquals($ws[315]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[315]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[315]["WIKI"]);
	 $this->assertEquals($ws[315]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[315]["ID"], 'employs');
	 $this->assertEquals($ws[316]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[316]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[316]["WIKI"]);
	 $this->assertEquals($ws[316]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[316]["ID"], 'technicalReport');
	 $this->assertEquals($ws[317]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[317]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[317]["WIKI"]);
	 $this->assertEquals($ws[317]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[317]["ID"], 'finances');
	 $this->assertEquals($ws[318]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[318]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[318]["WIKI"]);
	 $this->assertEquals($ws[318]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[318]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[319]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[319]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[319]["WIKI"]);
	 $this->assertEquals($ws[319]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[319]["ID"], 'publisherOf');
	 $this->assertEquals($ws[320]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[320]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[320]["WIKI"]);
	 $this->assertEquals($ws[320]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[320]["ID"], 'develops');
	 $this->assertEquals($ws[321]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[321]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[321]["WIKI"]);
	 $this->assertEquals($ws[321]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[321]["ID"], 'carriesOut');
	 $this->assertEquals($ws[322]["NS"], 14);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertContains('', $ws[322]["WIKI"]);
	 $this->assertEquals($ws[322]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[322]["ID"], 'Organization');
	 $this->assertEquals($ws[323]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[323]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[323]["WIKI"]);
	 $this->assertEquals($ws[323]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[323]["ID"], 'lastName');
	 $this->assertEquals($ws[324]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[324]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[324]["WIKI"]);
	 $this->assertEquals($ws[324]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[324]["ID"], 'email');
	 $this->assertEquals($ws[325]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[325]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[325]["WIKI"]);
	 $this->assertEquals($ws[325]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[325]["ID"], 'homepage');
	 $this->assertEquals($ws[326]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[326]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[326]["WIKI"]);
	 $this->assertEquals($ws[326]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[326]["ID"], 'address');
	 $this->assertEquals($ws[327]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[327]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[327]["WIKI"]);
	 $this->assertEquals($ws[327]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[327]["ID"], 'firstName');
	 $this->assertEquals($ws[328]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[328]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[328]["WIKI"]);
	 $this->assertEquals($ws[328]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[328]["ID"], 'phone');
	 $this->assertEquals($ws[329]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[329]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[329]["WIKI"]);
	 $this->assertEquals($ws[329]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[329]["ID"], 'fax');
	 $this->assertEquals($ws[330]["NS"], 14);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertContains('', $ws[330]["WIKI"]);
	 $this->assertEquals($ws[330]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[330]["ID"], 'Person');
	 $this->assertEquals($ws[331]["NS"], 14);
	 $this->assertContains('[[Category:Fakultaetsmitglied]]', $ws[331]["WIKI"]);
	 $this->assertEquals($ws[331]["PAGENAME"], 'Gastdozent');
	 $this->assertEquals($ws[331]["ID"], 'VisitingProfessor');
	 $this->assertEquals($ws[332]["NS"], 14);
	 $this->assertContains('[[Category:Wissenschaftlicher Mitarbeiter]]', $ws[332]["WIKI"]);
	 $this->assertEquals($ws[332]["PAGENAME"], 'Fakultaetsmitglied');
	 $this->assertEquals($ws[332]["ID"], 'FacultyMember');
	 $this->assertEquals($ws[333]["NS"], 14);
	 $this->assertEquals($ws[333]["PAGENAME"], 'Thema');
	 $this->assertEquals($ws[333]["ID"], 'Topic');
	 $this->assertEquals($ws[334]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[334]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[334]["WIKI"]);
	 $this->assertEquals($ws[334]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[334]["ID"], 'head');
	 $this->assertEquals($ws[335]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[335]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Mitarbeiter]]', $ws[335]["WIKI"]);
	 $this->assertEquals($ws[335]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[335]["ID"], 'member');
	 $this->assertEquals($ws[336]["NS"], 14);
	 $this->assertContains('', $ws[336]["WIKI"]);
	 $this->assertContains('[[Category:Organisation]]', $ws[336]["WIKI"]);
	 $this->assertContains('', $ws[336]["WIKI"]);
	 $this->assertEquals($ws[336]["PAGENAME"], 'Forschungsgruppe');
	 $this->assertEquals($ws[336]["ID"], 'ResearchGroup');
	 $this->assertEquals($ws[337]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[337]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[337]["WIKI"]);
	 $this->assertEquals($ws[337]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[337]["ID"], 'employs');
	 $this->assertEquals($ws[338]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[338]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[338]["WIKI"]);
	 $this->assertEquals($ws[338]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[338]["ID"], 'technicalReport');
	 $this->assertEquals($ws[339]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[339]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[339]["WIKI"]);
	 $this->assertEquals($ws[339]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[339]["ID"], 'finances');
	 $this->assertEquals($ws[340]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[340]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[340]["WIKI"]);
	 $this->assertEquals($ws[340]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[340]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[341]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[341]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[341]["WIKI"]);
	 $this->assertEquals($ws[341]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[341]["ID"], 'publisherOf');
	 $this->assertEquals($ws[342]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[342]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[342]["WIKI"]);
	 $this->assertEquals($ws[342]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[342]["ID"], 'develops');
	 $this->assertEquals($ws[343]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[343]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[343]["WIKI"]);
	 $this->assertEquals($ws[343]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[343]["ID"], 'carriesOut');
	 $this->assertEquals($ws[344]["NS"], 14);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertContains('', $ws[344]["WIKI"]);
	 $this->assertEquals($ws[344]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[344]["ID"], 'Organization');
	 $this->assertEquals($ws[345]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[345]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Fachbereich; Category:Institut]]', $ws[345]["WIKI"]);
	 $this->assertEquals($ws[345]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[345]["ID"], 'hasParts');
	 $this->assertEquals($ws[346]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[346]["WIKI"]);
	 $this->assertContains('', $ws[346]["WIKI"]);
	 $this->assertEquals($ws[346]["PAGENAME"], 'Fachbereich');
	 $this->assertEquals($ws[346]["ID"], 'Department');
	 $this->assertEquals($ws[347]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[347]["WIKI"]);
	 $this->assertEquals($ws[347]["PAGENAME"], 'Verband');
	 $this->assertEquals($ws[347]["ID"], 'Association');
	 $this->assertEquals($ws[348]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[348]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode27]]', $ws[348]["WIKI"]);
	 $this->assertEquals($ws[348]["PAGENAME"], 'Herausgeber');
	 $this->assertEquals($ws[348]["ID"], 'publisher');
	 $this->assertEquals($ws[349]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[349]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[349]["WIKI"]);
	 $this->assertEquals($ws[349]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[349]["ID"], 'title');
	 $this->assertEquals($ws[350]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[350]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[350]["WIKI"]);
	 $this->assertEquals($ws[350]["PAGENAME"], 'Beziehung');
	 $this->assertEquals($ws[350]["ID"], 'relation');
	 $this->assertEquals($ws[351]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[351]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[351]["WIKI"]);
	 $this->assertEquals($ws[351]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[351]["ID"], 'date');
	 $this->assertEquals($ws[352]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[352]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[352]["WIKI"]);
	 $this->assertEquals($ws[352]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[352]["ID"], 'source');
	 $this->assertEquals($ws[353]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[353]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[353]["WIKI"]);
	 $this->assertEquals($ws[353]["PAGENAME"], 'Format');
	 $this->assertEquals($ws[353]["ID"], 'format');
	 $this->assertEquals($ws[354]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[354]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Organisation]]', $ws[354]["WIKI"]);
	 $this->assertEquals($ws[354]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[354]["ID"], 'organization');
	 $this->assertEquals($ws[355]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[355]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[355]["WIKI"]);
	 $this->assertEquals($ws[355]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[355]["ID"], 'subject');
	 $this->assertEquals($ws[356]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[356]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[356]["WIKI"]);
	 $this->assertEquals($ws[356]["PAGENAME"], 'InhaltlicheBeschreibung');
	 $this->assertEquals($ws[356]["ID"], 'description');
	 $this->assertEquals($ws[357]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[357]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[357]["WIKI"]);
	 $this->assertEquals($ws[357]["PAGENAME"], 'RechtlicheBedingungen');
	 $this->assertEquals($ws[357]["ID"], 'rights');
	 $this->assertEquals($ws[358]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[358]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode40]]', $ws[358]["WIKI"]);
	 $this->assertEquals($ws[358]["PAGENAME"], 'Beteiligter');
	 $this->assertEquals($ws[358]["ID"], 'contributor');
	 $this->assertEquals($ws[359]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[359]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[359]["WIKI"]);
	 $this->assertEquals($ws[359]["PAGENAME"], 'Sprache');
	 $this->assertEquals($ws[359]["ID"], 'language');
	 $this->assertEquals($ws[360]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[360]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[360]["WIKI"]);
	 $this->assertEquals($ws[360]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[360]["ID"], 'identifier');
	 $this->assertEquals($ws[361]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[361]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[361]["WIKI"]);
	 $this->assertEquals($ws[361]["PAGENAME"], 'Abdeckungsspektrum');
	 $this->assertEquals($ws[361]["ID"], 'coverage');
	 $this->assertEquals($ws[362]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[362]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode47]]', $ws[362]["WIKI"]);
	 $this->assertEquals($ws[362]["PAGENAME"], 'Urheber');
	 $this->assertEquals($ws[362]["ID"], 'creator');
	 $this->assertEquals($ws[363]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[363]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[363]["WIKI"]);
	 $this->assertEquals($ws[363]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[363]["ID"], 'type');
	 $this->assertEquals($ws[364]["NS"], 14);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertContains('', $ws[364]["WIKI"]);
	 $this->assertEquals($ws[364]["PAGENAME"], 'Dokument');
	 $this->assertEquals($ws[364]["ID"], 'Document');
	 $this->assertEquals($ws[365]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[365]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[365]["WIKI"]);
	 $this->assertEquals($ws[365]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[365]["ID"], 'lastName');
	 $this->assertEquals($ws[366]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[366]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[366]["WIKI"]);
	 $this->assertEquals($ws[366]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[366]["ID"], 'email');
	 $this->assertEquals($ws[367]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[367]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[367]["WIKI"]);
	 $this->assertEquals($ws[367]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[367]["ID"], 'homepage');
	 $this->assertEquals($ws[368]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[368]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[368]["WIKI"]);
	 $this->assertEquals($ws[368]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[368]["ID"], 'address');
	 $this->assertEquals($ws[369]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[369]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[369]["WIKI"]);
	 $this->assertEquals($ws[369]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[369]["ID"], 'firstName');
	 $this->assertEquals($ws[370]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[370]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[370]["WIKI"]);
	 $this->assertEquals($ws[370]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[370]["ID"], 'phone');
	 $this->assertEquals($ws[371]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[371]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[371]["WIKI"]);
	 $this->assertEquals($ws[371]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[371]["ID"], 'fax');
	 $this->assertEquals($ws[372]["NS"], 14);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertContains('', $ws[372]["WIKI"]);
	 $this->assertEquals($ws[372]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[372]["ID"], 'Person');
	 $this->assertEquals($ws[373]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[373]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[373]["WIKI"]);
	 $this->assertEquals($ws[373]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[373]["ID"], 'employs');
	 $this->assertEquals($ws[374]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[374]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[374]["WIKI"]);
	 $this->assertEquals($ws[374]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[374]["ID"], 'technicalReport');
	 $this->assertEquals($ws[375]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[375]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[375]["WIKI"]);
	 $this->assertEquals($ws[375]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[375]["ID"], 'finances');
	 $this->assertEquals($ws[376]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[376]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[376]["WIKI"]);
	 $this->assertEquals($ws[376]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[376]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[377]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[377]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[377]["WIKI"]);
	 $this->assertEquals($ws[377]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[377]["ID"], 'publisherOf');
	 $this->assertEquals($ws[378]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[378]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[378]["WIKI"]);
	 $this->assertEquals($ws[378]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[378]["ID"], 'develops');
	 $this->assertEquals($ws[379]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[379]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[379]["WIKI"]);
	 $this->assertEquals($ws[379]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[379]["ID"], 'carriesOut');
	 $this->assertEquals($ws[380]["NS"], 14);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertContains('', $ws[380]["WIKI"]);
	 $this->assertEquals($ws[380]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[380]["ID"], 'Organization');
	 $this->assertEquals($ws[381]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[381]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[381]["WIKI"]);
	 $this->assertEquals($ws[381]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[381]["ID"], 'employs');
	 $this->assertEquals($ws[382]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[382]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[382]["WIKI"]);
	 $this->assertEquals($ws[382]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[382]["ID"], 'technicalReport');
	 $this->assertEquals($ws[383]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[383]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[383]["WIKI"]);
	 $this->assertEquals($ws[383]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[383]["ID"], 'finances');
	 $this->assertEquals($ws[384]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[384]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[384]["WIKI"]);
	 $this->assertEquals($ws[384]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[384]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[385]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[385]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[385]["WIKI"]);
	 $this->assertEquals($ws[385]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[385]["ID"], 'publisherOf');
	 $this->assertEquals($ws[386]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[386]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[386]["WIKI"]);
	 $this->assertEquals($ws[386]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[386]["ID"], 'develops');
	 $this->assertEquals($ws[387]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[387]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[387]["WIKI"]);
	 $this->assertEquals($ws[387]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[387]["ID"], 'carriesOut');
	 $this->assertEquals($ws[388]["NS"], 14);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertContains('', $ws[388]["WIKI"]);
	 $this->assertEquals($ws[388]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[388]["ID"], 'Organization');
	 $this->assertEquals($ws[389]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[389]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[389]["WIKI"]);
	 $this->assertEquals($ws[389]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[389]["ID"], 'lastName');
	 $this->assertEquals($ws[390]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[390]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[390]["WIKI"]);
	 $this->assertEquals($ws[390]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[390]["ID"], 'email');
	 $this->assertEquals($ws[391]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[391]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[391]["WIKI"]);
	 $this->assertEquals($ws[391]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[391]["ID"], 'homepage');
	 $this->assertEquals($ws[392]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[392]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[392]["WIKI"]);
	 $this->assertEquals($ws[392]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[392]["ID"], 'address');
	 $this->assertEquals($ws[393]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[393]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[393]["WIKI"]);
	 $this->assertEquals($ws[393]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[393]["ID"], 'firstName');
	 $this->assertEquals($ws[394]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[394]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[394]["WIKI"]);
	 $this->assertEquals($ws[394]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[394]["ID"], 'phone');
	 $this->assertEquals($ws[395]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[395]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[395]["WIKI"]);
	 $this->assertEquals($ws[395]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[395]["ID"], 'fax');
	 $this->assertEquals($ws[396]["NS"], 14);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertContains('', $ws[396]["WIKI"]);
	 $this->assertEquals($ws[396]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[396]["ID"], 'Person');
	 $this->assertEquals($ws[397]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[397]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[397]["WIKI"]);
	 $this->assertEquals($ws[397]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[397]["ID"], 'employs');
	 $this->assertEquals($ws[398]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[398]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[398]["WIKI"]);
	 $this->assertEquals($ws[398]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[398]["ID"], 'technicalReport');
	 $this->assertEquals($ws[399]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[399]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[399]["WIKI"]);
	 $this->assertEquals($ws[399]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[399]["ID"], 'finances');
	 $this->assertEquals($ws[400]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[400]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[400]["WIKI"]);
	 $this->assertEquals($ws[400]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[400]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[401]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[401]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[401]["WIKI"]);
	 $this->assertEquals($ws[401]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[401]["ID"], 'publisherOf');
	 $this->assertEquals($ws[402]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[402]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[402]["WIKI"]);
	 $this->assertEquals($ws[402]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[402]["ID"], 'develops');
	 $this->assertEquals($ws[403]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[403]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[403]["WIKI"]);
	 $this->assertEquals($ws[403]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[403]["ID"], 'carriesOut');
	 $this->assertEquals($ws[404]["NS"], 14);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertContains('', $ws[404]["WIKI"]);
	 $this->assertEquals($ws[404]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[404]["ID"], 'Organization');
	 $this->assertEquals($ws[405]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[405]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[405]["WIKI"]);
	 $this->assertEquals($ws[405]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[405]["ID"], 'lastName');
	 $this->assertEquals($ws[406]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[406]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[406]["WIKI"]);
	 $this->assertEquals($ws[406]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[406]["ID"], 'email');
	 $this->assertEquals($ws[407]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[407]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[407]["WIKI"]);
	 $this->assertEquals($ws[407]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[407]["ID"], 'homepage');
	 $this->assertEquals($ws[408]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[408]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[408]["WIKI"]);
	 $this->assertEquals($ws[408]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[408]["ID"], 'address');
	 $this->assertEquals($ws[409]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[409]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[409]["WIKI"]);
	 $this->assertEquals($ws[409]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[409]["ID"], 'firstName');
	 $this->assertEquals($ws[410]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[410]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[410]["WIKI"]);
	 $this->assertEquals($ws[410]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[410]["ID"], 'phone');
	 $this->assertEquals($ws[411]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[411]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[411]["WIKI"]);
	 $this->assertEquals($ws[411]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[411]["ID"], 'fax');
	 $this->assertEquals($ws[412]["NS"], 14);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertContains('', $ws[412]["WIKI"]);
	 $this->assertEquals($ws[412]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[412]["ID"], 'Person');
	 $this->assertEquals($ws[413]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[413]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[413]["WIKI"]);
	 $this->assertEquals($ws[413]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[413]["ID"], 'employs');
	 $this->assertEquals($ws[414]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[414]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[414]["WIKI"]);
	 $this->assertEquals($ws[414]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[414]["ID"], 'technicalReport');
	 $this->assertEquals($ws[415]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[415]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[415]["WIKI"]);
	 $this->assertEquals($ws[415]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[415]["ID"], 'finances');
	 $this->assertEquals($ws[416]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[416]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[416]["WIKI"]);
	 $this->assertEquals($ws[416]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[416]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[417]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[417]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[417]["WIKI"]);
	 $this->assertEquals($ws[417]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[417]["ID"], 'publisherOf');
	 $this->assertEquals($ws[418]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[418]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[418]["WIKI"]);
	 $this->assertEquals($ws[418]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[418]["ID"], 'develops');
	 $this->assertEquals($ws[419]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[419]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[419]["WIKI"]);
	 $this->assertEquals($ws[419]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[419]["ID"], 'carriesOut');
	 $this->assertEquals($ws[420]["NS"], 14);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertContains('', $ws[420]["WIKI"]);
	 $this->assertEquals($ws[420]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[420]["ID"], 'Organization');
	 $this->assertEquals($ws[421]["NS"], 14);
	 $this->assertContains('[[Category:Fakultaetsmitglied]]', $ws[421]["WIKI"]);
	 $this->assertEquals($ws[421]["PAGENAME"], 'Emeritierter_Professor');
	 $this->assertEquals($ws[421]["ID"], 'ProfessorEmeritus');
	 $this->assertEquals($ws[422]["NS"], 14);
	 $this->assertContains('[[Category:Wissenschaftlicher Mitarbeiter]]', $ws[422]["WIKI"]);
	 $this->assertEquals($ws[422]["PAGENAME"], 'Fakultaetsmitglied');
	 $this->assertEquals($ws[422]["ID"], 'FacultyMember');
	 $this->assertEquals($ws[423]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[423]["WIKI"]);
	 $this->assertEquals($ws[423]["PAGENAME"], 'Sonstiges');
	 $this->assertEquals($ws[423]["ID"], 'Misc');
	 $this->assertEquals($ws[424]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[424]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[424]["WIKI"]);
	 $this->assertEquals($ws[424]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[424]["ID"], 'cite');
	 $this->assertEquals($ws[425]["NS"], 14);
	 $this->assertContains('', $ws[425]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[425]["WIKI"]);
	 $this->assertEquals($ws[425]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[425]["ID"], 'Publication');
	 $this->assertEquals($ws[426]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[426]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Doktorand; Category:Projekt]]', $ws[426]["WIKI"]);
	 $this->assertEquals($ws[426]["PAGENAME"], 'ArbeitetAnProjekt');
	 $this->assertEquals($ws[426]["ID"], 'worksAtProject');
	 $this->assertEquals($ws[427]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[427]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Doktorand; Category:Wissenschaftlicher Mitarbeiter]]', $ws[427]["WIKI"]);
	 $this->assertEquals($ws[427]["PAGENAME"], 'HatBetreuer');
	 $this->assertEquals($ws[427]["ID"], 'supervisor');
	 $this->assertEquals($ws[428]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[428]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Doktorand; Category:Publikation]]', $ws[428]["WIKI"]);
	 $this->assertEquals($ws[428]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[428]["ID"], 'publication');
	 $this->assertEquals($ws[429]["NS"], 14);
	 $this->assertContains('', $ws[429]["WIKI"]);
	 $this->assertContains('[[Category:Absolvent]]', $ws[429]["WIKI"]);
	 $this->assertContains('', $ws[429]["WIKI"]);
	 $this->assertContains('', $ws[429]["WIKI"]);
	 $this->assertEquals($ws[429]["PAGENAME"], 'Doktorand');
	 $this->assertEquals($ws[429]["ID"], 'PhDStudent');
	 $this->assertEquals($ws[430]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[430]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[430]["WIKI"]);
	 $this->assertEquals($ws[430]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[430]["ID"], 'member');
	 $this->assertEquals($ws[431]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[431]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[431]["WIKI"]);
	 $this->assertEquals($ws[431]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[431]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[432]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[432]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[432]["WIKI"]);
	 $this->assertEquals($ws[432]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[432]["ID"], 'head');
	 $this->assertEquals($ws[433]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[433]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[433]["WIKI"]);
	 $this->assertEquals($ws[433]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[433]["ID"], 'projectInfo');
	 $this->assertEquals($ws[434]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[434]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[434]["WIKI"]);
	 $this->assertEquals($ws[434]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[434]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[435]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[435]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[435]["WIKI"]);
	 $this->assertEquals($ws[435]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[435]["ID"], 'isAbout');
	 $this->assertEquals($ws[436]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[436]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[436]["WIKI"]);
	 $this->assertEquals($ws[436]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[436]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[437]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[437]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[437]["WIKI"]);
	 $this->assertEquals($ws[437]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[437]["ID"], 'status');
	 $this->assertEquals($ws[438]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[438]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[438]["WIKI"]);
	 $this->assertEquals($ws[438]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[438]["ID"], 'startDate');
	 $this->assertEquals($ws[439]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[439]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[439]["WIKI"]);
	 $this->assertEquals($ws[439]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[439]["ID"], 'financedBy');
	 $this->assertEquals($ws[440]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[440]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[440]["WIKI"]);
	 $this->assertEquals($ws[440]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[440]["ID"], 'homepage');
	 $this->assertEquals($ws[441]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[441]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[441]["WIKI"]);
	 $this->assertEquals($ws[441]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[441]["ID"], 'endDate');
	 $this->assertEquals($ws[442]["NS"], 14);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertContains('', $ws[442]["WIKI"]);
	 $this->assertEquals($ws[442]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[442]["ID"], 'Project');
	 $this->assertEquals($ws[443]["NS"], 14);
	 $this->assertContains('[[Category:Student]]', $ws[443]["WIKI"]);
	 $this->assertEquals($ws[443]["PAGENAME"], 'Absolvent');
	 $this->assertEquals($ws[443]["ID"], 'Graduate');
	 $this->assertEquals($ws[444]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[444]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[444]["WIKI"]);
	 $this->assertEquals($ws[444]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[444]["ID"], 'cite');
	 $this->assertEquals($ws[445]["NS"], 14);
	 $this->assertContains('', $ws[445]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[445]["WIKI"]);
	 $this->assertEquals($ws[445]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[445]["ID"], 'Publication');
	 $this->assertEquals($ws[446]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[446]["WIKI"]);
	 $this->assertEquals($ws[446]["PAGENAME"], 'Bericht');
	 $this->assertEquals($ws[446]["ID"], 'Report');
	 $this->assertEquals($ws[447]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[447]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[447]["WIKI"]);
	 $this->assertEquals($ws[447]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[447]["ID"], 'cite');
	 $this->assertEquals($ws[448]["NS"], 14);
	 $this->assertContains('', $ws[448]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[448]["WIKI"]);
	 $this->assertEquals($ws[448]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[448]["ID"], 'Publication');
	 $this->assertEquals($ws[449]["NS"], 14);
	 $this->assertContains('[[Category:Bericht]]', $ws[449]["WIKI"]);
	 $this->assertEquals($ws[449]["PAGENAME"], 'Technischer_Bericht');
	 $this->assertEquals($ws[449]["ID"], 'TechnicalReport');
	 $this->assertEquals($ws[450]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[450]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt Bericht; Category:Projekt]]', $ws[450]["WIKI"]);
	 $this->assertEquals($ws[450]["PAGENAME"], 'BeschreibtProjekt');
	 $this->assertEquals($ws[450]["ID"], 'describesProject');
	 $this->assertEquals($ws[451]["NS"], 14);
	 $this->assertContains('[[Category:Bericht]]', $ws[451]["WIKI"]);
	 $this->assertContains('', $ws[451]["WIKI"]);
	 $this->assertEquals($ws[451]["PAGENAME"], 'Projekt_Bericht');
	 $this->assertEquals($ws[451]["ID"], 'ProjectReport');
	 $this->assertEquals($ws[452]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[452]["WIKI"]);
	 $this->assertEquals($ws[452]["PAGENAME"], 'Artikel');
	 $this->assertEquals($ws[452]["ID"], 'Article');
	 $this->assertEquals($ws[453]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[453]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[453]["WIKI"]);
	 $this->assertEquals($ws[453]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[453]["ID"], 'cite');
	 $this->assertEquals($ws[454]["NS"], 14);
	 $this->assertContains('', $ws[454]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[454]["WIKI"]);
	 $this->assertEquals($ws[454]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[454]["ID"], 'Publication');
	 $this->assertEquals($ws[455]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[455]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[455]["WIKI"]);
	 $this->assertEquals($ws[455]["PAGENAME"], 'Preis');
	 $this->assertEquals($ws[455]["ID"], 'price');
	 $this->assertEquals($ws[456]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[456]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:BNode56]]', $ws[456]["WIKI"]);
	 $this->assertEquals($ws[456]["PAGENAME"], 'Verkaeufer');
	 $this->assertEquals($ws[456]["ID"], 'vendor');
	 $this->assertEquals($ws[457]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[457]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:Organisation]]', $ws[457]["WIKI"]);
	 $this->assertEquals($ws[457]["PAGENAME"], 'EntwickeltVon');
	 $this->assertEquals($ws[457]["ID"], 'developedBy');
	 $this->assertEquals($ws[458]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[458]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[458]["WIKI"]);
	 $this->assertEquals($ws[458]["PAGENAME"], 'Herstellungsdatum');
	 $this->assertEquals($ws[458]["ID"], 'creationDate');
	 $this->assertEquals($ws[459]["NS"], 14);
	 $this->assertContains('', $ws[459]["WIKI"]);
	 $this->assertContains('', $ws[459]["WIKI"]);
	 $this->assertContains('', $ws[459]["WIKI"]);
	 $this->assertContains('', $ws[459]["WIKI"]);
	 $this->assertContains('', $ws[459]["WIKI"]);
	 $this->assertEquals($ws[459]["PAGENAME"], 'Produkt');
	 $this->assertEquals($ws[459]["ID"], 'Product');
	 $this->assertEquals($ws[460]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[460]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[460]["WIKI"]);
	 $this->assertEquals($ws[460]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[460]["ID"], 'lastName');
	 $this->assertEquals($ws[461]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[461]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[461]["WIKI"]);
	 $this->assertEquals($ws[461]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[461]["ID"], 'email');
	 $this->assertEquals($ws[462]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[462]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[462]["WIKI"]);
	 $this->assertEquals($ws[462]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[462]["ID"], 'homepage');
	 $this->assertEquals($ws[463]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[463]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[463]["WIKI"]);
	 $this->assertEquals($ws[463]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[463]["ID"], 'address');
	 $this->assertEquals($ws[464]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[464]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[464]["WIKI"]);
	 $this->assertEquals($ws[464]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[464]["ID"], 'firstName');
	 $this->assertEquals($ws[465]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[465]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[465]["WIKI"]);
	 $this->assertEquals($ws[465]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[465]["ID"], 'phone');
	 $this->assertEquals($ws[466]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[466]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[466]["WIKI"]);
	 $this->assertEquals($ws[466]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[466]["ID"], 'fax');
	 $this->assertEquals($ws[467]["NS"], 14);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertContains('', $ws[467]["WIKI"]);
	 $this->assertEquals($ws[467]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[467]["ID"], 'Person');
	 $this->assertEquals($ws[468]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[468]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[468]["WIKI"]);
	 $this->assertEquals($ws[468]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[468]["ID"], 'employs');
	 $this->assertEquals($ws[469]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[469]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[469]["WIKI"]);
	 $this->assertEquals($ws[469]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[469]["ID"], 'technicalReport');
	 $this->assertEquals($ws[470]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[470]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[470]["WIKI"]);
	 $this->assertEquals($ws[470]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[470]["ID"], 'finances');
	 $this->assertEquals($ws[471]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[471]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[471]["WIKI"]);
	 $this->assertEquals($ws[471]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[471]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[472]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[472]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[472]["WIKI"]);
	 $this->assertEquals($ws[472]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[472]["ID"], 'publisherOf');
	 $this->assertEquals($ws[473]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[473]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[473]["WIKI"]);
	 $this->assertEquals($ws[473]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[473]["ID"], 'develops');
	 $this->assertEquals($ws[474]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[474]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[474]["WIKI"]);
	 $this->assertEquals($ws[474]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[474]["ID"], 'carriesOut');
	 $this->assertEquals($ws[475]["NS"], 14);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertContains('', $ws[475]["WIKI"]);
	 $this->assertEquals($ws[475]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[475]["ID"], 'Organization');
	 $this->assertEquals($ws[476]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[476]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[476]["WIKI"]);
	 $this->assertEquals($ws[476]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[476]["ID"], 'employs');
	 $this->assertEquals($ws[477]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[477]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[477]["WIKI"]);
	 $this->assertEquals($ws[477]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[477]["ID"], 'technicalReport');
	 $this->assertEquals($ws[478]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[478]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[478]["WIKI"]);
	 $this->assertEquals($ws[478]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[478]["ID"], 'finances');
	 $this->assertEquals($ws[479]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[479]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[479]["WIKI"]);
	 $this->assertEquals($ws[479]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[479]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[480]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[480]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[480]["WIKI"]);
	 $this->assertEquals($ws[480]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[480]["ID"], 'publisherOf');
	 $this->assertEquals($ws[481]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[481]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[481]["WIKI"]);
	 $this->assertEquals($ws[481]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[481]["ID"], 'develops');
	 $this->assertEquals($ws[482]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[482]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[482]["WIKI"]);
	 $this->assertEquals($ws[482]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[482]["ID"], 'carriesOut');
	 $this->assertEquals($ws[483]["NS"], 14);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertContains('', $ws[483]["WIKI"]);
	 $this->assertEquals($ws[483]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[483]["ID"], 'Organization');
	 $this->assertEquals($ws[484]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[484]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[484]["WIKI"]);
	 $this->assertEquals($ws[484]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[484]["ID"], 'lastName');
	 $this->assertEquals($ws[485]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[485]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[485]["WIKI"]);
	 $this->assertEquals($ws[485]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[485]["ID"], 'email');
	 $this->assertEquals($ws[486]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[486]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[486]["WIKI"]);
	 $this->assertEquals($ws[486]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[486]["ID"], 'homepage');
	 $this->assertEquals($ws[487]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[487]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[487]["WIKI"]);
	 $this->assertEquals($ws[487]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[487]["ID"], 'address');
	 $this->assertEquals($ws[488]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[488]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[488]["WIKI"]);
	 $this->assertEquals($ws[488]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[488]["ID"], 'firstName');
	 $this->assertEquals($ws[489]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[489]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[489]["WIKI"]);
	 $this->assertEquals($ws[489]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[489]["ID"], 'phone');
	 $this->assertEquals($ws[490]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[490]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[490]["WIKI"]);
	 $this->assertEquals($ws[490]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[490]["ID"], 'fax');
	 $this->assertEquals($ws[491]["NS"], 14);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertContains('', $ws[491]["WIKI"]);
	 $this->assertEquals($ws[491]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[491]["ID"], 'Person');
	 $this->assertEquals($ws[492]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[492]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[492]["WIKI"]);
	 $this->assertEquals($ws[492]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[492]["ID"], 'employs');
	 $this->assertEquals($ws[493]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[493]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[493]["WIKI"]);
	 $this->assertEquals($ws[493]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[493]["ID"], 'technicalReport');
	 $this->assertEquals($ws[494]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[494]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[494]["WIKI"]);
	 $this->assertEquals($ws[494]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[494]["ID"], 'finances');
	 $this->assertEquals($ws[495]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[495]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[495]["WIKI"]);
	 $this->assertEquals($ws[495]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[495]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[496]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[496]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[496]["WIKI"]);
	 $this->assertEquals($ws[496]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[496]["ID"], 'publisherOf');
	 $this->assertEquals($ws[497]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[497]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[497]["WIKI"]);
	 $this->assertEquals($ws[497]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[497]["ID"], 'develops');
	 $this->assertEquals($ws[498]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[498]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[498]["WIKI"]);
	 $this->assertEquals($ws[498]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[498]["ID"], 'carriesOut');
	 $this->assertEquals($ws[499]["NS"], 14);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertContains('', $ws[499]["WIKI"]);
	 $this->assertEquals($ws[499]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[499]["ID"], 'Organization');
	 $this->assertEquals($ws[500]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[500]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[500]["WIKI"]);
	 $this->assertEquals($ws[500]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[500]["ID"], 'employs');
	 $this->assertEquals($ws[501]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[501]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[501]["WIKI"]);
	 $this->assertEquals($ws[501]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[501]["ID"], 'technicalReport');
	 $this->assertEquals($ws[502]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[502]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[502]["WIKI"]);
	 $this->assertEquals($ws[502]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[502]["ID"], 'finances');
	 $this->assertEquals($ws[503]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[503]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[503]["WIKI"]);
	 $this->assertEquals($ws[503]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[503]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[504]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[504]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[504]["WIKI"]);
	 $this->assertEquals($ws[504]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[504]["ID"], 'publisherOf');
	 $this->assertEquals($ws[505]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[505]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[505]["WIKI"]);
	 $this->assertEquals($ws[505]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[505]["ID"], 'develops');
	 $this->assertEquals($ws[506]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[506]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[506]["WIKI"]);
	 $this->assertEquals($ws[506]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[506]["ID"], 'carriesOut');
	 $this->assertEquals($ws[507]["NS"], 14);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertContains('', $ws[507]["WIKI"]);
	 $this->assertEquals($ws[507]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[507]["ID"], 'Organization');
	 $this->assertEquals($ws[508]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[508]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[508]["WIKI"]);
	 $this->assertEquals($ws[508]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[508]["ID"], 'lastName');
	 $this->assertEquals($ws[509]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[509]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[509]["WIKI"]);
	 $this->assertEquals($ws[509]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[509]["ID"], 'email');
	 $this->assertEquals($ws[510]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[510]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[510]["WIKI"]);
	 $this->assertEquals($ws[510]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[510]["ID"], 'homepage');
	 $this->assertEquals($ws[511]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[511]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[511]["WIKI"]);
	 $this->assertEquals($ws[511]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[511]["ID"], 'address');
	 $this->assertEquals($ws[512]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[512]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[512]["WIKI"]);
	 $this->assertEquals($ws[512]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[512]["ID"], 'firstName');
	 $this->assertEquals($ws[513]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[513]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[513]["WIKI"]);
	 $this->assertEquals($ws[513]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[513]["ID"], 'phone');
	 $this->assertEquals($ws[514]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[514]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[514]["WIKI"]);
	 $this->assertEquals($ws[514]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[514]["ID"], 'fax');
	 $this->assertEquals($ws[515]["NS"], 14);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertContains('', $ws[515]["WIKI"]);
	 $this->assertEquals($ws[515]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[515]["ID"], 'Person');
	 $this->assertEquals($ws[516]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[516]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[516]["WIKI"]);
	 $this->assertEquals($ws[516]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[516]["ID"], 'member');
	 $this->assertEquals($ws[517]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[517]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[517]["WIKI"]);
	 $this->assertEquals($ws[517]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[517]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[518]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[518]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[518]["WIKI"]);
	 $this->assertEquals($ws[518]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[518]["ID"], 'head');
	 $this->assertEquals($ws[519]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[519]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[519]["WIKI"]);
	 $this->assertEquals($ws[519]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[519]["ID"], 'projectInfo');
	 $this->assertEquals($ws[520]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[520]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[520]["WIKI"]);
	 $this->assertEquals($ws[520]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[520]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[521]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[521]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[521]["WIKI"]);
	 $this->assertEquals($ws[521]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[521]["ID"], 'isAbout');
	 $this->assertEquals($ws[522]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[522]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[522]["WIKI"]);
	 $this->assertEquals($ws[522]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[522]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[523]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[523]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[523]["WIKI"]);
	 $this->assertEquals($ws[523]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[523]["ID"], 'status');
	 $this->assertEquals($ws[524]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[524]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[524]["WIKI"]);
	 $this->assertEquals($ws[524]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[524]["ID"], 'startDate');
	 $this->assertEquals($ws[525]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[525]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[525]["WIKI"]);
	 $this->assertEquals($ws[525]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[525]["ID"], 'financedBy');
	 $this->assertEquals($ws[526]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[526]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[526]["WIKI"]);
	 $this->assertEquals($ws[526]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[526]["ID"], 'homepage');
	 $this->assertEquals($ws[527]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[527]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[527]["WIKI"]);
	 $this->assertEquals($ws[527]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[527]["ID"], 'endDate');
	 $this->assertEquals($ws[528]["NS"], 14);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertContains('', $ws[528]["WIKI"]);
	 $this->assertEquals($ws[528]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[528]["ID"], 'Project');
	 $this->assertEquals($ws[529]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[529]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[529]["WIKI"]);
	 $this->assertEquals($ws[529]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[529]["ID"], 'cite');
	 $this->assertEquals($ws[530]["NS"], 14);
	 $this->assertContains('', $ws[530]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[530]["WIKI"]);
	 $this->assertEquals($ws[530]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[530]["ID"], 'Publication');
	 $this->assertEquals($ws[531]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[531]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[531]["WIKI"]);
	 $this->assertEquals($ws[531]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[531]["ID"], 'member');
	 $this->assertEquals($ws[532]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[532]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[532]["WIKI"]);
	 $this->assertEquals($ws[532]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[532]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[533]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[533]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[533]["WIKI"]);
	 $this->assertEquals($ws[533]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[533]["ID"], 'head');
	 $this->assertEquals($ws[534]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[534]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[534]["WIKI"]);
	 $this->assertEquals($ws[534]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[534]["ID"], 'projectInfo');
	 $this->assertEquals($ws[535]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[535]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[535]["WIKI"]);
	 $this->assertEquals($ws[535]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[535]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[536]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[536]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[536]["WIKI"]);
	 $this->assertEquals($ws[536]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[536]["ID"], 'isAbout');
	 $this->assertEquals($ws[537]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[537]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[537]["WIKI"]);
	 $this->assertEquals($ws[537]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[537]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[538]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[538]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[538]["WIKI"]);
	 $this->assertEquals($ws[538]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[538]["ID"], 'status');
	 $this->assertEquals($ws[539]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[539]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[539]["WIKI"]);
	 $this->assertEquals($ws[539]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[539]["ID"], 'startDate');
	 $this->assertEquals($ws[540]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[540]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[540]["WIKI"]);
	 $this->assertEquals($ws[540]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[540]["ID"], 'financedBy');
	 $this->assertEquals($ws[541]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[541]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[541]["WIKI"]);
	 $this->assertEquals($ws[541]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[541]["ID"], 'homepage');
	 $this->assertEquals($ws[542]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[542]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[542]["WIKI"]);
	 $this->assertEquals($ws[542]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[542]["ID"], 'endDate');
	 $this->assertEquals($ws[543]["NS"], 14);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertContains('', $ws[543]["WIKI"]);
	 $this->assertEquals($ws[543]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[543]["ID"], 'Project');
	 $this->assertEquals($ws[544]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[544]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[544]["WIKI"]);
	 $this->assertEquals($ws[544]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[544]["ID"], 'lastName');
	 $this->assertEquals($ws[545]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[545]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[545]["WIKI"]);
	 $this->assertEquals($ws[545]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[545]["ID"], 'email');
	 $this->assertEquals($ws[546]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[546]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[546]["WIKI"]);
	 $this->assertEquals($ws[546]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[546]["ID"], 'homepage');
	 $this->assertEquals($ws[547]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[547]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[547]["WIKI"]);
	 $this->assertEquals($ws[547]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[547]["ID"], 'address');
	 $this->assertEquals($ws[548]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[548]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[548]["WIKI"]);
	 $this->assertEquals($ws[548]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[548]["ID"], 'firstName');
	 $this->assertEquals($ws[549]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[549]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[549]["WIKI"]);
	 $this->assertEquals($ws[549]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[549]["ID"], 'phone');
	 $this->assertEquals($ws[550]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[550]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[550]["WIKI"]);
	 $this->assertEquals($ws[550]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[550]["ID"], 'fax');
	 $this->assertEquals($ws[551]["NS"], 14);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertContains('', $ws[551]["WIKI"]);
	 $this->assertEquals($ws[551]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[551]["ID"], 'Person');
	 $this->assertEquals($ws[552]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[552]["WIKI"]);
	 $this->assertEquals($ws[552]["PAGENAME"], 'Sammelband');
	 $this->assertEquals($ws[552]["ID"], 'Collection');
	 $this->assertEquals($ws[553]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[553]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[553]["WIKI"]);
	 $this->assertEquals($ws[553]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[553]["ID"], 'cite');
	 $this->assertEquals($ws[554]["NS"], 14);
	 $this->assertContains('', $ws[554]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[554]["WIKI"]);
	 $this->assertEquals($ws[554]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[554]["ID"], 'Publication');
	 $this->assertEquals($ws[555]["NS"], 14);
	 $this->assertContains('[[Category:Student]]', $ws[555]["WIKI"]);
	 $this->assertEquals($ws[555]["PAGENAME"], 'Absolvent');
	 $this->assertEquals($ws[555]["ID"], 'Graduate');
	 $this->assertEquals($ws[556]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[556]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Student; Category:Unversität]]', $ws[556]["WIKI"]);
	 $this->assertEquals($ws[556]["PAGENAME"], 'StudiertAn');
	 $this->assertEquals($ws[556]["ID"], 'studiesAt');
	 $this->assertEquals($ws[557]["NS"], 14);
	 $this->assertContains('[[Category:Person]]', $ws[557]["WIKI"]);
	 $this->assertContains('', $ws[557]["WIKI"]);
	 $this->assertEquals($ws[557]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[557]["ID"], 'Student');
	 $this->assertEquals($ws[558]["NS"], 14);
	 $this->assertContains('[[Category:Wissenschaftlicher Mitarbeiter]]', $ws[558]["WIKI"]);
	 $this->assertEquals($ws[558]["PAGENAME"], 'Lehrbeauftragter');
	 $this->assertEquals($ws[558]["ID"], 'Lecturer');
	 $this->assertEquals($ws[559]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[559]["WIKI"]);
	 $this->assertEquals($ws[559]["PAGENAME"], 'Manager');
	 $this->assertEquals($ws[559]["ID"], 'Manager');
	 $this->assertEquals($ws[560]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[560]["WIKI"]);
	 $this->assertEquals($ws[560]["PAGENAME"], 'Technischer_Angestellter');
	 $this->assertEquals($ws[560]["ID"], 'TechnicalStaff');
	 $this->assertEquals($ws[561]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[561]["WIKI"]);
	 $this->assertEquals($ws[561]["PAGENAME"], 'Verwaltungsangestellter');
	 $this->assertEquals($ws[561]["ID"], 'AdministrativeStaff');
	 $this->assertEquals($ws[562]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[562]["WIKI"]);
	 $this->assertEquals($ws[562]["PAGENAME"], 'Verband');
	 $this->assertEquals($ws[562]["ID"], 'Association');
	 $this->assertEquals($ws[563]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[563]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Fachbereich; Category:Institut]]', $ws[563]["WIKI"]);
	 $this->assertEquals($ws[563]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[563]["ID"], 'hasParts');
	 $this->assertEquals($ws[564]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[564]["WIKI"]);
	 $this->assertContains('', $ws[564]["WIKI"]);
	 $this->assertEquals($ws[564]["PAGENAME"], 'Fachbereich');
	 $this->assertEquals($ws[564]["ID"], 'Department');
	 $this->assertEquals($ws[565]["NS"], 14);
	 $this->assertContains('[[Category:Fakultaetsmitglied]]', $ws[565]["WIKI"]);
	 $this->assertEquals($ws[565]["PAGENAME"], 'Austauschprofessor');
	 $this->assertEquals($ws[565]["ID"], 'ExchangeProfessor');
	 $this->assertEquals($ws[566]["NS"], 14);
	 $this->assertContains('[[Category:Wissenschaftlicher Mitarbeiter]]', $ws[566]["WIKI"]);
	 $this->assertEquals($ws[566]["PAGENAME"], 'Fakultaetsmitglied');
	 $this->assertEquals($ws[566]["ID"], 'FacultyMember');
	 $this->assertEquals($ws[567]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[567]["WIKI"]);
	 $this->assertEquals($ws[567]["PAGENAME"], 'Handbuch');
	 $this->assertEquals($ws[567]["ID"], 'Manual');
	 $this->assertEquals($ws[568]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[568]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[568]["WIKI"]);
	 $this->assertEquals($ws[568]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[568]["ID"], 'cite');
	 $this->assertEquals($ws[569]["NS"], 14);
	 $this->assertContains('', $ws[569]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[569]["WIKI"]);
	 $this->assertEquals($ws[569]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[569]["ID"], 'Publication');
	 $this->assertEquals($ws[570]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[570]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Abschlussarbeit; Category:Unversität]]', $ws[570]["WIKI"]);
	 $this->assertEquals($ws[570]["PAGENAME"], 'Schule');
	 $this->assertEquals($ws[570]["ID"], 'school');
	 $this->assertEquals($ws[571]["NS"], 14);
	 $this->assertContains('', $ws[571]["WIKI"]);
	 $this->assertContains('[[Category:Publikation]]', $ws[571]["WIKI"]);
	 $this->assertEquals($ws[571]["PAGENAME"], 'Abschlussarbeit');
	 $this->assertEquals($ws[571]["ID"], 'Thesis');
	 $this->assertEquals($ws[572]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[572]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[572]["WIKI"]);
	 $this->assertEquals($ws[572]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[572]["ID"], 'cite');
	 $this->assertEquals($ws[573]["NS"], 14);
	 $this->assertContains('', $ws[573]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[573]["WIKI"]);
	 $this->assertEquals($ws[573]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[573]["ID"], 'Publication');
	 $this->assertEquals($ws[574]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[574]["WIKI"]);
	 $this->assertEquals($ws[574]["PAGENAME"], 'Artikel_eines_Tagungsbandes');
	 $this->assertEquals($ws[574]["ID"], 'InProceedings');
	 $this->assertEquals($ws[575]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[575]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[575]["WIKI"]);
	 $this->assertEquals($ws[575]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[575]["ID"], 'cite');
	 $this->assertEquals($ws[576]["NS"], 14);
	 $this->assertContains('', $ws[576]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[576]["WIKI"]);
	 $this->assertEquals($ws[576]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[576]["ID"], 'Publication');
	 $this->assertEquals($ws[577]["NS"], 14);
	 $this->assertContains('[[Category:Wissenschaftlicher Mitarbeiter]]', $ws[577]["WIKI"]);
	 $this->assertEquals($ws[577]["PAGENAME"], 'Fakultaetsmitglied');
	 $this->assertEquals($ws[577]["ID"], 'FacultyMember');
	 $this->assertEquals($ws[578]["NS"], 14);
	 $this->assertContains('[[Category:Fakultaetsmitglied]]', $ws[578]["WIKI"]);
	 $this->assertEquals($ws[578]["PAGENAME"], 'Privatdozent');
	 $this->assertEquals($ws[578]["ID"], 'AssistantProfessor');
	 $this->assertEquals($ws[579]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[579]["WIKI"]);
	 $this->assertEquals($ws[579]["PAGENAME"], 'Verwaltungsangestellter');
	 $this->assertEquals($ws[579]["ID"], 'AdministrativeStaff');
	 $this->assertEquals($ws[580]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[580]["WIKI"]);
	 $this->assertEquals($ws[580]["PAGENAME"], 'Technischer_Angestellter');
	 $this->assertEquals($ws[580]["ID"], 'TechnicalStaff');
	 $this->assertEquals($ws[581]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[581]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Publikation; Category:Publikation]]', $ws[581]["WIKI"]);
	 $this->assertEquals($ws[581]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[581]["ID"], 'cite');
	 $this->assertEquals($ws[582]["NS"], 14);
	 $this->assertContains('', $ws[582]["WIKI"]);
	 $this->assertContains('[[Category:Dokument]]', $ws[582]["WIKI"]);
	 $this->assertEquals($ws[582]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[582]["ID"], 'Publication');
	 $this->assertEquals($ws[583]["NS"], 14);
	 $this->assertContains('[[Category:Dokument]]', $ws[583]["WIKI"]);
	 $this->assertEquals($ws[583]["PAGENAME"], 'Ein_nicht_formell_publiziertes_Dokument');
	 $this->assertEquals($ws[583]["ID"], 'Unpublished');
	 $this->assertEquals($ws[584]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[584]["WIKI"]);
	 $this->assertEquals($ws[584]["PAGENAME"], 'Journal');
	 $this->assertEquals($ws[584]["ID"], 'Journal');
	 $this->assertEquals($ws[585]["NS"], 14);
	 $this->assertContains('[[Category:Seminar]]', $ws[585]["WIKI"]);
	 $this->assertEquals($ws[585]["PAGENAME"], 'Proseminar');
	 $this->assertEquals($ws[585]["ID"], 'UndergraduateIntermediateClass');
	 $this->assertEquals($ws[586]["NS"], 14);
	 $this->assertContains('[[Category:Seminar]]', $ws[586]["WIKI"]);
	 $this->assertEquals($ws[586]["PAGENAME"], 'Hauptseminar');
	 $this->assertEquals($ws[586]["ID"], 'UndergraduateAdvancedClass');
	 $this->assertEquals($ws[587]["NS"], 14);
	 $this->assertContains('[[Category:Student]]', $ws[587]["WIKI"]);
	 $this->assertEquals($ws[587]["PAGENAME"], 'Student_ohne_Abschluss');
	 $this->assertEquals($ws[587]["ID"], 'Undergraduate');
	 $this->assertEquals($ws[588]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[588]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Student; Category:Unversität]]', $ws[588]["WIKI"]);
	 $this->assertEquals($ws[588]["PAGENAME"], 'StudiertAn');
	 $this->assertEquals($ws[588]["ID"], 'studiesAt');
	 $this->assertEquals($ws[589]["NS"], 14);
	 $this->assertContains('[[Category:Person]]', $ws[589]["WIKI"]);
	 $this->assertContains('', $ws[589]["WIKI"]);
	 $this->assertEquals($ws[589]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[589]["ID"], 'Student');
	 $this->assertEquals($ws[590]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[590]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Fachbereich; Category:Institut]]', $ws[590]["WIKI"]);
	 $this->assertEquals($ws[590]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[590]["ID"], 'hasParts');
	 $this->assertEquals($ws[591]["NS"], 14);
	 $this->assertContains('[[Category:Organisation]]', $ws[591]["WIKI"]);
	 $this->assertContains('', $ws[591]["WIKI"]);
	 $this->assertEquals($ws[591]["PAGENAME"], 'Fachbereich');
	 $this->assertEquals($ws[591]["ID"], 'Department');
	 $this->assertEquals($ws[592]["NS"], 14);
	 $this->assertContains('[[Category:Abschlussarbeit]]', $ws[592]["WIKI"]);
	 $this->assertEquals($ws[592]["PAGENAME"], 'Diplomarbeit');
	 $this->assertEquals($ws[592]["ID"], 'DiplomaThesis');
	 $this->assertEquals($ws[593]["NS"], 14);
	 $this->assertContains('[[Category:Abschlussarbeit]]', $ws[593]["WIKI"]);
	 $this->assertEquals($ws[593]["PAGENAME"], 'Master_Thesis');
	 $this->assertEquals($ws[593]["ID"], 'MasterThesis');
	 $this->assertEquals($ws[594]["NS"], 14);
	 $this->assertContains('[[Category:Publikation]]', $ws[594]["WIKI"]);
	 $this->assertEquals($ws[594]["PAGENAME"], 'Magazin');
	 $this->assertEquals($ws[594]["ID"], 'Magazine');
	 $this->assertEquals($ws[595]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[595]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Konferenz; Category:Person]]', $ws[595]["WIKI"]);
	 $this->assertEquals($ws[595]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[595]["ID"], 'participant');
	 $this->assertEquals($ws[596]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[596]["WIKI"]);
	 $this->assertContains('', $ws[596]["WIKI"]);
	 $this->assertEquals($ws[596]["PAGENAME"], 'Konferenz');
	 $this->assertEquals($ws[596]["ID"], 'Conference');
	 $this->assertEquals($ws[597]["NS"], 14);
	 $this->assertContains('[[Category:Abschlussarbeit]]', $ws[597]["WIKI"]);
	 $this->assertEquals($ws[597]["PAGENAME"], 'Master_Thesis');
	 $this->assertEquals($ws[597]["ID"], 'MasterThesis');
	 $this->assertEquals($ws[598]["NS"], 14);
	 $this->assertContains('[[Category:Entwicklungsvorhaben]]', $ws[598]["WIKI"]);
	 $this->assertEquals($ws[598]["PAGENAME"], 'Softwareprojekt');
	 $this->assertEquals($ws[598]["ID"], 'SoftwareProject');
	 $this->assertEquals($ws[599]["NS"], 14);
	 $this->assertContains('[[Category:Projekt]]', $ws[599]["WIKI"]);
	 $this->assertEquals($ws[599]["PAGENAME"], 'Entwicklungsvorhaben');
	 $this->assertEquals($ws[599]["ID"], 'DevelopmentProject');
	 $this->assertEquals($ws[600]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[600]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Student; Category:Unversität]]', $ws[600]["WIKI"]);
	 $this->assertEquals($ws[600]["PAGENAME"], 'StudiertAn');
	 $this->assertEquals($ws[600]["ID"], 'studiesAt');
	 $this->assertEquals($ws[601]["NS"], 14);
	 $this->assertContains('[[Category:Person]]', $ws[601]["WIKI"]);
	 $this->assertContains('', $ws[601]["WIKI"]);
	 $this->assertEquals($ws[601]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[601]["ID"], 'Student');
	 $this->assertEquals($ws[602]["NS"], 14);
	 $this->assertContains('[[Category:Mitarbeiter]]', $ws[602]["WIKI"]);
	 $this->assertEquals($ws[602]["PAGENAME"], 'Technischer_Angestellter');
	 $this->assertEquals($ws[602]["ID"], 'TechnicalStaff');
	 $this->assertEquals($ws[603]["NS"], 14);
	 $this->assertContains('[[Category:Dokument]]', $ws[603]["WIKI"]);
	 $this->assertEquals($ws[603]["PAGENAME"], 'Ein_nicht_formell_publiziertes_Dokument');
	 $this->assertEquals($ws[603]["ID"], 'Unpublished');
	 $this->assertEquals($ws[604]["NS"], 14);
	 $this->assertContains('[[Category:Seminar]]', $ws[604]["WIKI"]);
	 $this->assertEquals($ws[604]["PAGENAME"], 'Hauptseminar');
	 $this->assertEquals($ws[604]["ID"], 'UndergraduateAdvancedClass');
	 $this->assertEquals($ws[605]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[605]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[605]["WIKI"]);
	 $this->assertEquals($ws[605]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[605]["ID"], 'member');
	 $this->assertEquals($ws[606]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[606]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[606]["WIKI"]);
	 $this->assertEquals($ws[606]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[606]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[607]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[607]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[607]["WIKI"]);
	 $this->assertEquals($ws[607]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[607]["ID"], 'head');
	 $this->assertEquals($ws[608]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[608]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[608]["WIKI"]);
	 $this->assertEquals($ws[608]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[608]["ID"], 'projectInfo');
	 $this->assertEquals($ws[609]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[609]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[609]["WIKI"]);
	 $this->assertEquals($ws[609]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[609]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[610]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[610]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[610]["WIKI"]);
	 $this->assertEquals($ws[610]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[610]["ID"], 'isAbout');
	 $this->assertEquals($ws[611]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[611]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[611]["WIKI"]);
	 $this->assertEquals($ws[611]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[611]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[612]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[612]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[612]["WIKI"]);
	 $this->assertEquals($ws[612]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[612]["ID"], 'status');
	 $this->assertEquals($ws[613]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[613]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[613]["WIKI"]);
	 $this->assertEquals($ws[613]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[613]["ID"], 'startDate');
	 $this->assertEquals($ws[614]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[614]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[614]["WIKI"]);
	 $this->assertEquals($ws[614]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[614]["ID"], 'financedBy');
	 $this->assertEquals($ws[615]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[615]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[615]["WIKI"]);
	 $this->assertEquals($ws[615]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[615]["ID"], 'homepage');
	 $this->assertEquals($ws[616]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[616]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[616]["WIKI"]);
	 $this->assertEquals($ws[616]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[616]["ID"], 'endDate');
	 $this->assertEquals($ws[617]["NS"], 14);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertContains('', $ws[617]["WIKI"]);
	 $this->assertEquals($ws[617]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[617]["ID"], 'Project');
	 $this->assertEquals($ws[618]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[618]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt Bericht; Category:Projekt]]', $ws[618]["WIKI"]);
	 $this->assertEquals($ws[618]["PAGENAME"], 'BeschreibtProjekt');
	 $this->assertEquals($ws[618]["ID"], 'describesProject');
	 $this->assertEquals($ws[619]["NS"], 14);
	 $this->assertContains('[[Category:Bericht]]', $ws[619]["WIKI"]);
	 $this->assertContains('', $ws[619]["WIKI"]);
	 $this->assertEquals($ws[619]["PAGENAME"], 'Projekt_Bericht');
	 $this->assertEquals($ws[619]["ID"], 'ProjectReport');
	 $this->assertEquals($ws[620]["NS"], 14);
	 $this->assertContains('[[Category:Projekt]]', $ws[620]["WIKI"]);
	 $this->assertEquals($ws[620]["PAGENAME"], 'Entwicklungsvorhaben');
	 $this->assertEquals($ws[620]["ID"], 'DevelopmentProject');
	 $this->assertEquals($ws[621]["NS"], 14);
	 $this->assertContains('[[Category:Fakultaetsmitglied]]', $ws[621]["WIKI"]);
	 $this->assertEquals($ws[621]["PAGENAME"], 'Honorarprofessor');
	 $this->assertEquals($ws[621]["ID"], 'HonoraryProfessor');
	 $this->assertEquals($ws[622]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[622]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[622]["WIKI"]);
	 $this->assertEquals($ws[622]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[622]["ID"], 'employs');
	 $this->assertEquals($ws[623]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[623]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[623]["WIKI"]);
	 $this->assertEquals($ws[623]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[623]["ID"], 'technicalReport');
	 $this->assertEquals($ws[624]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[624]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[624]["WIKI"]);
	 $this->assertEquals($ws[624]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[624]["ID"], 'finances');
	 $this->assertEquals($ws[625]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[625]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[625]["WIKI"]);
	 $this->assertEquals($ws[625]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[625]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[626]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[626]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[626]["WIKI"]);
	 $this->assertEquals($ws[626]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[626]["ID"], 'publisherOf');
	 $this->assertEquals($ws[627]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[627]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[627]["WIKI"]);
	 $this->assertEquals($ws[627]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[627]["ID"], 'develops');
	 $this->assertEquals($ws[628]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[628]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[628]["WIKI"]);
	 $this->assertEquals($ws[628]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[628]["ID"], 'carriesOut');
	 $this->assertEquals($ws[629]["NS"], 14);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertContains('', $ws[629]["WIKI"]);
	 $this->assertEquals($ws[629]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[629]["ID"], 'Organization');
	 $this->assertEquals($ws[630]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[630]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[630]["WIKI"]);
	 $this->assertEquals($ws[630]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[630]["ID"], 'lastName');
	 $this->assertEquals($ws[631]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[631]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[631]["WIKI"]);
	 $this->assertEquals($ws[631]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[631]["ID"], 'email');
	 $this->assertEquals($ws[632]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[632]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[632]["WIKI"]);
	 $this->assertEquals($ws[632]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[632]["ID"], 'homepage');
	 $this->assertEquals($ws[633]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[633]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[633]["WIKI"]);
	 $this->assertEquals($ws[633]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[633]["ID"], 'address');
	 $this->assertEquals($ws[634]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[634]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[634]["WIKI"]);
	 $this->assertEquals($ws[634]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[634]["ID"], 'firstName');
	 $this->assertEquals($ws[635]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[635]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[635]["WIKI"]);
	 $this->assertEquals($ws[635]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[635]["ID"], 'phone');
	 $this->assertEquals($ws[636]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[636]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[636]["WIKI"]);
	 $this->assertEquals($ws[636]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[636]["ID"], 'fax');
	 $this->assertEquals($ws[637]["NS"], 14);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertContains('', $ws[637]["WIKI"]);
	 $this->assertEquals($ws[637]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[637]["ID"], 'Person');
	 $this->assertEquals($ws[638]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[638]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[638]["WIKI"]);
	 $this->assertEquals($ws[638]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[638]["ID"], 'lastName');
	 $this->assertEquals($ws[639]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[639]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[639]["WIKI"]);
	 $this->assertEquals($ws[639]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[639]["ID"], 'email');
	 $this->assertEquals($ws[640]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[640]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[640]["WIKI"]);
	 $this->assertEquals($ws[640]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[640]["ID"], 'homepage');
	 $this->assertEquals($ws[641]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[641]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[641]["WIKI"]);
	 $this->assertEquals($ws[641]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[641]["ID"], 'address');
	 $this->assertEquals($ws[642]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[642]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[642]["WIKI"]);
	 $this->assertEquals($ws[642]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[642]["ID"], 'firstName');
	 $this->assertEquals($ws[643]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[643]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[643]["WIKI"]);
	 $this->assertEquals($ws[643]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[643]["ID"], 'phone');
	 $this->assertEquals($ws[644]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[644]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[644]["WIKI"]);
	 $this->assertEquals($ws[644]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[644]["ID"], 'fax');
	 $this->assertEquals($ws[645]["NS"], 14);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertContains('', $ws[645]["WIKI"]);
	 $this->assertEquals($ws[645]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[645]["ID"], 'Person');
	 $this->assertEquals($ws[646]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[646]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[646]["WIKI"]);
	 $this->assertEquals($ws[646]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[646]["ID"], 'employs');
	 $this->assertEquals($ws[647]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[647]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[647]["WIKI"]);
	 $this->assertEquals($ws[647]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[647]["ID"], 'technicalReport');
	 $this->assertEquals($ws[648]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[648]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[648]["WIKI"]);
	 $this->assertEquals($ws[648]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[648]["ID"], 'finances');
	 $this->assertEquals($ws[649]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[649]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[649]["WIKI"]);
	 $this->assertEquals($ws[649]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[649]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[650]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[650]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[650]["WIKI"]);
	 $this->assertEquals($ws[650]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[650]["ID"], 'publisherOf');
	 $this->assertEquals($ws[651]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[651]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[651]["WIKI"]);
	 $this->assertEquals($ws[651]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[651]["ID"], 'develops');
	 $this->assertEquals($ws[652]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[652]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[652]["WIKI"]);
	 $this->assertEquals($ws[652]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[652]["ID"], 'carriesOut');
	 $this->assertEquals($ws[653]["NS"], 14);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertContains('', $ws[653]["WIKI"]);
	 $this->assertEquals($ws[653]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[653]["ID"], 'Organization');
	 $this->assertEquals($ws[654]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[654]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode27]]', $ws[654]["WIKI"]);
	 $this->assertEquals($ws[654]["PAGENAME"], 'Herausgeber');
	 $this->assertEquals($ws[654]["ID"], 'publisher');
	 $this->assertEquals($ws[655]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[655]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[655]["WIKI"]);
	 $this->assertEquals($ws[655]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[655]["ID"], 'title');
	 $this->assertEquals($ws[656]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[656]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[656]["WIKI"]);
	 $this->assertEquals($ws[656]["PAGENAME"], 'Beziehung');
	 $this->assertEquals($ws[656]["ID"], 'relation');
	 $this->assertEquals($ws[657]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[657]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[657]["WIKI"]);
	 $this->assertEquals($ws[657]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[657]["ID"], 'date');
	 $this->assertEquals($ws[658]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[658]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[658]["WIKI"]);
	 $this->assertEquals($ws[658]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[658]["ID"], 'source');
	 $this->assertEquals($ws[659]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[659]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[659]["WIKI"]);
	 $this->assertEquals($ws[659]["PAGENAME"], 'Format');
	 $this->assertEquals($ws[659]["ID"], 'format');
	 $this->assertEquals($ws[660]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[660]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Organisation]]', $ws[660]["WIKI"]);
	 $this->assertEquals($ws[660]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[660]["ID"], 'organization');
	 $this->assertEquals($ws[661]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[661]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[661]["WIKI"]);
	 $this->assertEquals($ws[661]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[661]["ID"], 'subject');
	 $this->assertEquals($ws[662]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[662]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[662]["WIKI"]);
	 $this->assertEquals($ws[662]["PAGENAME"], 'InhaltlicheBeschreibung');
	 $this->assertEquals($ws[662]["ID"], 'description');
	 $this->assertEquals($ws[663]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[663]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[663]["WIKI"]);
	 $this->assertEquals($ws[663]["PAGENAME"], 'RechtlicheBedingungen');
	 $this->assertEquals($ws[663]["ID"], 'rights');
	 $this->assertEquals($ws[664]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[664]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode40]]', $ws[664]["WIKI"]);
	 $this->assertEquals($ws[664]["PAGENAME"], 'Beteiligter');
	 $this->assertEquals($ws[664]["ID"], 'contributor');
	 $this->assertEquals($ws[665]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[665]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[665]["WIKI"]);
	 $this->assertEquals($ws[665]["PAGENAME"], 'Sprache');
	 $this->assertEquals($ws[665]["ID"], 'language');
	 $this->assertEquals($ws[666]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[666]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[666]["WIKI"]);
	 $this->assertEquals($ws[666]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[666]["ID"], 'identifier');
	 $this->assertEquals($ws[667]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[667]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[667]["WIKI"]);
	 $this->assertEquals($ws[667]["PAGENAME"], 'Abdeckungsspektrum');
	 $this->assertEquals($ws[667]["ID"], 'coverage');
	 $this->assertEquals($ws[668]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[668]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode47]]', $ws[668]["WIKI"]);
	 $this->assertEquals($ws[668]["PAGENAME"], 'Urheber');
	 $this->assertEquals($ws[668]["ID"], 'creator');
	 $this->assertEquals($ws[669]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[669]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[669]["WIKI"]);
	 $this->assertEquals($ws[669]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[669]["ID"], 'type');
	 $this->assertEquals($ws[670]["NS"], 14);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertContains('', $ws[670]["WIKI"]);
	 $this->assertEquals($ws[670]["PAGENAME"], 'Dokument');
	 $this->assertEquals($ws[670]["ID"], 'Document');
	 $this->assertEquals($ws[671]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[671]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[671]["WIKI"]);
	 $this->assertEquals($ws[671]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[671]["ID"], 'lastName');
	 $this->assertEquals($ws[672]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[672]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[672]["WIKI"]);
	 $this->assertEquals($ws[672]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[672]["ID"], 'email');
	 $this->assertEquals($ws[673]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[673]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[673]["WIKI"]);
	 $this->assertEquals($ws[673]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[673]["ID"], 'homepage');
	 $this->assertEquals($ws[674]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[674]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[674]["WIKI"]);
	 $this->assertEquals($ws[674]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[674]["ID"], 'address');
	 $this->assertEquals($ws[675]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[675]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[675]["WIKI"]);
	 $this->assertEquals($ws[675]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[675]["ID"], 'firstName');
	 $this->assertEquals($ws[676]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[676]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[676]["WIKI"]);
	 $this->assertEquals($ws[676]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[676]["ID"], 'phone');
	 $this->assertEquals($ws[677]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[677]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[677]["WIKI"]);
	 $this->assertEquals($ws[677]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[677]["ID"], 'fax');
	 $this->assertEquals($ws[678]["NS"], 14);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertContains('', $ws[678]["WIKI"]);
	 $this->assertEquals($ws[678]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[678]["ID"], 'Person');
	 $this->assertEquals($ws[679]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[679]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[679]["WIKI"]);
	 $this->assertEquals($ws[679]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[679]["ID"], 'employs');
	 $this->assertEquals($ws[680]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[680]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[680]["WIKI"]);
	 $this->assertEquals($ws[680]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[680]["ID"], 'technicalReport');
	 $this->assertEquals($ws[681]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[681]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[681]["WIKI"]);
	 $this->assertEquals($ws[681]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[681]["ID"], 'finances');
	 $this->assertEquals($ws[682]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[682]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[682]["WIKI"]);
	 $this->assertEquals($ws[682]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[682]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[683]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[683]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[683]["WIKI"]);
	 $this->assertEquals($ws[683]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[683]["ID"], 'publisherOf');
	 $this->assertEquals($ws[684]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[684]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[684]["WIKI"]);
	 $this->assertEquals($ws[684]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[684]["ID"], 'develops');
	 $this->assertEquals($ws[685]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[685]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[685]["WIKI"]);
	 $this->assertEquals($ws[685]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[685]["ID"], 'carriesOut');
	 $this->assertEquals($ws[686]["NS"], 14);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertContains('', $ws[686]["WIKI"]);
	 $this->assertEquals($ws[686]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[686]["ID"], 'Organization');
	 $this->assertEquals($ws[687]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[687]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[687]["WIKI"]);
	 $this->assertEquals($ws[687]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[687]["ID"], 'lastName');
	 $this->assertEquals($ws[688]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[688]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[688]["WIKI"]);
	 $this->assertEquals($ws[688]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[688]["ID"], 'email');
	 $this->assertEquals($ws[689]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[689]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[689]["WIKI"]);
	 $this->assertEquals($ws[689]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[689]["ID"], 'homepage');
	 $this->assertEquals($ws[690]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[690]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[690]["WIKI"]);
	 $this->assertEquals($ws[690]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[690]["ID"], 'address');
	 $this->assertEquals($ws[691]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[691]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[691]["WIKI"]);
	 $this->assertEquals($ws[691]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[691]["ID"], 'firstName');
	 $this->assertEquals($ws[692]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[692]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[692]["WIKI"]);
	 $this->assertEquals($ws[692]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[692]["ID"], 'phone');
	 $this->assertEquals($ws[693]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[693]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[693]["WIKI"]);
	 $this->assertEquals($ws[693]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[693]["ID"], 'fax');
	 $this->assertEquals($ws[694]["NS"], 14);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertContains('', $ws[694]["WIKI"]);
	 $this->assertEquals($ws[694]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[694]["ID"], 'Person');
	 $this->assertEquals($ws[695]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[695]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[695]["WIKI"]);
	 $this->assertEquals($ws[695]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[695]["ID"], 'employs');
	 $this->assertEquals($ws[696]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[696]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[696]["WIKI"]);
	 $this->assertEquals($ws[696]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[696]["ID"], 'technicalReport');
	 $this->assertEquals($ws[697]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[697]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[697]["WIKI"]);
	 $this->assertEquals($ws[697]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[697]["ID"], 'finances');
	 $this->assertEquals($ws[698]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[698]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[698]["WIKI"]);
	 $this->assertEquals($ws[698]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[698]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[699]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[699]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[699]["WIKI"]);
	 $this->assertEquals($ws[699]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[699]["ID"], 'publisherOf');
	 $this->assertEquals($ws[700]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[700]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[700]["WIKI"]);
	 $this->assertEquals($ws[700]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[700]["ID"], 'develops');
	 $this->assertEquals($ws[701]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[701]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[701]["WIKI"]);
	 $this->assertEquals($ws[701]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[701]["ID"], 'carriesOut');
	 $this->assertEquals($ws[702]["NS"], 14);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertContains('', $ws[702]["WIKI"]);
	 $this->assertEquals($ws[702]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[702]["ID"], 'Organization');
	 $this->assertEquals($ws[703]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[703]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[703]["WIKI"]);
	 $this->assertEquals($ws[703]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[703]["ID"], 'member');
	 $this->assertEquals($ws[704]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[704]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[704]["WIKI"]);
	 $this->assertEquals($ws[704]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[704]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[705]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[705]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[705]["WIKI"]);
	 $this->assertEquals($ws[705]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[705]["ID"], 'head');
	 $this->assertEquals($ws[706]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[706]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[706]["WIKI"]);
	 $this->assertEquals($ws[706]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[706]["ID"], 'projectInfo');
	 $this->assertEquals($ws[707]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[707]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[707]["WIKI"]);
	 $this->assertEquals($ws[707]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[707]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[708]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[708]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[708]["WIKI"]);
	 $this->assertEquals($ws[708]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[708]["ID"], 'isAbout');
	 $this->assertEquals($ws[709]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[709]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[709]["WIKI"]);
	 $this->assertEquals($ws[709]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[709]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[710]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[710]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[710]["WIKI"]);
	 $this->assertEquals($ws[710]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[710]["ID"], 'status');
	 $this->assertEquals($ws[711]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[711]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[711]["WIKI"]);
	 $this->assertEquals($ws[711]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[711]["ID"], 'startDate');
	 $this->assertEquals($ws[712]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[712]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[712]["WIKI"]);
	 $this->assertEquals($ws[712]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[712]["ID"], 'financedBy');
	 $this->assertEquals($ws[713]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[713]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[713]["WIKI"]);
	 $this->assertEquals($ws[713]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[713]["ID"], 'homepage');
	 $this->assertEquals($ws[714]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[714]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[714]["WIKI"]);
	 $this->assertEquals($ws[714]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[714]["ID"], 'endDate');
	 $this->assertEquals($ws[715]["NS"], 14);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertContains('', $ws[715]["WIKI"]);
	 $this->assertEquals($ws[715]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[715]["ID"], 'Project');
	 $this->assertEquals($ws[716]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[716]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[716]["WIKI"]);
	 $this->assertEquals($ws[716]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[716]["ID"], 'lastName');
	 $this->assertEquals($ws[717]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[717]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[717]["WIKI"]);
	 $this->assertEquals($ws[717]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[717]["ID"], 'email');
	 $this->assertEquals($ws[718]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[718]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[718]["WIKI"]);
	 $this->assertEquals($ws[718]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[718]["ID"], 'homepage');
	 $this->assertEquals($ws[719]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[719]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[719]["WIKI"]);
	 $this->assertEquals($ws[719]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[719]["ID"], 'address');
	 $this->assertEquals($ws[720]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[720]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[720]["WIKI"]);
	 $this->assertEquals($ws[720]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[720]["ID"], 'firstName');
	 $this->assertEquals($ws[721]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[721]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[721]["WIKI"]);
	 $this->assertEquals($ws[721]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[721]["ID"], 'phone');
	 $this->assertEquals($ws[722]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[722]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[722]["WIKI"]);
	 $this->assertEquals($ws[722]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[722]["ID"], 'fax');
	 $this->assertEquals($ws[723]["NS"], 14);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertContains('', $ws[723]["WIKI"]);
	 $this->assertEquals($ws[723]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[723]["ID"], 'Person');
	 $this->assertEquals($ws[724]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[724]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[724]["WIKI"]);
	 $this->assertEquals($ws[724]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[724]["ID"], 'employs');
	 $this->assertEquals($ws[725]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[725]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[725]["WIKI"]);
	 $this->assertEquals($ws[725]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[725]["ID"], 'technicalReport');
	 $this->assertEquals($ws[726]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[726]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[726]["WIKI"]);
	 $this->assertEquals($ws[726]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[726]["ID"], 'finances');
	 $this->assertEquals($ws[727]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[727]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[727]["WIKI"]);
	 $this->assertEquals($ws[727]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[727]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[728]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[728]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[728]["WIKI"]);
	 $this->assertEquals($ws[728]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[728]["ID"], 'publisherOf');
	 $this->assertEquals($ws[729]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[729]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[729]["WIKI"]);
	 $this->assertEquals($ws[729]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[729]["ID"], 'develops');
	 $this->assertEquals($ws[730]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[730]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[730]["WIKI"]);
	 $this->assertEquals($ws[730]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[730]["ID"], 'carriesOut');
	 $this->assertEquals($ws[731]["NS"], 14);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertContains('', $ws[731]["WIKI"]);
	 $this->assertEquals($ws[731]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[731]["ID"], 'Organization');
	 $this->assertEquals($ws[732]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[732]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[732]["WIKI"]);
	 $this->assertEquals($ws[732]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[732]["ID"], 'lastName');
	 $this->assertEquals($ws[733]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[733]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[733]["WIKI"]);
	 $this->assertEquals($ws[733]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[733]["ID"], 'email');
	 $this->assertEquals($ws[734]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[734]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[734]["WIKI"]);
	 $this->assertEquals($ws[734]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[734]["ID"], 'homepage');
	 $this->assertEquals($ws[735]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[735]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[735]["WIKI"]);
	 $this->assertEquals($ws[735]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[735]["ID"], 'address');
	 $this->assertEquals($ws[736]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[736]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[736]["WIKI"]);
	 $this->assertEquals($ws[736]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[736]["ID"], 'firstName');
	 $this->assertEquals($ws[737]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[737]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[737]["WIKI"]);
	 $this->assertEquals($ws[737]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[737]["ID"], 'phone');
	 $this->assertEquals($ws[738]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[738]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[738]["WIKI"]);
	 $this->assertEquals($ws[738]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[738]["ID"], 'fax');
	 $this->assertEquals($ws[739]["NS"], 14);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertContains('', $ws[739]["WIKI"]);
	 $this->assertEquals($ws[739]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[739]["ID"], 'Person');
	 $this->assertEquals($ws[740]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[740]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[740]["WIKI"]);
	 $this->assertEquals($ws[740]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[740]["ID"], 'employs');
	 $this->assertEquals($ws[741]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[741]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[741]["WIKI"]);
	 $this->assertEquals($ws[741]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[741]["ID"], 'technicalReport');
	 $this->assertEquals($ws[742]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[742]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[742]["WIKI"]);
	 $this->assertEquals($ws[742]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[742]["ID"], 'finances');
	 $this->assertEquals($ws[743]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[743]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[743]["WIKI"]);
	 $this->assertEquals($ws[743]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[743]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[744]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[744]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[744]["WIKI"]);
	 $this->assertEquals($ws[744]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[744]["ID"], 'publisherOf');
	 $this->assertEquals($ws[745]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[745]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[745]["WIKI"]);
	 $this->assertEquals($ws[745]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[745]["ID"], 'develops');
	 $this->assertEquals($ws[746]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[746]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[746]["WIKI"]);
	 $this->assertEquals($ws[746]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[746]["ID"], 'carriesOut');
	 $this->assertEquals($ws[747]["NS"], 14);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertContains('', $ws[747]["WIKI"]);
	 $this->assertEquals($ws[747]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[747]["ID"], 'Organization');
	 $this->assertEquals($ws[748]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[748]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[748]["WIKI"]);
	 $this->assertEquals($ws[748]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[748]["ID"], 'member');
	 $this->assertEquals($ws[749]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[749]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[749]["WIKI"]);
	 $this->assertEquals($ws[749]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[749]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[750]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[750]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[750]["WIKI"]);
	 $this->assertEquals($ws[750]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[750]["ID"], 'head');
	 $this->assertEquals($ws[751]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[751]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[751]["WIKI"]);
	 $this->assertEquals($ws[751]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[751]["ID"], 'projectInfo');
	 $this->assertEquals($ws[752]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[752]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[752]["WIKI"]);
	 $this->assertEquals($ws[752]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[752]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[753]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[753]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[753]["WIKI"]);
	 $this->assertEquals($ws[753]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[753]["ID"], 'isAbout');
	 $this->assertEquals($ws[754]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[754]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[754]["WIKI"]);
	 $this->assertEquals($ws[754]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[754]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[755]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[755]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[755]["WIKI"]);
	 $this->assertEquals($ws[755]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[755]["ID"], 'status');
	 $this->assertEquals($ws[756]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[756]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[756]["WIKI"]);
	 $this->assertEquals($ws[756]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[756]["ID"], 'startDate');
	 $this->assertEquals($ws[757]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[757]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[757]["WIKI"]);
	 $this->assertEquals($ws[757]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[757]["ID"], 'financedBy');
	 $this->assertEquals($ws[758]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[758]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[758]["WIKI"]);
	 $this->assertEquals($ws[758]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[758]["ID"], 'homepage');
	 $this->assertEquals($ws[759]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[759]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[759]["WIKI"]);
	 $this->assertEquals($ws[759]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[759]["ID"], 'endDate');
	 $this->assertEquals($ws[760]["NS"], 14);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertContains('', $ws[760]["WIKI"]);
	 $this->assertEquals($ws[760]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[760]["ID"], 'Project');
	 $this->assertEquals($ws[761]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[761]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode27]]', $ws[761]["WIKI"]);
	 $this->assertEquals($ws[761]["PAGENAME"], 'Herausgeber');
	 $this->assertEquals($ws[761]["ID"], 'publisher');
	 $this->assertEquals($ws[762]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[762]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[762]["WIKI"]);
	 $this->assertEquals($ws[762]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[762]["ID"], 'title');
	 $this->assertEquals($ws[763]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[763]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[763]["WIKI"]);
	 $this->assertEquals($ws[763]["PAGENAME"], 'Beziehung');
	 $this->assertEquals($ws[763]["ID"], 'relation');
	 $this->assertEquals($ws[764]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[764]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[764]["WIKI"]);
	 $this->assertEquals($ws[764]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[764]["ID"], 'date');
	 $this->assertEquals($ws[765]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[765]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[765]["WIKI"]);
	 $this->assertEquals($ws[765]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[765]["ID"], 'source');
	 $this->assertEquals($ws[766]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[766]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[766]["WIKI"]);
	 $this->assertEquals($ws[766]["PAGENAME"], 'Format');
	 $this->assertEquals($ws[766]["ID"], 'format');
	 $this->assertEquals($ws[767]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[767]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Organisation]]', $ws[767]["WIKI"]);
	 $this->assertEquals($ws[767]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[767]["ID"], 'organization');
	 $this->assertEquals($ws[768]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[768]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[768]["WIKI"]);
	 $this->assertEquals($ws[768]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[768]["ID"], 'subject');
	 $this->assertEquals($ws[769]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[769]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[769]["WIKI"]);
	 $this->assertEquals($ws[769]["PAGENAME"], 'InhaltlicheBeschreibung');
	 $this->assertEquals($ws[769]["ID"], 'description');
	 $this->assertEquals($ws[770]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[770]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[770]["WIKI"]);
	 $this->assertEquals($ws[770]["PAGENAME"], 'RechtlicheBedingungen');
	 $this->assertEquals($ws[770]["ID"], 'rights');
	 $this->assertEquals($ws[771]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[771]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode40]]', $ws[771]["WIKI"]);
	 $this->assertEquals($ws[771]["PAGENAME"], 'Beteiligter');
	 $this->assertEquals($ws[771]["ID"], 'contributor');
	 $this->assertEquals($ws[772]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[772]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[772]["WIKI"]);
	 $this->assertEquals($ws[772]["PAGENAME"], 'Sprache');
	 $this->assertEquals($ws[772]["ID"], 'language');
	 $this->assertEquals($ws[773]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[773]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[773]["WIKI"]);
	 $this->assertEquals($ws[773]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[773]["ID"], 'identifier');
	 $this->assertEquals($ws[774]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[774]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[774]["WIKI"]);
	 $this->assertEquals($ws[774]["PAGENAME"], 'Abdeckungsspektrum');
	 $this->assertEquals($ws[774]["ID"], 'coverage');
	 $this->assertEquals($ws[775]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[775]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode47]]', $ws[775]["WIKI"]);
	 $this->assertEquals($ws[775]["PAGENAME"], 'Urheber');
	 $this->assertEquals($ws[775]["ID"], 'creator');
	 $this->assertEquals($ws[776]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[776]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[776]["WIKI"]);
	 $this->assertEquals($ws[776]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[776]["ID"], 'type');
	 $this->assertEquals($ws[777]["NS"], 14);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertContains('', $ws[777]["WIKI"]);
	 $this->assertEquals($ws[777]["PAGENAME"], 'Dokument');
	 $this->assertEquals($ws[777]["ID"], 'Document');
	 $this->assertEquals($ws[778]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[778]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[778]["WIKI"]);
	 $this->assertEquals($ws[778]["PAGENAME"], 'BeiEreignis');
	 $this->assertEquals($ws[778]["ID"], 'atEvent');
	 $this->assertEquals($ws[779]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[779]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[779]["WIKI"]);
	 $this->assertEquals($ws[779]["PAGENAME"], 'HatTeilEreignis');
	 $this->assertEquals($ws[779]["ID"], 'hasPartEvent');
	 $this->assertEquals($ws[780]["NS"], 14);
	 $this->assertContains('', $ws[780]["WIKI"]);
	 $this->assertContains('', $ws[780]["WIKI"]);
	 $this->assertEquals($ws[780]["PAGENAME"], 'Ereignis');
	 $this->assertEquals($ws[780]["ID"], 'Event');
	 $this->assertEquals($ws[781]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[781]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[781]["WIKI"]);
	 $this->assertEquals($ws[781]["PAGENAME"], 'Preis');
	 $this->assertEquals($ws[781]["ID"], 'price');
	 $this->assertEquals($ws[782]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[782]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:BNode56]]', $ws[782]["WIKI"]);
	 $this->assertEquals($ws[782]["PAGENAME"], 'Verkaeufer');
	 $this->assertEquals($ws[782]["ID"], 'vendor');
	 $this->assertEquals($ws[783]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[783]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:Organisation]]', $ws[783]["WIKI"]);
	 $this->assertEquals($ws[783]["PAGENAME"], 'EntwickeltVon');
	 $this->assertEquals($ws[783]["ID"], 'developedBy');
	 $this->assertEquals($ws[784]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[784]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[784]["WIKI"]);
	 $this->assertEquals($ws[784]["PAGENAME"], 'Herstellungsdatum');
	 $this->assertEquals($ws[784]["ID"], 'creationDate');
	 $this->assertEquals($ws[785]["NS"], 14);
	 $this->assertContains('', $ws[785]["WIKI"]);
	 $this->assertContains('', $ws[785]["WIKI"]);
	 $this->assertContains('', $ws[785]["WIKI"]);
	 $this->assertContains('', $ws[785]["WIKI"]);
	 $this->assertContains('', $ws[785]["WIKI"]);
	 $this->assertEquals($ws[785]["PAGENAME"], 'Produkt');
	 $this->assertEquals($ws[785]["ID"], 'Product');
	 $this->assertEquals($ws[786]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[786]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[786]["WIKI"]);
	 $this->assertEquals($ws[786]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[786]["ID"], 'employs');
	 $this->assertEquals($ws[787]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[787]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[787]["WIKI"]);
	 $this->assertEquals($ws[787]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[787]["ID"], 'technicalReport');
	 $this->assertEquals($ws[788]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[788]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[788]["WIKI"]);
	 $this->assertEquals($ws[788]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[788]["ID"], 'finances');
	 $this->assertEquals($ws[789]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[789]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[789]["WIKI"]);
	 $this->assertEquals($ws[789]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[789]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[790]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[790]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[790]["WIKI"]);
	 $this->assertEquals($ws[790]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[790]["ID"], 'publisherOf');
	 $this->assertEquals($ws[791]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[791]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[791]["WIKI"]);
	 $this->assertEquals($ws[791]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[791]["ID"], 'develops');
	 $this->assertEquals($ws[792]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[792]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[792]["WIKI"]);
	 $this->assertEquals($ws[792]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[792]["ID"], 'carriesOut');
	 $this->assertEquals($ws[793]["NS"], 14);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertContains('', $ws[793]["WIKI"]);
	 $this->assertEquals($ws[793]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[793]["ID"], 'Organization');
	 $this->assertEquals($ws[794]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[794]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[794]["WIKI"]);
	 $this->assertEquals($ws[794]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[794]["ID"], 'lastName');
	 $this->assertEquals($ws[795]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[795]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[795]["WIKI"]);
	 $this->assertEquals($ws[795]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[795]["ID"], 'email');
	 $this->assertEquals($ws[796]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[796]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[796]["WIKI"]);
	 $this->assertEquals($ws[796]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[796]["ID"], 'homepage');
	 $this->assertEquals($ws[797]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[797]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[797]["WIKI"]);
	 $this->assertEquals($ws[797]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[797]["ID"], 'address');
	 $this->assertEquals($ws[798]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[798]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[798]["WIKI"]);
	 $this->assertEquals($ws[798]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[798]["ID"], 'firstName');
	 $this->assertEquals($ws[799]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[799]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[799]["WIKI"]);
	 $this->assertEquals($ws[799]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[799]["ID"], 'phone');
	 $this->assertEquals($ws[800]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[800]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[800]["WIKI"]);
	 $this->assertEquals($ws[800]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[800]["ID"], 'fax');
	 $this->assertEquals($ws[801]["NS"], 14);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertContains('', $ws[801]["WIKI"]);
	 $this->assertEquals($ws[801]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[801]["ID"], 'Person');
	 $this->assertEquals($ws[802]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[802]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[802]["WIKI"]);
	 $this->assertEquals($ws[802]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[802]["ID"], 'employs');
	 $this->assertEquals($ws[803]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[803]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[803]["WIKI"]);
	 $this->assertEquals($ws[803]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[803]["ID"], 'technicalReport');
	 $this->assertEquals($ws[804]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[804]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[804]["WIKI"]);
	 $this->assertEquals($ws[804]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[804]["ID"], 'finances');
	 $this->assertEquals($ws[805]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[805]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[805]["WIKI"]);
	 $this->assertEquals($ws[805]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[805]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[806]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[806]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[806]["WIKI"]);
	 $this->assertEquals($ws[806]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[806]["ID"], 'publisherOf');
	 $this->assertEquals($ws[807]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[807]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[807]["WIKI"]);
	 $this->assertEquals($ws[807]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[807]["ID"], 'develops');
	 $this->assertEquals($ws[808]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[808]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[808]["WIKI"]);
	 $this->assertEquals($ws[808]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[808]["ID"], 'carriesOut');
	 $this->assertEquals($ws[809]["NS"], 14);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertContains('', $ws[809]["WIKI"]);
	 $this->assertEquals($ws[809]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[809]["ID"], 'Organization');
	 $this->assertEquals($ws[810]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[810]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[810]["WIKI"]);
	 $this->assertEquals($ws[810]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[810]["ID"], 'lastName');
	 $this->assertEquals($ws[811]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[811]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[811]["WIKI"]);
	 $this->assertEquals($ws[811]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[811]["ID"], 'email');
	 $this->assertEquals($ws[812]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[812]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[812]["WIKI"]);
	 $this->assertEquals($ws[812]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[812]["ID"], 'homepage');
	 $this->assertEquals($ws[813]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[813]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[813]["WIKI"]);
	 $this->assertEquals($ws[813]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[813]["ID"], 'address');
	 $this->assertEquals($ws[814]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[814]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[814]["WIKI"]);
	 $this->assertEquals($ws[814]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[814]["ID"], 'firstName');
	 $this->assertEquals($ws[815]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[815]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[815]["WIKI"]);
	 $this->assertEquals($ws[815]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[815]["ID"], 'phone');
	 $this->assertEquals($ws[816]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[816]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[816]["WIKI"]);
	 $this->assertEquals($ws[816]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[816]["ID"], 'fax');
	 $this->assertEquals($ws[817]["NS"], 14);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertContains('', $ws[817]["WIKI"]);
	 $this->assertEquals($ws[817]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[817]["ID"], 'Person');
	 $this->assertEquals($ws[818]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[818]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[818]["WIKI"]);
	 $this->assertEquals($ws[818]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[818]["ID"], 'lastName');
	 $this->assertEquals($ws[819]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[819]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[819]["WIKI"]);
	 $this->assertEquals($ws[819]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[819]["ID"], 'email');
	 $this->assertEquals($ws[820]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[820]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[820]["WIKI"]);
	 $this->assertEquals($ws[820]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[820]["ID"], 'homepage');
	 $this->assertEquals($ws[821]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[821]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[821]["WIKI"]);
	 $this->assertEquals($ws[821]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[821]["ID"], 'address');
	 $this->assertEquals($ws[822]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[822]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[822]["WIKI"]);
	 $this->assertEquals($ws[822]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[822]["ID"], 'firstName');
	 $this->assertEquals($ws[823]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[823]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[823]["WIKI"]);
	 $this->assertEquals($ws[823]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[823]["ID"], 'phone');
	 $this->assertEquals($ws[824]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[824]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[824]["WIKI"]);
	 $this->assertEquals($ws[824]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[824]["ID"], 'fax');
	 $this->assertEquals($ws[825]["NS"], 14);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertContains('', $ws[825]["WIKI"]);
	 $this->assertEquals($ws[825]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[825]["ID"], 'Person');
	 $this->assertEquals($ws[826]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[826]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[826]["WIKI"]);
	 $this->assertEquals($ws[826]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[826]["ID"], 'employs');
	 $this->assertEquals($ws[827]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[827]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[827]["WIKI"]);
	 $this->assertEquals($ws[827]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[827]["ID"], 'technicalReport');
	 $this->assertEquals($ws[828]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[828]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[828]["WIKI"]);
	 $this->assertEquals($ws[828]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[828]["ID"], 'finances');
	 $this->assertEquals($ws[829]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[829]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[829]["WIKI"]);
	 $this->assertEquals($ws[829]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[829]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[830]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[830]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[830]["WIKI"]);
	 $this->assertEquals($ws[830]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[830]["ID"], 'publisherOf');
	 $this->assertEquals($ws[831]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[831]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[831]["WIKI"]);
	 $this->assertEquals($ws[831]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[831]["ID"], 'develops');
	 $this->assertEquals($ws[832]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[832]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[832]["WIKI"]);
	 $this->assertEquals($ws[832]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[832]["ID"], 'carriesOut');
	 $this->assertEquals($ws[833]["NS"], 14);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertContains('', $ws[833]["WIKI"]);
	 $this->assertEquals($ws[833]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[833]["ID"], 'Organization');
	 $this->assertEquals($ws[834]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[834]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode27]]', $ws[834]["WIKI"]);
	 $this->assertEquals($ws[834]["PAGENAME"], 'Herausgeber');
	 $this->assertEquals($ws[834]["ID"], 'publisher');
	 $this->assertEquals($ws[835]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[835]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[835]["WIKI"]);
	 $this->assertEquals($ws[835]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[835]["ID"], 'title');
	 $this->assertEquals($ws[836]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[836]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[836]["WIKI"]);
	 $this->assertEquals($ws[836]["PAGENAME"], 'Beziehung');
	 $this->assertEquals($ws[836]["ID"], 'relation');
	 $this->assertEquals($ws[837]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[837]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[837]["WIKI"]);
	 $this->assertEquals($ws[837]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[837]["ID"], 'date');
	 $this->assertEquals($ws[838]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[838]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[838]["WIKI"]);
	 $this->assertEquals($ws[838]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[838]["ID"], 'source');
	 $this->assertEquals($ws[839]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[839]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[839]["WIKI"]);
	 $this->assertEquals($ws[839]["PAGENAME"], 'Format');
	 $this->assertEquals($ws[839]["ID"], 'format');
	 $this->assertEquals($ws[840]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[840]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Organisation]]', $ws[840]["WIKI"]);
	 $this->assertEquals($ws[840]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[840]["ID"], 'organization');
	 $this->assertEquals($ws[841]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[841]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[841]["WIKI"]);
	 $this->assertEquals($ws[841]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[841]["ID"], 'subject');
	 $this->assertEquals($ws[842]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[842]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[842]["WIKI"]);
	 $this->assertEquals($ws[842]["PAGENAME"], 'InhaltlicheBeschreibung');
	 $this->assertEquals($ws[842]["ID"], 'description');
	 $this->assertEquals($ws[843]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[843]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[843]["WIKI"]);
	 $this->assertEquals($ws[843]["PAGENAME"], 'RechtlicheBedingungen');
	 $this->assertEquals($ws[843]["ID"], 'rights');
	 $this->assertEquals($ws[844]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[844]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode40]]', $ws[844]["WIKI"]);
	 $this->assertEquals($ws[844]["PAGENAME"], 'Beteiligter');
	 $this->assertEquals($ws[844]["ID"], 'contributor');
	 $this->assertEquals($ws[845]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[845]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[845]["WIKI"]);
	 $this->assertEquals($ws[845]["PAGENAME"], 'Sprache');
	 $this->assertEquals($ws[845]["ID"], 'language');
	 $this->assertEquals($ws[846]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[846]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[846]["WIKI"]);
	 $this->assertEquals($ws[846]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[846]["ID"], 'identifier');
	 $this->assertEquals($ws[847]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[847]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[847]["WIKI"]);
	 $this->assertEquals($ws[847]["PAGENAME"], 'Abdeckungsspektrum');
	 $this->assertEquals($ws[847]["ID"], 'coverage');
	 $this->assertEquals($ws[848]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[848]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode47]]', $ws[848]["WIKI"]);
	 $this->assertEquals($ws[848]["PAGENAME"], 'Urheber');
	 $this->assertEquals($ws[848]["ID"], 'creator');
	 $this->assertEquals($ws[849]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[849]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[849]["WIKI"]);
	 $this->assertEquals($ws[849]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[849]["ID"], 'type');
	 $this->assertEquals($ws[850]["NS"], 14);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertContains('', $ws[850]["WIKI"]);
	 $this->assertEquals($ws[850]["PAGENAME"], 'Dokument');
	 $this->assertEquals($ws[850]["ID"], 'Document');
	 $this->assertEquals($ws[851]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[851]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[851]["WIKI"]);
	 $this->assertEquals($ws[851]["PAGENAME"], 'Preis');
	 $this->assertEquals($ws[851]["ID"], 'price');
	 $this->assertEquals($ws[852]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[852]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:BNode56]]', $ws[852]["WIKI"]);
	 $this->assertEquals($ws[852]["PAGENAME"], 'Verkaeufer');
	 $this->assertEquals($ws[852]["ID"], 'vendor');
	 $this->assertEquals($ws[853]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[853]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:Organisation]]', $ws[853]["WIKI"]);
	 $this->assertEquals($ws[853]["PAGENAME"], 'EntwickeltVon');
	 $this->assertEquals($ws[853]["ID"], 'developedBy');
	 $this->assertEquals($ws[854]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[854]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Produkt]]', $ws[854]["WIKI"]);
	 $this->assertEquals($ws[854]["PAGENAME"], 'Herstellungsdatum');
	 $this->assertEquals($ws[854]["ID"], 'creationDate');
	 $this->assertEquals($ws[855]["NS"], 14);
	 $this->assertContains('', $ws[855]["WIKI"]);
	 $this->assertContains('', $ws[855]["WIKI"]);
	 $this->assertContains('', $ws[855]["WIKI"]);
	 $this->assertContains('', $ws[855]["WIKI"]);
	 $this->assertContains('', $ws[855]["WIKI"]);
	 $this->assertEquals($ws[855]["PAGENAME"], 'Produkt');
	 $this->assertEquals($ws[855]["ID"], 'Product');
	 $this->assertEquals($ws[856]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[856]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Person]]', $ws[856]["WIKI"]);
	 $this->assertEquals($ws[856]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[856]["ID"], 'member');
	 $this->assertEquals($ws[857]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[857]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[857]["WIKI"]);
	 $this->assertEquals($ws[857]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[857]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[858]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[858]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Mitarbeiter]]', $ws[858]["WIKI"]);
	 $this->assertEquals($ws[858]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[858]["ID"], 'head');
	 $this->assertEquals($ws[859]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[859]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Publikation]]', $ws[859]["WIKI"]);
	 $this->assertEquals($ws[859]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[859]["ID"], 'projectInfo');
	 $this->assertEquals($ws[860]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[860]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[860]["WIKI"]);
	 $this->assertEquals($ws[860]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[860]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[861]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[861]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Thema]]', $ws[861]["WIKI"]);
	 $this->assertEquals($ws[861]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[861]["ID"], 'isAbout');
	 $this->assertEquals($ws[862]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[862]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[862]["WIKI"]);
	 $this->assertEquals($ws[862]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[862]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[863]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[863]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[863]["WIKI"]);
	 $this->assertEquals($ws[863]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[863]["ID"], 'status');
	 $this->assertEquals($ws[864]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[864]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[864]["WIKI"]);
	 $this->assertEquals($ws[864]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[864]["ID"], 'startDate');
	 $this->assertEquals($ws[865]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[865]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[865]["WIKI"]);
	 $this->assertEquals($ws[865]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[865]["ID"], 'financedBy');
	 $this->assertEquals($ws[866]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[866]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:AnyURI]]', $ws[866]["WIKI"]);
	 $this->assertEquals($ws[866]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[866]["ID"], 'homepage');
	 $this->assertEquals($ws[867]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[867]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Projekt]]', $ws[867]["WIKI"]);
	 $this->assertEquals($ws[867]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[867]["ID"], 'endDate');
	 $this->assertEquals($ws[868]["NS"], 14);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertContains('', $ws[868]["WIKI"]);
	 $this->assertEquals($ws[868]["PAGENAME"], 'Projekt');
	 $this->assertEquals($ws[868]["ID"], 'Project');
	 $this->assertEquals($ws[869]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[869]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[869]["WIKI"]);
	 $this->assertEquals($ws[869]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[869]["ID"], 'lastName');
	 $this->assertEquals($ws[870]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[870]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[870]["WIKI"]);
	 $this->assertEquals($ws[870]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[870]["ID"], 'email');
	 $this->assertEquals($ws[871]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[871]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[871]["WIKI"]);
	 $this->assertEquals($ws[871]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[871]["ID"], 'homepage');
	 $this->assertEquals($ws[872]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[872]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[872]["WIKI"]);
	 $this->assertEquals($ws[872]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[872]["ID"], 'address');
	 $this->assertEquals($ws[873]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[873]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[873]["WIKI"]);
	 $this->assertEquals($ws[873]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[873]["ID"], 'firstName');
	 $this->assertEquals($ws[874]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[874]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[874]["WIKI"]);
	 $this->assertEquals($ws[874]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[874]["ID"], 'phone');
	 $this->assertEquals($ws[875]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[875]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[875]["WIKI"]);
	 $this->assertEquals($ws[875]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[875]["ID"], 'fax');
	 $this->assertEquals($ws[876]["NS"], 14);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertContains('', $ws[876]["WIKI"]);
	 $this->assertEquals($ws[876]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[876]["ID"], 'Person');
	 $this->assertEquals($ws[877]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[877]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[877]["WIKI"]);
	 $this->assertEquals($ws[877]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[877]["ID"], 'employs');
	 $this->assertEquals($ws[878]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[878]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[878]["WIKI"]);
	 $this->assertEquals($ws[878]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[878]["ID"], 'technicalReport');
	 $this->assertEquals($ws[879]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[879]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[879]["WIKI"]);
	 $this->assertEquals($ws[879]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[879]["ID"], 'finances');
	 $this->assertEquals($ws[880]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[880]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[880]["WIKI"]);
	 $this->assertEquals($ws[880]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[880]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[881]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[881]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[881]["WIKI"]);
	 $this->assertEquals($ws[881]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[881]["ID"], 'publisherOf');
	 $this->assertEquals($ws[882]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[882]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[882]["WIKI"]);
	 $this->assertEquals($ws[882]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[882]["ID"], 'develops');
	 $this->assertEquals($ws[883]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[883]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[883]["WIKI"]);
	 $this->assertEquals($ws[883]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[883]["ID"], 'carriesOut');
	 $this->assertEquals($ws[884]["NS"], 14);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertContains('', $ws[884]["WIKI"]);
	 $this->assertEquals($ws[884]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[884]["ID"], 'Organization');
	 $this->assertEquals($ws[885]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[885]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode27]]', $ws[885]["WIKI"]);
	 $this->assertEquals($ws[885]["PAGENAME"], 'Herausgeber');
	 $this->assertEquals($ws[885]["ID"], 'publisher');
	 $this->assertEquals($ws[886]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[886]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[886]["WIKI"]);
	 $this->assertEquals($ws[886]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[886]["ID"], 'title');
	 $this->assertEquals($ws[887]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[887]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[887]["WIKI"]);
	 $this->assertEquals($ws[887]["PAGENAME"], 'Beziehung');
	 $this->assertEquals($ws[887]["ID"], 'relation');
	 $this->assertEquals($ws[888]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Date]]', $ws[888]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[888]["WIKI"]);
	 $this->assertEquals($ws[888]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[888]["ID"], 'date');
	 $this->assertEquals($ws[889]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[889]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[889]["WIKI"]);
	 $this->assertEquals($ws[889]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[889]["ID"], 'source');
	 $this->assertEquals($ws[890]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[890]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[890]["WIKI"]);
	 $this->assertEquals($ws[890]["PAGENAME"], 'Format');
	 $this->assertEquals($ws[890]["ID"], 'format');
	 $this->assertEquals($ws[891]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[891]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Organisation]]', $ws[891]["WIKI"]);
	 $this->assertEquals($ws[891]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[891]["ID"], 'organization');
	 $this->assertEquals($ws[892]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[892]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[892]["WIKI"]);
	 $this->assertEquals($ws[892]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[892]["ID"], 'subject');
	 $this->assertEquals($ws[893]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[893]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[893]["WIKI"]);
	 $this->assertEquals($ws[893]["PAGENAME"], 'InhaltlicheBeschreibung');
	 $this->assertEquals($ws[893]["ID"], 'description');
	 $this->assertEquals($ws[894]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[894]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[894]["WIKI"]);
	 $this->assertEquals($ws[894]["PAGENAME"], 'RechtlicheBedingungen');
	 $this->assertEquals($ws[894]["ID"], 'rights');
	 $this->assertEquals($ws[895]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[895]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode40]]', $ws[895]["WIKI"]);
	 $this->assertEquals($ws[895]["PAGENAME"], 'Beteiligter');
	 $this->assertEquals($ws[895]["ID"], 'contributor');
	 $this->assertEquals($ws[896]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[896]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[896]["WIKI"]);
	 $this->assertEquals($ws[896]["PAGENAME"], 'Sprache');
	 $this->assertEquals($ws[896]["ID"], 'language');
	 $this->assertEquals($ws[897]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[897]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[897]["WIKI"]);
	 $this->assertEquals($ws[897]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[897]["ID"], 'identifier');
	 $this->assertEquals($ws[898]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[898]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[898]["WIKI"]);
	 $this->assertEquals($ws[898]["PAGENAME"], 'Abdeckungsspektrum');
	 $this->assertEquals($ws[898]["ID"], 'coverage');
	 $this->assertEquals($ws[899]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[899]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:BNode47]]', $ws[899]["WIKI"]);
	 $this->assertEquals($ws[899]["PAGENAME"], 'Urheber');
	 $this->assertEquals($ws[899]["ID"], 'creator');
	 $this->assertEquals($ws[900]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[900]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Dokument]]', $ws[900]["WIKI"]);
	 $this->assertEquals($ws[900]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[900]["ID"], 'type');
	 $this->assertEquals($ws[901]["NS"], 14);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertContains('', $ws[901]["WIKI"]);
	 $this->assertEquals($ws[901]["PAGENAME"], 'Dokument');
	 $this->assertEquals($ws[901]["ID"], 'Document');
	 $this->assertEquals($ws[902]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[902]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[902]["WIKI"]);
	 $this->assertEquals($ws[902]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[902]["ID"], 'lastName');
	 $this->assertEquals($ws[903]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[903]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[903]["WIKI"]);
	 $this->assertEquals($ws[903]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[903]["ID"], 'email');
	 $this->assertEquals($ws[904]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[904]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[904]["WIKI"]);
	 $this->assertEquals($ws[904]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[904]["ID"], 'homepage');
	 $this->assertEquals($ws[905]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[905]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[905]["WIKI"]);
	 $this->assertEquals($ws[905]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[905]["ID"], 'address');
	 $this->assertEquals($ws[906]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[906]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[906]["WIKI"]);
	 $this->assertEquals($ws[906]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[906]["ID"], 'firstName');
	 $this->assertEquals($ws[907]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[907]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[907]["WIKI"]);
	 $this->assertEquals($ws[907]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[907]["ID"], 'phone');
	 $this->assertEquals($ws[908]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[908]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[908]["WIKI"]);
	 $this->assertEquals($ws[908]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[908]["ID"], 'fax');
	 $this->assertEquals($ws[909]["NS"], 14);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertContains('', $ws[909]["WIKI"]);
	 $this->assertEquals($ws[909]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[909]["ID"], 'Person');
	 $this->assertEquals($ws[910]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[910]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Vortrag; Category:Person]]', $ws[910]["WIKI"]);
	 $this->assertEquals($ws[910]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[910]["ID"], 'givenBy');
	 $this->assertEquals($ws[911]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[911]["WIKI"]);
	 $this->assertContains('', $ws[911]["WIKI"]);
	 $this->assertEquals($ws[911]["PAGENAME"], 'Vortrag');
	 $this->assertEquals($ws[911]["ID"], 'Lecture');
	 $this->assertEquals($ws[912]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[912]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Seminar; Category:Person]]', $ws[912]["WIKI"]);
	 $this->assertEquals($ws[912]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[912]["ID"], 'participant');
	 $this->assertEquals($ws[913]["NS"], 14);
	 $this->assertContains('[[Category:Ereignis]]', $ws[913]["WIKI"]);
	 $this->assertContains('', $ws[913]["WIKI"]);
	 $this->assertEquals($ws[913]["PAGENAME"], 'Seminar');
	 $this->assertEquals($ws[913]["ID"], 'Seminar');
	 $this->assertEquals($ws[914]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[914]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[914]["WIKI"]);
	 $this->assertEquals($ws[914]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[914]["ID"], 'employs');
	 $this->assertEquals($ws[915]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[915]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[915]["WIKI"]);
	 $this->assertEquals($ws[915]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[915]["ID"], 'technicalReport');
	 $this->assertEquals($ws[916]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[916]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[916]["WIKI"]);
	 $this->assertEquals($ws[916]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[916]["ID"], 'finances');
	 $this->assertEquals($ws[917]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[917]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[917]["WIKI"]);
	 $this->assertEquals($ws[917]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[917]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[918]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[918]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[918]["WIKI"]);
	 $this->assertEquals($ws[918]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[918]["ID"], 'publisherOf');
	 $this->assertEquals($ws[919]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[919]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[919]["WIKI"]);
	 $this->assertEquals($ws[919]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[919]["ID"], 'develops');
	 $this->assertEquals($ws[920]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[920]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[920]["WIKI"]);
	 $this->assertEquals($ws[920]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[920]["ID"], 'carriesOut');
	 $this->assertEquals($ws[921]["NS"], 14);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertContains('', $ws[921]["WIKI"]);
	 $this->assertEquals($ws[921]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[921]["ID"], 'Organization');
	 $this->assertEquals($ws[922]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[922]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[922]["WIKI"]);
	 $this->assertEquals($ws[922]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[922]["ID"], 'lastName');
	 $this->assertEquals($ws[923]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[923]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[923]["WIKI"]);
	 $this->assertEquals($ws[923]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[923]["ID"], 'email');
	 $this->assertEquals($ws[924]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[924]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[924]["WIKI"]);
	 $this->assertEquals($ws[924]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[924]["ID"], 'homepage');
	 $this->assertEquals($ws[925]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[925]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[925]["WIKI"]);
	 $this->assertEquals($ws[925]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[925]["ID"], 'address');
	 $this->assertEquals($ws[926]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[926]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[926]["WIKI"]);
	 $this->assertEquals($ws[926]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[926]["ID"], 'firstName');
	 $this->assertEquals($ws[927]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[927]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[927]["WIKI"]);
	 $this->assertEquals($ws[927]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[927]["ID"], 'phone');
	 $this->assertEquals($ws[928]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[928]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[928]["WIKI"]);
	 $this->assertEquals($ws[928]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[928]["ID"], 'fax');
	 $this->assertEquals($ws[929]["NS"], 14);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertContains('', $ws[929]["WIKI"]);
	 $this->assertEquals($ws[929]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[929]["ID"], 'Person');
	 $this->assertEquals($ws[930]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[930]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[930]["WIKI"]);
	 $this->assertEquals($ws[930]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[930]["ID"], 'employs');
	 $this->assertEquals($ws[931]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[931]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[931]["WIKI"]);
	 $this->assertEquals($ws[931]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[931]["ID"], 'technicalReport');
	 $this->assertEquals($ws[932]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[932]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[932]["WIKI"]);
	 $this->assertEquals($ws[932]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[932]["ID"], 'finances');
	 $this->assertEquals($ws[933]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[933]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[933]["WIKI"]);
	 $this->assertEquals($ws[933]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[933]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[934]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[934]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[934]["WIKI"]);
	 $this->assertEquals($ws[934]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[934]["ID"], 'publisherOf');
	 $this->assertEquals($ws[935]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[935]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[935]["WIKI"]);
	 $this->assertEquals($ws[935]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[935]["ID"], 'develops');
	 $this->assertEquals($ws[936]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[936]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[936]["WIKI"]);
	 $this->assertEquals($ws[936]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[936]["ID"], 'carriesOut');
	 $this->assertEquals($ws[937]["NS"], 14);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertContains('', $ws[937]["WIKI"]);
	 $this->assertEquals($ws[937]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[937]["ID"], 'Organization');
	 $this->assertEquals($ws[938]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[938]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[938]["WIKI"]);
	 $this->assertEquals($ws[938]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[938]["ID"], 'lastName');
	 $this->assertEquals($ws[939]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[939]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[939]["WIKI"]);
	 $this->assertEquals($ws[939]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[939]["ID"], 'email');
	 $this->assertEquals($ws[940]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[940]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[940]["WIKI"]);
	 $this->assertEquals($ws[940]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[940]["ID"], 'homepage');
	 $this->assertEquals($ws[941]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[941]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[941]["WIKI"]);
	 $this->assertEquals($ws[941]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[941]["ID"], 'address');
	 $this->assertEquals($ws[942]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[942]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[942]["WIKI"]);
	 $this->assertEquals($ws[942]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[942]["ID"], 'firstName');
	 $this->assertEquals($ws[943]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[943]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[943]["WIKI"]);
	 $this->assertEquals($ws[943]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[943]["ID"], 'phone');
	 $this->assertEquals($ws[944]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[944]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[944]["WIKI"]);
	 $this->assertEquals($ws[944]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[944]["ID"], 'fax');
	 $this->assertEquals($ws[945]["NS"], 14);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertContains('', $ws[945]["WIKI"]);
	 $this->assertEquals($ws[945]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[945]["ID"], 'Person');
	 $this->assertEquals($ws[946]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[946]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[946]["WIKI"]);
	 $this->assertEquals($ws[946]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[946]["ID"], 'lastName');
	 $this->assertEquals($ws[947]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[947]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[947]["WIKI"]);
	 $this->assertEquals($ws[947]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[947]["ID"], 'email');
	 $this->assertEquals($ws[948]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[948]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[948]["WIKI"]);
	 $this->assertEquals($ws[948]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[948]["ID"], 'homepage');
	 $this->assertEquals($ws[949]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[949]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[949]["WIKI"]);
	 $this->assertEquals($ws[949]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[949]["ID"], 'address');
	 $this->assertEquals($ws[950]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[950]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[950]["WIKI"]);
	 $this->assertEquals($ws[950]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[950]["ID"], 'firstName');
	 $this->assertEquals($ws[951]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[951]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[951]["WIKI"]);
	 $this->assertEquals($ws[951]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[951]["ID"], 'phone');
	 $this->assertEquals($ws[952]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[952]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[952]["WIKI"]);
	 $this->assertEquals($ws[952]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[952]["ID"], 'fax');
	 $this->assertEquals($ws[953]["NS"], 14);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertContains('', $ws[953]["WIKI"]);
	 $this->assertEquals($ws[953]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[953]["ID"], 'Person');
	 $this->assertEquals($ws[954]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[954]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[954]["WIKI"]);
	 $this->assertEquals($ws[954]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[954]["ID"], 'employs');
	 $this->assertEquals($ws[955]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[955]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[955]["WIKI"]);
	 $this->assertEquals($ws[955]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[955]["ID"], 'technicalReport');
	 $this->assertEquals($ws[956]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[956]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[956]["WIKI"]);
	 $this->assertEquals($ws[956]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[956]["ID"], 'finances');
	 $this->assertEquals($ws[957]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[957]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[957]["WIKI"]);
	 $this->assertEquals($ws[957]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[957]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[958]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[958]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[958]["WIKI"]);
	 $this->assertEquals($ws[958]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[958]["ID"], 'publisherOf');
	 $this->assertEquals($ws[959]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[959]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[959]["WIKI"]);
	 $this->assertEquals($ws[959]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[959]["ID"], 'develops');
	 $this->assertEquals($ws[960]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[960]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[960]["WIKI"]);
	 $this->assertEquals($ws[960]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[960]["ID"], 'carriesOut');
	 $this->assertEquals($ws[961]["NS"], 14);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertContains('', $ws[961]["WIKI"]);
	 $this->assertEquals($ws[961]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[961]["ID"], 'Organization');
	 $this->assertEquals($ws[962]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[962]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[962]["WIKI"]);
	 $this->assertEquals($ws[962]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[962]["ID"], 'lastName');
	 $this->assertEquals($ws[963]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[963]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[963]["WIKI"]);
	 $this->assertEquals($ws[963]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[963]["ID"], 'email');
	 $this->assertEquals($ws[964]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[964]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[964]["WIKI"]);
	 $this->assertEquals($ws[964]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[964]["ID"], 'homepage');
	 $this->assertEquals($ws[965]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[965]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[965]["WIKI"]);
	 $this->assertEquals($ws[965]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[965]["ID"], 'address');
	 $this->assertEquals($ws[966]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[966]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[966]["WIKI"]);
	 $this->assertEquals($ws[966]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[966]["ID"], 'firstName');
	 $this->assertEquals($ws[967]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[967]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[967]["WIKI"]);
	 $this->assertEquals($ws[967]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[967]["ID"], 'phone');
	 $this->assertEquals($ws[968]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[968]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[968]["WIKI"]);
	 $this->assertEquals($ws[968]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[968]["ID"], 'fax');
	 $this->assertEquals($ws[969]["NS"], 14);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertContains('', $ws[969]["WIKI"]);
	 $this->assertEquals($ws[969]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[969]["ID"], 'Person');
	 $this->assertEquals($ws[970]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[970]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[970]["WIKI"]);
	 $this->assertEquals($ws[970]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[970]["ID"], 'employs');
	 $this->assertEquals($ws[971]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[971]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[971]["WIKI"]);
	 $this->assertEquals($ws[971]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[971]["ID"], 'technicalReport');
	 $this->assertEquals($ws[972]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[972]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[972]["WIKI"]);
	 $this->assertEquals($ws[972]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[972]["ID"], 'finances');
	 $this->assertEquals($ws[973]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[973]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[973]["WIKI"]);
	 $this->assertEquals($ws[973]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[973]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[974]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[974]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[974]["WIKI"]);
	 $this->assertEquals($ws[974]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[974]["ID"], 'publisherOf');
	 $this->assertEquals($ws[975]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[975]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[975]["WIKI"]);
	 $this->assertEquals($ws[975]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[975]["ID"], 'develops');
	 $this->assertEquals($ws[976]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[976]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[976]["WIKI"]);
	 $this->assertEquals($ws[976]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[976]["ID"], 'carriesOut');
	 $this->assertEquals($ws[977]["NS"], 14);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertContains('', $ws[977]["WIKI"]);
	 $this->assertEquals($ws[977]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[977]["ID"], 'Organization');
	 $this->assertEquals($ws[978]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[978]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[978]["WIKI"]);
	 $this->assertEquals($ws[978]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[978]["ID"], 'lastName');
	 $this->assertEquals($ws[979]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[979]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[979]["WIKI"]);
	 $this->assertEquals($ws[979]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[979]["ID"], 'email');
	 $this->assertEquals($ws[980]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[980]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[980]["WIKI"]);
	 $this->assertEquals($ws[980]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[980]["ID"], 'homepage');
	 $this->assertEquals($ws[981]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[981]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[981]["WIKI"]);
	 $this->assertEquals($ws[981]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[981]["ID"], 'address');
	 $this->assertEquals($ws[982]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[982]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[982]["WIKI"]);
	 $this->assertEquals($ws[982]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[982]["ID"], 'firstName');
	 $this->assertEquals($ws[983]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[983]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[983]["WIKI"]);
	 $this->assertEquals($ws[983]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[983]["ID"], 'phone');
	 $this->assertEquals($ws[984]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[984]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[984]["WIKI"]);
	 $this->assertEquals($ws[984]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[984]["ID"], 'fax');
	 $this->assertEquals($ws[985]["NS"], 14);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertContains('', $ws[985]["WIKI"]);
	 $this->assertEquals($ws[985]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[985]["ID"], 'Person');
	 $this->assertEquals($ws[986]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[986]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[986]["WIKI"]);
	 $this->assertEquals($ws[986]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[986]["ID"], 'employs');
	 $this->assertEquals($ws[987]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[987]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[987]["WIKI"]);
	 $this->assertEquals($ws[987]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[987]["ID"], 'technicalReport');
	 $this->assertEquals($ws[988]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[988]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[988]["WIKI"]);
	 $this->assertEquals($ws[988]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[988]["ID"], 'finances');
	 $this->assertEquals($ws[989]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[989]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[989]["WIKI"]);
	 $this->assertEquals($ws[989]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[989]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[990]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[990]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[990]["WIKI"]);
	 $this->assertEquals($ws[990]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[990]["ID"], 'publisherOf');
	 $this->assertEquals($ws[991]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[991]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[991]["WIKI"]);
	 $this->assertEquals($ws[991]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[991]["ID"], 'develops');
	 $this->assertEquals($ws[992]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[992]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[992]["WIKI"]);
	 $this->assertEquals($ws[992]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[992]["ID"], 'carriesOut');
	 $this->assertEquals($ws[993]["NS"], 14);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertContains('', $ws[993]["WIKI"]);
	 $this->assertEquals($ws[993]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[993]["ID"], 'Organization');
	 $this->assertEquals($ws[994]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[994]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[994]["WIKI"]);
	 $this->assertEquals($ws[994]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[994]["ID"], 'employs');
	 $this->assertEquals($ws[995]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[995]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Technischer Bericht]]', $ws[995]["WIKI"]);
	 $this->assertEquals($ws[995]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[995]["ID"], 'technicalReport');
	 $this->assertEquals($ws[996]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[996]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[996]["WIKI"]);
	 $this->assertEquals($ws[996]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[996]["ID"], 'finances');
	 $this->assertEquals($ws[997]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[997]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Organisation]]', $ws[997]["WIKI"]);
	 $this->assertEquals($ws[997]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[997]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[998]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[998]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Publikation]]', $ws[998]["WIKI"]);
	 $this->assertEquals($ws[998]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[998]["ID"], 'publisherOf');
	 $this->assertEquals($ws[999]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[999]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Produkt]]', $ws[999]["WIKI"]);
	 $this->assertEquals($ws[999]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[999]["ID"], 'develops');
	 $this->assertEquals($ws[1000]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[1000]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[1000]["WIKI"]);
	 $this->assertEquals($ws[1000]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[1000]["ID"], 'carriesOut');
	 $this->assertEquals($ws[1001]["NS"], 14);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertContains('', $ws[1001]["WIKI"]);
	 $this->assertEquals($ws[1001]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[1001]["ID"], 'Organization');
	 $this->assertEquals($ws[1002]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1002]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1002]["WIKI"]);
	 $this->assertEquals($ws[1002]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[1002]["ID"], 'lastName');
	 $this->assertEquals($ws[1003]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1003]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1003]["WIKI"]);
	 $this->assertEquals($ws[1003]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[1003]["ID"], 'email');
	 $this->assertEquals($ws[1004]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[1004]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:AnyURI]]', $ws[1004]["WIKI"]);
	 $this->assertEquals($ws[1004]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[1004]["ID"], 'homepage');
	 $this->assertEquals($ws[1005]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1005]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1005]["WIKI"]);
	 $this->assertEquals($ws[1005]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[1005]["ID"], 'address');
	 $this->assertEquals($ws[1006]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1006]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1006]["WIKI"]);
	 $this->assertEquals($ws[1006]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[1006]["ID"], 'firstName');
	 $this->assertEquals($ws[1007]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1007]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1007]["WIKI"]);
	 $this->assertEquals($ws[1007]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[1007]["ID"], 'phone');
	 $this->assertEquals($ws[1008]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1008]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1008]["WIKI"]);
	 $this->assertEquals($ws[1008]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[1008]["ID"], 'fax');
	 $this->assertEquals($ws[1009]["NS"], 14);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertContains('', $ws[1009]["WIKI"]);
	 $this->assertEquals($ws[1009]["PAGENAME"], 'Person');
	 $this->assertEquals($ws[1009]["ID"], 'Person');
	 $this->assertEquals($ws[1010]["NS"], 102);
	 $this->assertEquals($ws[1010]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[1010]["ID"], 'hasParts');
	 $this->assertEquals($ws[1011]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Person]]', $ws[1011]["WIKI"]);
	 $this->assertEquals($ws[1011]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[1011]["ID"], 'participant');
	 $this->assertEquals($ws[1012]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Person]]', $ws[1012]["WIKI"]);
	 $this->assertEquals($ws[1012]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[1012]["ID"], 'participant');
	 $this->assertEquals($ws[1013]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Person]]', $ws[1013]["WIKI"]);
	 $this->assertEquals($ws[1013]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[1013]["ID"], 'participant');
	 $this->assertEquals($ws[1014]["NS"], 102);
	 $this->assertEquals($ws[1014]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[1014]["ID"], 'hasParts');
	 $this->assertEquals($ws[1015]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Student]]', $ws[1015]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:studiertAn]]', $ws[1015]["WIKI"]);
	 $this->assertEquals($ws[1015]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[1015]["ID"], 'student');
	 $this->assertEquals($ws[1016]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Person]]', $ws[1016]["WIKI"]);
	 $this->assertEquals($ws[1016]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[1016]["ID"], 'participant');
	 $this->assertEquals($ws[1017]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode138; Category:Person]]', $ws[1017]["WIKI"]);
	 $this->assertEquals($ws[1017]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[1017]["ID"], 'givenBy');
	 $this->assertEquals($ws[1018]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Person]]', $ws[1018]["WIKI"]);
	 $this->assertEquals($ws[1018]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[1018]["ID"], 'participant');
	 $this->assertEquals($ws[1019]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Thema; Category:Person]]', $ws[1019]["WIKI"]);
	 $this->assertEquals($ws[1019]["PAGENAME"], 'WirdBearbeitetVon');
	 $this->assertEquals($ws[1019]["ID"], 'isWorkedOnBy');
	 $this->assertEquals($ws[1020]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Thema; Category:Projekt]]', $ws[1020]["WIKI"]);
	 $this->assertEquals($ws[1020]["PAGENAME"], 'BehandeltIn');
	 $this->assertEquals($ws[1020]["ID"], 'dealtWithIn');
	 $this->assertEquals($ws[1021]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Projekt]]', $ws[1021]["WIKI"]);
	 $this->assertEquals($ws[1021]["PAGENAME"], 'ArbeitetAnProjekt');
	 $this->assertEquals($ws[1021]["ID"], 'worksAtProject');
	 $this->assertEquals($ws[1022]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Person]]', $ws[1022]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:hatBetreuer]]', $ws[1022]["WIKI"]);
	 $this->assertEquals($ws[1022]["PAGENAME"], 'Betreut');
	 $this->assertEquals($ws[1022]["ID"], 'supervises');
	 $this->assertEquals($ws[1023]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Forschungsgruppe]]', $ws[1023]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:leiter]]', $ws[1023]["WIKI"]);
	 $this->assertEquals($ws[1023]["PAGENAME"], 'LeiterVonGruppe');
	 $this->assertEquals($ws[1023]["ID"], 'headOfGroup');
	 $this->assertEquals($ws[1024]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode132; Category:Dokument]]', $ws[1024]["WIKI"]);
	 $this->assertEquals($ws[1024]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[1024]["ID"], 'publication');
	 $this->assertEquals($ws[1025]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1025]["WIKI"]);
	 $this->assertEquals($ws[1025]["PAGENAME"], 'Editor');
	 $this->assertEquals($ws[1025]["ID"], 'editor');
	 $this->assertEquals($ws[1026]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1026]["WIKI"]);
	 $this->assertEquals($ws[1026]["PAGENAME"], 'MitgliedVonPC');
	 $this->assertEquals($ws[1026]["ID"], 'memberOfPC');
	 $this->assertEquals($ws[1027]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Ereignis]]', $ws[1027]["WIKI"]);
	 $this->assertEquals($ws[1027]["PAGENAME"], 'VeranstalterOderVorsitzenderVon');
	 $this->assertEquals($ws[1027]["ID"], 'organizerOrChairOf');
	 $this->assertEquals($ws[1028]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:bNode105]]', $ws[1028]["WIKI"]);
	 $this->assertEquals($ws[1028]["PAGENAME"], 'LeiterVon');
	 $this->assertEquals($ws[1028]["ID"], 'headOf');
	 $this->assertEquals($ws[1029]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Organisation]]', $ws[1029]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:beschaeftigt]]', $ws[1029]["WIKI"]);
	 $this->assertEquals($ws[1029]["PAGENAME"], 'Zugehoerigkeit');
	 $this->assertEquals($ws[1029]["ID"], 'affiliation');
	 $this->assertEquals($ws[1030]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Person]]', $ws[1030]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:leiterVonGruppe]]', $ws[1030]["WIKI"]);
	 $this->assertEquals($ws[1030]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[1030]["ID"], 'head');
	 $this->assertEquals($ws[1031]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:bNode96]]', $ws[1031]["WIKI"]);
	 $this->assertEquals($ws[1031]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[1031]["ID"], 'member');
	 $this->assertEquals($ws[1032]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:bNode102]]', $ws[1032]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:herausgeberVon]]', $ws[1032]["WIKI"]);
	 $this->assertEquals($ws[1032]["PAGENAME"], 'Herausgeber');
	 $this->assertEquals($ws[1032]["ID"], 'publisher');
	 $this->assertEquals($ws[1033]["NS"], 102);
	 $this->assertEquals($ws[1033]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[1033]["ID"], 'organization');
	 $this->assertEquals($ws[1034]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode128; Category:bNode125]]', $ws[1034]["WIKI"]);
	 $this->assertEquals($ws[1034]["PAGENAME"], 'Beteiligter');
	 $this->assertEquals($ws[1034]["ID"], 'contributor');
	 $this->assertEquals($ws[1035]["NS"], 102);
	 $this->assertEquals($ws[1035]["PAGENAME"], 'Urheber');
	 $this->assertEquals($ws[1035]["ID"], 'creator');
	 $this->assertEquals($ws[1036]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Projekt]]', $ws[1036]["WIKI"]);
	 $this->assertEquals($ws[1036]["PAGENAME"], 'ArbeitetAnProjekt');
	 $this->assertEquals($ws[1036]["ID"], 'worksAtProject');
	 $this->assertEquals($ws[1037]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Person]]', $ws[1037]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:betreut]]', $ws[1037]["WIKI"]);
	 $this->assertEquals($ws[1037]["PAGENAME"], 'HatBetreuer');
	 $this->assertEquals($ws[1037]["ID"], 'supervisor');
	 $this->assertEquals($ws[1038]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode132; Category:Dokument]]', $ws[1038]["WIKI"]);
	 $this->assertEquals($ws[1038]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[1038]["ID"], 'publication');
	 $this->assertEquals($ws[1039]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:bNode108]]', $ws[1039]["WIKI"]);
	 $this->assertEquals($ws[1039]["PAGENAME"], 'Verkaeufer');
	 $this->assertEquals($ws[1039]["ID"], 'vendor');
	 $this->assertEquals($ws[1040]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:bNode144]]', $ws[1040]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:entwickelt]]', $ws[1040]["WIKI"]);
	 $this->assertEquals($ws[1040]["PAGENAME"], 'EntwickeltVon');
	 $this->assertEquals($ws[1040]["ID"], 'developedBy');
	 $this->assertEquals($ws[1041]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[1041]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zugehoerigkeit]]', $ws[1041]["WIKI"]);
	 $this->assertEquals($ws[1041]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[1041]["ID"], 'employs');
	 $this->assertEquals($ws[1042]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode111; Category:technischer_Bericht]]', $ws[1042]["WIKI"]);
	 $this->assertEquals($ws[1042]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[1042]["ID"], 'technicalReport');
	 $this->assertEquals($ws[1043]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[1043]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:finanziertVon]]', $ws[1043]["WIKI"]);
	 $this->assertEquals($ws[1043]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[1043]["ID"], 'finances');
	 $this->assertEquals($ws[1044]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode119; Category:Dokument]]', $ws[1044]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:herausgeber]]', $ws[1044]["WIKI"]);
	 $this->assertEquals($ws[1044]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[1044]["ID"], 'publisherOf');
	 $this->assertEquals($ws[1045]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode141; Category:Produkt]]', $ws[1045]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:entwickeltVon]]', $ws[1045]["WIKI"]);
	 $this->assertEquals($ws[1045]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[1045]["ID"], 'develops');
	 $this->assertEquals($ws[1046]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode122; Category:Projekt]]', $ws[1046]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:durchgefuehrtVon]]', $ws[1046]["WIKI"]);
	 $this->assertEquals($ws[1046]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[1046]["ID"], 'carriesOut');
	 $this->assertEquals($ws[1047]["NS"], 102);
	 $this->assertEquals($ws[1047]["PAGENAME"], 'Schule');
	 $this->assertEquals($ws[1047]["ID"], 'school');
	 $this->assertEquals($ws[1048]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode135; Category:Dokument]]', $ws[1048]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zitiertVon]]', $ws[1048]["WIKI"]);
	 $this->assertEquals($ws[1048]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[1048]["ID"], 'cite');
	 $this->assertEquals($ws[1049]["NS"], 102);
	 $this->assertEquals($ws[1049]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[1049]["ID"], 'hasParts');
	 $this->assertEquals($ws[1050]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Person]]', $ws[1050]["WIKI"]);
	 $this->assertEquals($ws[1050]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[1050]["ID"], 'participant');
	 $this->assertEquals($ws[1051]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Student; Category:Unversität]]', $ws[1051]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:student]]', $ws[1051]["WIKI"]);
	 $this->assertEquals($ws[1051]["PAGENAME"], 'StudiertAn');
	 $this->assertEquals($ws[1051]["ID"], 'studiesAt');
	 $this->assertEquals($ws[1052]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:bNode96]]', $ws[1052]["WIKI"]);
	 $this->assertEquals($ws[1052]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[1052]["ID"], 'member');
	 $this->assertEquals($ws[1053]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[1053]["WIKI"]);
	 $this->assertEquals($ws[1053]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[1053]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[1054]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Person]]', $ws[1054]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:leiterVonGruppe]]', $ws[1054]["WIKI"]);
	 $this->assertEquals($ws[1054]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[1054]["ID"], 'head');
	 $this->assertEquals($ws[1055]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[1055]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:beschreibtProjekt]]', $ws[1055]["WIKI"]);
	 $this->assertEquals($ws[1055]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[1055]["ID"], 'projectInfo');
	 $this->assertEquals($ws[1056]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[1056]["WIKI"]);
	 $this->assertEquals($ws[1056]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[1056]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[1057]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode114; Category:Thema]]', $ws[1057]["WIKI"]);
	 $this->assertEquals($ws[1057]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[1057]["ID"], 'isAbout');
	 $this->assertEquals($ws[1058]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:bNode93]]', $ws[1058]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:durchfuehren]]', $ws[1058]["WIKI"]);
	 $this->assertEquals($ws[1058]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[1058]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[1059]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[1059]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:finanziert]]', $ws[1059]["WIKI"]);
	 $this->assertEquals($ws[1059]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[1059]["ID"], 'financedBy');
	 $this->assertEquals($ws[1060]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Projekt]]', $ws[1060]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:projektInfo]]', $ws[1060]["WIKI"]);
	 $this->assertEquals($ws[1060]["PAGENAME"], 'BeschreibtProjekt');
	 $this->assertEquals($ws[1060]["ID"], 'describesProject');
	 $this->assertEquals($ws[1061]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Projekt]]', $ws[1061]["WIKI"]);
	 $this->assertEquals($ws[1061]["PAGENAME"], 'ArbeitetAnProjekt');
	 $this->assertEquals($ws[1061]["ID"], 'worksAtProject');
	 $this->assertEquals($ws[1062]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:bNode93]]', $ws[1062]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:durchfuehren]]', $ws[1062]["WIKI"]);
	 $this->assertEquals($ws[1062]["PAGENAME"], 'DurchgefuehrtVon');
	 $this->assertEquals($ws[1062]["ID"], 'carriedOutBy');
	 $this->assertEquals($ws[1063]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode122; Category:Projekt]]', $ws[1063]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:durchgefuehrtVon]]', $ws[1063]["WIKI"]);
	 $this->assertEquals($ws[1063]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[1063]["ID"], 'carriesOut');
	 $this->assertEquals($ws[1064]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1064]["WIKI"]);
	 $this->assertEquals($ws[1064]["PAGENAME"], 'Editor');
	 $this->assertEquals($ws[1064]["ID"], 'editor');
	 $this->assertEquals($ws[1065]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:bNode96]]', $ws[1065]["WIKI"]);
	 $this->assertEquals($ws[1065]["PAGENAME"], 'HatMitglied');
	 $this->assertEquals($ws[1065]["ID"], 'member');
	 $this->assertEquals($ws[1066]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:bNode99]]', $ws[1066]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zitiert]]', $ws[1066]["WIKI"]);
	 $this->assertEquals($ws[1066]["PAGENAME"], 'ZitiertVon');
	 $this->assertEquals($ws[1066]["ID"], 'citedBy');
	 $this->assertEquals($ws[1067]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode135; Category:Dokument]]', $ws[1067]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zitiertVon]]', $ws[1067]["WIKI"]);
	 $this->assertEquals($ws[1067]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[1067]["ID"], 'cite');
	 $this->assertEquals($ws[1068]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Student; Category:Unversität]]', $ws[1068]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:student]]', $ws[1068]["WIKI"]);
	 $this->assertEquals($ws[1068]["PAGENAME"], 'StudiertAn');
	 $this->assertEquals($ws[1068]["ID"], 'studiesAt');
	 $this->assertEquals($ws[1069]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Student]]', $ws[1069]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:studiertAn]]', $ws[1069]["WIKI"]);
	 $this->assertEquals($ws[1069]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[1069]["ID"], 'student');
	 $this->assertEquals($ws[1070]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:bNode102]]', $ws[1070]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:herausgeberVon]]', $ws[1070]["WIKI"]);
	 $this->assertEquals($ws[1070]["PAGENAME"], 'Herausgeber');
	 $this->assertEquals($ws[1070]["ID"], 'publisher');
	 $this->assertEquals($ws[1071]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode119; Category:Dokument]]', $ws[1071]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:herausgeber]]', $ws[1071]["WIKI"]);
	 $this->assertEquals($ws[1071]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[1071]["ID"], 'publisherOf');
	 $this->assertEquals($ws[1072]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Organisation]]', $ws[1072]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:beschaeftigt]]', $ws[1072]["WIKI"]);
	 $this->assertEquals($ws[1072]["PAGENAME"], 'Zugehoerigkeit');
	 $this->assertEquals($ws[1072]["ID"], 'affiliation');
	 $this->assertEquals($ws[1073]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[1073]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zugehoerigkeit]]', $ws[1073]["WIKI"]);
	 $this->assertEquals($ws[1073]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[1073]["ID"], 'employs');
	 $this->assertEquals($ws[1074]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Person]]', $ws[1074]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zugehoerigkeit]]', $ws[1074]["WIKI"]);
	 $this->assertEquals($ws[1074]["PAGENAME"], 'Beschaeftigt');
	 $this->assertEquals($ws[1074]["ID"], 'employs');
	 $this->assertEquals($ws[1075]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:bNode105]]', $ws[1075]["WIKI"]);
	 $this->assertEquals($ws[1075]["PAGENAME"], 'LeiterVon');
	 $this->assertEquals($ws[1075]["ID"], 'headOf');
	 $this->assertEquals($ws[1076]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:bNode108]]', $ws[1076]["WIKI"]);
	 $this->assertEquals($ws[1076]["PAGENAME"], 'Verkaeufer');
	 $this->assertEquals($ws[1076]["ID"], 'vendor');
	 $this->assertEquals($ws[1077]["NS"], 102);
	 $this->assertEquals($ws[1077]["PAGENAME"], 'Wurzel');
	 $this->assertEquals($ws[1077]["ID"], 'Root');
	 $this->assertEquals($ws[1078]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode111; Category:technischer_Bericht]]', $ws[1078]["WIKI"]);
	 $this->assertEquals($ws[1078]["PAGENAME"], 'Fachbericht');
	 $this->assertEquals($ws[1078]["ID"], 'technicalReport');
	 $this->assertEquals($ws[1079]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode114; Category:Thema]]', $ws[1079]["WIKI"]);
	 $this->assertEquals($ws[1079]["PAGENAME"], 'Ueber');
	 $this->assertEquals($ws[1079]["ID"], 'isAbout');
	 $this->assertEquals($ws[1080]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Thema; Category:Projekt]]', $ws[1080]["WIKI"]);
	 $this->assertEquals($ws[1080]["PAGENAME"], 'BehandeltIn');
	 $this->assertEquals($ws[1080]["ID"], 'dealtWithIn');
	 $this->assertEquals($ws[1081]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Person]]', $ws[1081]["WIKI"]);
	 $this->assertEquals($ws[1081]["PAGENAME"], 'Teilnehmer');
	 $this->assertEquals($ws[1081]["ID"], 'participant');
	 $this->assertEquals($ws[1082]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode119; Category:Dokument]]', $ws[1082]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:herausgeber]]', $ws[1082]["WIKI"]);
	 $this->assertEquals($ws[1082]["PAGENAME"], 'HerausgeberVon');
	 $this->assertEquals($ws[1082]["ID"], 'publisherOf');
	 $this->assertEquals($ws[1083]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[1083]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:beschreibtProjekt]]', $ws[1083]["WIKI"]);
	 $this->assertEquals($ws[1083]["PAGENAME"], 'ProjektInfo');
	 $this->assertEquals($ws[1083]["ID"], 'projectInfo');
	 $this->assertEquals($ws[1084]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Projekt]]', $ws[1084]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:projektInfo]]', $ws[1084]["WIKI"]);
	 $this->assertEquals($ws[1084]["PAGENAME"], 'BeschreibtProjekt');
	 $this->assertEquals($ws[1084]["ID"], 'describesProject');
	 $this->assertEquals($ws[1085]["NS"], 102);
	 $this->assertEquals($ws[1085]["PAGENAME"], 'Schule');
	 $this->assertEquals($ws[1085]["ID"], 'school');
	 $this->assertEquals($ws[1086]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Thema; Category:Person]]', $ws[1086]["WIKI"]);
	 $this->assertEquals($ws[1086]["PAGENAME"], 'WirdBearbeitetVon');
	 $this->assertEquals($ws[1086]["ID"], 'isWorkedOnBy');
	 $this->assertEquals($ws[1087]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Organisation]]', $ws[1087]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:finanziert]]', $ws[1087]["WIKI"]);
	 $this->assertEquals($ws[1087]["PAGENAME"], 'FinanziertVon');
	 $this->assertEquals($ws[1087]["ID"], 'financedBy');
	 $this->assertEquals($ws[1088]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[1088]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:finanziertVon]]', $ws[1088]["WIKI"]);
	 $this->assertEquals($ws[1088]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[1088]["ID"], 'finances');
	 $this->assertEquals($ws[1089]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Dokument; Category:Projekt]]', $ws[1089]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:projektInfo]]', $ws[1089]["WIKI"]);
	 $this->assertEquals($ws[1089]["PAGENAME"], 'BeschreibtProjekt');
	 $this->assertEquals($ws[1089]["ID"], 'describesProject');
	 $this->assertEquals($ws[1090]["NS"], 102);
	 $this->assertEquals($ws[1090]["PAGENAME"], 'Produkt');
	 $this->assertEquals($ws[1090]["ID"], 'product');
	 $this->assertEquals($ws[1091]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode122; Category:Projekt]]', $ws[1091]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:durchgefuehrtVon]]', $ws[1091]["WIKI"]);
	 $this->assertEquals($ws[1091]["PAGENAME"], 'Durchfuehren');
	 $this->assertEquals($ws[1091]["ID"], 'carriesOut');
	 $this->assertEquals($ws[1092]["NS"], 102);
	 $this->assertEquals($ws[1092]["PAGENAME"], 'Einrichtung');
	 $this->assertEquals($ws[1092]["ID"], 'institution');
	 $this->assertEquals($ws[1093]["NS"], 102);
	 $this->assertEquals($ws[1093]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[1093]["ID"], 'organization');
	 $this->assertEquals($ws[1094]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode128; Category:bNode125]]', $ws[1094]["WIKI"]);
	 $this->assertEquals($ws[1094]["PAGENAME"], 'Beteiligter');
	 $this->assertEquals($ws[1094]["ID"], 'contributor');
	 $this->assertEquals($ws[1095]["NS"], 102);
	 $this->assertEquals($ws[1095]["PAGENAME"], 'Urheber');
	 $this->assertEquals($ws[1095]["ID"], 'creator');
	 $this->assertEquals($ws[1096]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Dokument]]', $ws[1096]["WIKI"]);
	 $this->assertEquals($ws[1096]["PAGENAME"], 'ErgebnisDokument');
	 $this->assertEquals($ws[1096]["ID"], 'outcomeDocument');
	 $this->assertEquals($ws[1097]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Person]]', $ws[1097]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:betreut]]', $ws[1097]["WIKI"]);
	 $this->assertEquals($ws[1097]["PAGENAME"], 'HatBetreuer');
	 $this->assertEquals($ws[1097]["ID"], 'supervisor');
	 $this->assertEquals($ws[1098]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Person]]', $ws[1098]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:hatBetreuer]]', $ws[1098]["WIKI"]);
	 $this->assertEquals($ws[1098]["PAGENAME"], 'Betreut');
	 $this->assertEquals($ws[1098]["ID"], 'supervises');
	 $this->assertEquals($ws[1099]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Unversität; Category:Student]]', $ws[1099]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:studiertAn]]', $ws[1099]["WIKI"]);
	 $this->assertEquals($ws[1099]["PAGENAME"], 'Student');
	 $this->assertEquals($ws[1099]["ID"], 'student');
	 $this->assertEquals($ws[1100]["NS"], 102);
	 $this->assertEquals($ws[1100]["PAGENAME"], 'Organisation');
	 $this->assertEquals($ws[1100]["ID"], 'organization');
	 $this->assertEquals($ws[1101]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Organisation; Category:Projekt]]', $ws[1101]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:finanziertVon]]', $ws[1101]["WIKI"]);
	 $this->assertEquals($ws[1101]["PAGENAME"], 'Finanziert');
	 $this->assertEquals($ws[1101]["ID"], 'finances');
	 $this->assertEquals($ws[1102]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Person]]', $ws[1102]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:hatBetreuer]]', $ws[1102]["WIKI"]);
	 $this->assertEquals($ws[1102]["PAGENAME"], 'Betreut');
	 $this->assertEquals($ws[1102]["ID"], 'supervises');
	 $this->assertEquals($ws[1103]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode132; Category:Dokument]]', $ws[1103]["WIKI"]);
	 $this->assertEquals($ws[1103]["PAGENAME"], 'Publikation');
	 $this->assertEquals($ws[1103]["ID"], 'publication');
	 $this->assertEquals($ws[1104]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Projekt; Category:Produkt]]', $ws[1104]["WIKI"]);
	 $this->assertEquals($ws[1104]["PAGENAME"], 'ErgebnisProdukt');
	 $this->assertEquals($ws[1104]["ID"], 'outcomeProduct');
	 $this->assertEquals($ws[1105]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Ereignis]]', $ws[1105]["WIKI"]);
	 $this->assertEquals($ws[1105]["PAGENAME"], 'VeranstalterOderVorsitzenderVon');
	 $this->assertEquals($ws[1105]["ID"], 'organizerOrChairOf');
	 $this->assertEquals($ws[1106]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode135; Category:Dokument]]', $ws[1106]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zitiertVon]]', $ws[1106]["WIKI"]);
	 $this->assertEquals($ws[1106]["PAGENAME"], 'Zitiert');
	 $this->assertEquals($ws[1106]["ID"], 'cite');
	 $this->assertEquals($ws[1107]["NS"], 102);
	 $this->assertEquals($ws[1107]["PAGENAME"], 'WurzelRelation');
	 $this->assertEquals($ws[1107]["ID"], 'RootRelation');
	 $this->assertEquals($ws[1108]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person; Category:Forschungsgruppe]]', $ws[1108]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:leiter]]', $ws[1108]["WIKI"]);
	 $this->assertEquals($ws[1108]["PAGENAME"], 'LeiterVonGruppe');
	 $this->assertEquals($ws[1108]["ID"], 'headOfGroup');
	 $this->assertEquals($ws[1109]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Person]]', $ws[1109]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:leiterVonGruppe]]', $ws[1109]["WIKI"]);
	 $this->assertEquals($ws[1109]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[1109]["ID"], 'head');
	 $this->assertEquals($ws[1110]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode138; Category:Person]]', $ws[1110]["WIKI"]);
	 $this->assertEquals($ws[1110]["PAGENAME"], 'GehaltenVon');
	 $this->assertEquals($ws[1110]["ID"], 'givenBy');
	 $this->assertEquals($ws[1111]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Forschungsgruppe; Category:Person]]', $ws[1111]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:leiterVonGruppe]]', $ws[1111]["WIKI"]);
	 $this->assertEquals($ws[1111]["PAGENAME"], 'Leiter');
	 $this->assertEquals($ws[1111]["ID"], 'head');
	 $this->assertEquals($ws[1112]["NS"], 102);
	 $this->assertEquals($ws[1112]["PAGENAME"], 'HatTeile');
	 $this->assertEquals($ws[1112]["ID"], 'hasParts');
	 $this->assertEquals($ws[1113]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Person]]', $ws[1113]["WIKI"]);
	 $this->assertEquals($ws[1113]["PAGENAME"], 'MitgliedVonPC');
	 $this->assertEquals($ws[1113]["ID"], 'memberOfPC');
	 $this->assertEquals($ws[1114]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode141; Category:Produkt]]', $ws[1114]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:entwickeltVon]]', $ws[1114]["WIKI"]);
	 $this->assertEquals($ws[1114]["PAGENAME"], 'Entwickelt');
	 $this->assertEquals($ws[1114]["ID"], 'develops');
	 $this->assertEquals($ws[1115]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:bNode144]]', $ws[1115]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:entwickelt]]', $ws[1115]["WIKI"]);
	 $this->assertEquals($ws[1115]["PAGENAME"], 'EntwickeltVon');
	 $this->assertEquals($ws[1115]["ID"], 'developedBy');
	 $this->assertEquals($ws[1116]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Produkt; Category:bNode144]]', $ws[1116]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:entwickelt]]', $ws[1116]["WIKI"]);
	 $this->assertEquals($ws[1116]["PAGENAME"], 'EntwickeltVon');
	 $this->assertEquals($ws[1116]["ID"], 'developedBy');
	 $this->assertEquals($ws[1117]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[1117]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:hatTeilEreignis]]', $ws[1117]["WIKI"]);
	 $this->assertContains('[[Category:Transitive properties]]', $ws[1117]["WIKI"]);
	 $this->assertEquals($ws[1117]["PAGENAME"], 'BeiEreignis');
	 $this->assertEquals($ws[1117]["ID"], 'atEvent');
	 $this->assertEquals($ws[1118]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:Ereignis; Category:Ereignis]]', $ws[1118]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:beiEreignis]]', $ws[1118]["WIKI"]);
	 $this->assertContains('[[Category:Transitive properties]]', $ws[1118]["WIKI"]);
	 $this->assertEquals($ws[1118]["PAGENAME"], 'HatTeilEreignis');
	 $this->assertEquals($ws[1118]["ID"], 'hasPartEvent');
	 $this->assertEquals($ws[1119]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode153; Category:bNode156]]', $ws[1119]["WIKI"]);
	 $this->assertContains('[[Is inverse of::Property:zusammenarbeitenMit]]', $ws[1119]["WIKI"]);
	 $this->assertContains('[[Category:Symmetrical properties]]', $ws[1119]["WIKI"]);
	 $this->assertEquals($ws[1119]["PAGENAME"], 'ZusammenarbeitenMit');
	 $this->assertEquals($ws[1119]["ID"], 'cooperateWith');
	 $this->assertEquals($ws[1120]["NS"], 102);
	 $this->assertEquals($ws[1120]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[1120]["ID"], 'title');
	 $this->assertEquals($ws[1121]["NS"], 102);
	 $this->assertEquals($ws[1121]["PAGENAME"], 'Beziehung');
	 $this->assertEquals($ws[1121]["ID"], 'relation');
	 $this->assertEquals($ws[1122]["NS"], 102);
	 $this->assertEquals($ws[1122]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[1122]["ID"], 'date');
	 $this->assertEquals($ws[1123]["NS"], 102);
	 $this->assertEquals($ws[1123]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[1123]["ID"], 'source');
	 $this->assertEquals($ws[1124]["NS"], 102);
	 $this->assertEquals($ws[1124]["PAGENAME"], 'Format');
	 $this->assertEquals($ws[1124]["ID"], 'format');
	 $this->assertEquals($ws[1125]["NS"], 102);
	 $this->assertEquals($ws[1125]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[1125]["ID"], 'subject');
	 $this->assertEquals($ws[1126]["NS"], 102);
	 $this->assertEquals($ws[1126]["PAGENAME"], 'InhaltlicheBeschreibung');
	 $this->assertEquals($ws[1126]["ID"], 'description');
	 $this->assertEquals($ws[1127]["NS"], 102);
	 $this->assertEquals($ws[1127]["PAGENAME"], 'RechtlicheBedingungen');
	 $this->assertEquals($ws[1127]["ID"], 'rights');
	 $this->assertEquals($ws[1128]["NS"], 102);
	 $this->assertEquals($ws[1128]["PAGENAME"], 'Sprache');
	 $this->assertEquals($ws[1128]["ID"], 'language');
	 $this->assertEquals($ws[1129]["NS"], 102);
	 $this->assertEquals($ws[1129]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[1129]["ID"], 'identifier');
	 $this->assertEquals($ws[1130]["NS"], 102);
	 $this->assertEquals($ws[1130]["PAGENAME"], 'Abdeckungsspektrum');
	 $this->assertEquals($ws[1130]["ID"], 'coverage');
	 $this->assertEquals($ws[1131]["NS"], 102);
	 $this->assertEquals($ws[1131]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[1131]["ID"], 'type');
	 $this->assertEquals($ws[1132]["NS"], 102);
	 $this->assertEquals($ws[1132]["PAGENAME"], 'Preis');
	 $this->assertEquals($ws[1132]["ID"], 'price');
	 $this->assertEquals($ws[1133]["NS"], 102);
	 $this->assertEquals($ws[1133]["PAGENAME"], 'Herstellungsdatum');
	 $this->assertEquals($ws[1133]["ID"], 'creationDate');
	 $this->assertEquals($ws[1134]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1134]["WIKI"]);
	 $this->assertEquals($ws[1134]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[1134]["ID"], 'lastName');
	 $this->assertEquals($ws[1135]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode147]]', $ws[1135]["WIKI"]);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1135]["WIKI"]);
	 $this->assertEquals($ws[1135]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[1135]["ID"], 'email');
	 $this->assertEquals($ws[1136]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1136]["WIKI"]);
	 $this->assertEquals($ws[1136]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[1136]["ID"], 'homepage');
	 $this->assertEquals($ws[1137]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1137]["WIKI"]);
	 $this->assertEquals($ws[1137]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[1137]["ID"], 'address');
	 $this->assertEquals($ws[1138]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1138]["WIKI"]);
	 $this->assertEquals($ws[1138]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[1138]["ID"], 'firstName');
	 $this->assertEquals($ws[1139]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode150]]', $ws[1139]["WIKI"]);
	 $this->assertEquals($ws[1139]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[1139]["ID"], 'phone');
	 $this->assertEquals($ws[1140]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1140]["WIKI"]);
	 $this->assertEquals($ws[1140]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[1140]["ID"], 'fax');
	 $this->assertEquals($ws[1141]["NS"], 102);
	 $this->assertEquals($ws[1141]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[1141]["ID"], 'status');
	 $this->assertEquals($ws[1142]["NS"], 102);
	 $this->assertEquals($ws[1142]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[1142]["ID"], 'startDate');
	 $this->assertEquals($ws[1143]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1143]["WIKI"]);
	 $this->assertEquals($ws[1143]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[1143]["ID"], 'homepage');
	 $this->assertEquals($ws[1144]["NS"], 102);
	 $this->assertEquals($ws[1144]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[1144]["ID"], 'endDate');
	 $this->assertEquals($ws[1145]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1145]["WIKI"]);
	 $this->assertEquals($ws[1145]["PAGENAME"], 'Zusammenfassung');
	 $this->assertEquals($ws[1145]["ID"], 'abstract');
	 $this->assertEquals($ws[1146]["NS"], 102);
	 $this->assertEquals($ws[1146]["PAGENAME"], 'EndDatum');
	 $this->assertEquals($ws[1146]["ID"], 'endDate');
	 $this->assertEquals($ws[1147]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1147]["WIKI"]);
	 $this->assertEquals($ws[1147]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[1147]["ID"], 'date');
	 $this->assertEquals($ws[1148]["NS"], 102);
	 $this->assertEquals($ws[1148]["PAGENAME"], 'Beziehung');
	 $this->assertEquals($ws[1148]["ID"], 'relation');
	 $this->assertEquals($ws[1149]["NS"], 102);
	 $this->assertEquals($ws[1149]["PAGENAME"], 'Journal');
	 $this->assertEquals($ws[1149]["ID"], 'journal');
	 $this->assertEquals($ws[1150]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1150]["WIKI"]);
	 $this->assertEquals($ws[1150]["PAGENAME"], 'Homepage');
	 $this->assertEquals($ws[1150]["ID"], 'homepage');
	 $this->assertEquals($ws[1151]["NS"], 102);
	 $this->assertEquals($ws[1151]["PAGENAME"], 'Ausgabe');
	 $this->assertEquals($ws[1151]["ID"], 'edition');
	 $this->assertEquals($ws[1152]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1152]["WIKI"]);
	 $this->assertEquals($ws[1152]["PAGENAME"], 'EreignisTitel');
	 $this->assertEquals($ws[1152]["ID"], 'eventTitle');
	 $this->assertEquals($ws[1153]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1153]["WIKI"]);
	 $this->assertEquals($ws[1153]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[1153]["ID"], 'title');
	 $this->assertEquals($ws[1154]["NS"], 102);
	 $this->assertEquals($ws[1154]["PAGENAME"], 'Ort');
	 $this->assertEquals($ws[1154]["ID"], 'location');
	 $this->assertEquals($ws[1155]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode147]]', $ws[1155]["WIKI"]);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1155]["WIKI"]);
	 $this->assertEquals($ws[1155]["PAGENAME"], 'Email');
	 $this->assertEquals($ws[1155]["ID"], 'email');
	 $this->assertEquals($ws[1156]["NS"], 102);
	 $this->assertEquals($ws[1156]["PAGENAME"], 'Kapitel');
	 $this->assertEquals($ws[1156]["ID"], 'chapter');
	 $this->assertEquals($ws[1157]["NS"], 102);
	 $this->assertEquals($ws[1157]["PAGENAME"], 'Isbn');
	 $this->assertEquals($ws[1157]["ID"], 'isbn');
	 $this->assertEquals($ws[1158]["NS"], 102);
	 $this->assertEquals($ws[1158]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[1158]["ID"], 'identifier');
	 $this->assertEquals($ws[1159]["NS"], 102);
	 $this->assertEquals($ws[1159]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[1159]["ID"], 'source');
	 $this->assertEquals($ws[1160]["NS"], 102);
	 $this->assertEquals($ws[1160]["PAGENAME"], 'Preis');
	 $this->assertEquals($ws[1160]["ID"], 'price');
	 $this->assertEquals($ws[1161]["NS"], 102);
	 $this->assertEquals($ws[1161]["PAGENAME"], 'Jahr');
	 $this->assertEquals($ws[1161]["ID"], 'year');
	 $this->assertEquals($ws[1162]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1162]["WIKI"]);
	 $this->assertEquals($ws[1162]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[1162]["ID"], 'date');
	 $this->assertEquals($ws[1163]["NS"], 102);
	 $this->assertEquals($ws[1163]["PAGENAME"], 'StartDatum');
	 $this->assertEquals($ws[1163]["ID"], 'startDate');
	 $this->assertEquals($ws[1164]["NS"], 102);
	 $this->assertEquals($ws[1164]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[1164]["ID"], 'keywords');
	 $this->assertEquals($ws[1165]["NS"], 102);
	 $this->assertEquals($ws[1165]["PAGENAME"], 'Seiten');
	 $this->assertEquals($ws[1165]["ID"], 'pages');
	 $this->assertEquals($ws[1166]["NS"], 102);
	 $this->assertEquals($ws[1166]["PAGENAME"], 'Quelle');
	 $this->assertEquals($ws[1166]["ID"], 'source');
	 $this->assertEquals($ws[1167]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1167]["WIKI"]);
	 $this->assertEquals($ws[1167]["PAGENAME"], 'Bemerkung');
	 $this->assertEquals($ws[1167]["ID"], 'note');
	 $this->assertEquals($ws[1168]["NS"], 102);
	 $this->assertEquals($ws[1168]["PAGENAME"], 'Herstellungsdatum');
	 $this->assertEquals($ws[1168]["ID"], 'creationDate');
	 $this->assertEquals($ws[1169]["NS"], 102);
	 $this->assertEquals($ws[1169]["PAGENAME"], 'Sprache');
	 $this->assertEquals($ws[1169]["ID"], 'language');
	 $this->assertEquals($ws[1170]["NS"], 102);
	 $this->assertEquals($ws[1170]["PAGENAME"], 'Serie');
	 $this->assertEquals($ws[1170]["ID"], 'series');
	 $this->assertEquals($ws[1171]["NS"], 102);
	 $this->assertEquals($ws[1171]["PAGENAME"], 'Monat');
	 $this->assertEquals($ws[1171]["ID"], 'month');
	 $this->assertEquals($ws[1172]["NS"], 102);
	 $this->assertEquals($ws[1172]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[1172]["ID"], 'type');
	 $this->assertEquals($ws[1173]["NS"], 102);
	 $this->assertEquals($ws[1173]["PAGENAME"], 'Nummer');
	 $this->assertEquals($ws[1173]["ID"], 'number');
	 $this->assertEquals($ws[1174]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1174]["WIKI"]);
	 $this->assertEquals($ws[1174]["PAGENAME"], 'Adresse');
	 $this->assertEquals($ws[1174]["ID"], 'address');
	 $this->assertEquals($ws[1175]["NS"], 102);
	 $this->assertEquals($ws[1175]["PAGENAME"], 'RechtlicheBedingungen');
	 $this->assertEquals($ws[1175]["ID"], 'rights');
	 $this->assertEquals($ws[1176]["NS"], 102);
	 $this->assertEquals($ws[1176]["PAGENAME"], 'InhaltlicheBeschreibung');
	 $this->assertEquals($ws[1176]["ID"], 'description');
	 $this->assertEquals($ws[1177]["NS"], 102);
	 $this->assertEquals($ws[1177]["PAGENAME"], 'Format');
	 $this->assertEquals($ws[1177]["ID"], 'format');
	 $this->assertEquals($ws[1178]["NS"], 102);
	 $this->assertEquals($ws[1178]["PAGENAME"], 'Typ');
	 $this->assertEquals($ws[1178]["ID"], 'type');
	 $this->assertEquals($ws[1179]["NS"], 102);
	 $this->assertEquals($ws[1179]["PAGENAME"], 'Status');
	 $this->assertEquals($ws[1179]["ID"], 'status');
	 $this->assertEquals($ws[1180]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1180]["WIKI"]);
	 $this->assertEquals($ws[1180]["PAGENAME"], 'Vorname');
	 $this->assertEquals($ws[1180]["ID"], 'firstName');
	 $this->assertEquals($ws[1181]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1181]["WIKI"]);
	 $this->assertEquals($ws[1181]["PAGENAME"], 'Name');
	 $this->assertEquals($ws[1181]["ID"], 'name');
	 $this->assertEquals($ws[1182]["NS"], 102);
	 $this->assertEquals($ws[1182]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[1182]["ID"], 'title');
	 $this->assertEquals($ws[1183]["NS"], 102);
	 $this->assertEquals($ws[1183]["PAGENAME"], 'Datum');
	 $this->assertEquals($ws[1183]["ID"], 'date');
	 $this->assertEquals($ws[1184]["NS"], 102);
	 $this->assertEquals($ws[1184]["PAGENAME"], 'Abdeckungsspektrum');
	 $this->assertEquals($ws[1184]["ID"], 'coverage');
	 $this->assertEquals($ws[1185]["NS"], 102);
	 $this->assertEquals($ws[1185]["PAGENAME"], 'Volume');
	 $this->assertEquals($ws[1185]["ID"], 'volume');
	 $this->assertEquals($ws[1186]["NS"], 102);
	 $this->assertEquals($ws[1186]["PAGENAME"], 'VeroeffentlichungsArt');
	 $this->assertEquals($ws[1186]["ID"], 'howpublished');
	 $this->assertEquals($ws[1187]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1187]["WIKI"]);
	 $this->assertEquals($ws[1187]["PAGENAME"], 'Name');
	 $this->assertEquals($ws[1187]["ID"], 'name');
	 $this->assertEquals($ws[1188]["NS"], 102);
	 $this->assertContains('[[Has domain and range::Category:bNode150]]', $ws[1188]["WIKI"]);
	 $this->assertEquals($ws[1188]["PAGENAME"], 'Telefon');
	 $this->assertEquals($ws[1188]["ID"], 'phone');
	 $this->assertEquals($ws[1189]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1189]["WIKI"]);
	 $this->assertEquals($ws[1189]["PAGENAME"], 'Fax');
	 $this->assertEquals($ws[1189]["ID"], 'fax');
	 $this->assertEquals($ws[1190]["NS"], 102);
	 $this->assertEquals($ws[1190]["PAGENAME"], 'Schlagwoerter');
	 $this->assertEquals($ws[1190]["ID"], 'subject');
	 $this->assertEquals($ws[1191]["NS"], 102);
	 $this->assertEquals($ws[1191]["PAGENAME"], 'Identifikation');
	 $this->assertEquals($ws[1191]["ID"], 'identifier');
	 $this->assertEquals($ws[1192]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1192]["WIKI"]);
	 $this->assertEquals($ws[1192]["PAGENAME"], 'Nachname');
	 $this->assertEquals($ws[1192]["ID"], 'lastName');
	 $this->assertEquals($ws[1193]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[1193]["WIKI"]);
	 $this->assertEquals($ws[1193]["PAGENAME"], 'Titel');
	 $this->assertEquals($ws[1193]["ID"], 'title');
	 $this->assertEquals($ws[1194]["NS"], 102);
	 $this->assertEquals($ws[1194]["PAGENAME"], 'Foto');
	 $this->assertEquals($ws[1194]["ID"], 'photo');

	}

	function testImport_Travel() {

	 $this->bot->testOntologyImport("testcases/resources/travel.owl");
	 $ws = $this->bot->getWikiStatements();
	 $this->replaceWhitespaces($ws);
	 $this->assertEquals($ws[0]["NS"], 14);
	 $this->assertContains('[[Category:Vehicle]]', $ws[0]["WIKI"]);
	 $this->assertEquals($ws[0]["PAGENAME"], 'TransferVehicle');
	 $this->assertEquals($ws[0]["ID"], 'TransferVehicle');
	 $this->assertEquals($ws[1]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[1]["WIKI"]);
	 $this->assertEquals($ws[1]["PAGENAME"], 'Vehicle');
	 $this->assertEquals($ws[1]["ID"], 'Vehicle');
	 $this->assertEquals($ws[2]["NS"], 14);
	 $this->assertContains('[[Category:Vehicle]]', $ws[2]["WIKI"]);
	 $this->assertEquals($ws[2]["PAGENAME"], 'TransportVehicle');
	 $this->assertEquals($ws[2]["ID"], 'TransportVehicle');
	 $this->assertEquals($ws[3]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[3]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Trip; Category:Customer]]', $ws[3]["WIKI"]);
	 $this->assertEquals($ws[3]["PAGENAME"], 'ByCustomer');
	 $this->assertEquals($ws[3]["ID"], 'byCustomer');
	 $this->assertEquals($ws[4]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[4]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Trip; Category:Transport]]', $ws[4]["WIKI"]);
	 $this->assertEquals($ws[4]["PAGENAME"], 'HasTransports');
	 $this->assertEquals($ws[4]["ID"], 'hasTransports');
	 $this->assertEquals($ws[5]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[5]["WIKI"]);
	 $this->assertContains('', $ws[5]["WIKI"]);
	 $this->assertContains('', $ws[5]["WIKI"]);
	 $this->assertEquals($ws[5]["PAGENAME"], 'Trip');
	 $this->assertEquals($ws[5]["ID"], 'Trip');
	 $this->assertEquals($ws[6]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[6]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[6]["WIKI"]);
	 $this->assertEquals($ws[6]["PAGENAME"], 'HasPriceFirstClass');
	 $this->assertEquals($ws[6]["ID"], 'hasPriceFirstClass');
	 $this->assertEquals($ws[7]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[7]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[7]["WIKI"]);
	 $this->assertEquals($ws[7]["PAGENAME"], 'HasPriceEconomyClass');
	 $this->assertEquals($ws[7]["ID"], 'hasPriceEconomyClass');
	 $this->assertEquals($ws[8]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[8]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight; Category:Plane]]', $ws[8]["WIKI"]);
	 $this->assertEquals($ws[8]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[8]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[9]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[9]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[9]["WIKI"]);
	 $this->assertEquals($ws[9]["PAGENAME"], 'HasPriceBusinessClass');
	 $this->assertEquals($ws[9]["ID"], 'hasPriceBusinessClass');
	 $this->assertEquals($ws[10]["NS"], 14);
	 $this->assertContains('[[Category:Transport]]', $ws[10]["WIKI"]);
	 $this->assertContains('', $ws[10]["WIKI"]);
	 $this->assertContains('', $ws[10]["WIKI"]);
	 $this->assertContains('', $ws[10]["WIKI"]);
	 $this->assertContains('', $ws[10]["WIKI"]);
	 $this->assertEquals($ws[10]["PAGENAME"], 'Flight');
	 $this->assertEquals($ws[10]["ID"], 'Flight');
	 $this->assertEquals($ws[11]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[11]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Vehicle]]', $ws[11]["WIKI"]);
	 $this->assertEquals($ws[11]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[11]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[12]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[12]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Time]]', $ws[12]["WIKI"]);
	 $this->assertEquals($ws[12]["PAGENAME"], 'HasDepartureTime');
	 $this->assertEquals($ws[12]["ID"], 'hasDepartureTime');
	 $this->assertEquals($ws[13]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[13]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Time]]', $ws[13]["WIKI"]);
	 $this->assertEquals($ws[13]["PAGENAME"], 'HasArrivalTime');
	 $this->assertEquals($ws[13]["ID"], 'hasArrivalTime');
	 $this->assertEquals($ws[14]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[14]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Location]]', $ws[14]["WIKI"]);
	 $this->assertEquals($ws[14]["PAGENAME"], 'HasDepartureLocation');
	 $this->assertEquals($ws[14]["ID"], 'hasDepartureLocation');
	 $this->assertEquals($ws[15]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[15]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Location]]', $ws[15]["WIKI"]);
	 $this->assertEquals($ws[15]["PAGENAME"], 'HasArrivalLocation');
	 $this->assertEquals($ws[15]["ID"], 'hasArrivalLocation');
	 $this->assertEquals($ws[16]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[16]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Date]]', $ws[16]["WIKI"]);
	 $this->assertEquals($ws[16]["PAGENAME"], 'HasDepartureDate');
	 $this->assertEquals($ws[16]["ID"], 'hasDepartureDate');
	 $this->assertEquals($ws[17]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[17]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Date]]', $ws[17]["WIKI"]);
	 $this->assertEquals($ws[17]["PAGENAME"], 'HasArrivalDate');
	 $this->assertEquals($ws[17]["ID"], 'hasArrivalDate');
	 $this->assertEquals($ws[18]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[18]["WIKI"]);
	 $this->assertContains('', $ws[18]["WIKI"]);
	 $this->assertContains('', $ws[18]["WIKI"]);
	 $this->assertContains('', $ws[18]["WIKI"]);
	 $this->assertContains('', $ws[18]["WIKI"]);
	 $this->assertContains('', $ws[18]["WIKI"]);
	 $this->assertContains('', $ws[18]["WIKI"]);
	 $this->assertContains('', $ws[18]["WIKI"]);
	 $this->assertEquals($ws[18]["PAGENAME"], 'Transport');
	 $this->assertEquals($ws[18]["ID"], 'Transport');
	 $this->assertEquals($ws[19]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[19]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[19]["WIKI"]);
	 $this->assertEquals($ws[19]["PAGENAME"], 'HasInternetConnection');
	 $this->assertEquals($ws[19]["ID"], 'hasInternetConnection');
	 $this->assertEquals($ws[20]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[20]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[20]["WIKI"]);
	 $this->assertEquals($ws[20]["PAGENAME"], 'HasTV');
	 $this->assertEquals($ws[20]["ID"], 'hasTV');
	 $this->assertEquals($ws[21]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[21]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[21]["WIKI"]);
	 $this->assertEquals($ws[21]["PAGENAME"], 'HasBeds');
	 $this->assertEquals($ws[21]["ID"], 'hasBeds');
	 $this->assertEquals($ws[22]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertContains('', $ws[22]["WIKI"]);
	 $this->assertEquals($ws[22]["PAGENAME"], 'Room');
	 $this->assertEquals($ws[22]["ID"], 'Room');
	 $this->assertEquals($ws[23]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[23]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location]]', $ws[23]["WIKI"]);
	 $this->assertEquals($ws[23]["PAGENAME"], 'HasLandmark');
	 $this->assertEquals($ws[23]["ID"], 'hasLandmark');
	 $this->assertEquals($ws[24]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[24]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location; Category:Location]]', $ws[24]["WIKI"]);
	 $this->assertEquals($ws[24]["PAGENAME"], 'IsInLocation');
	 $this->assertEquals($ws[24]["ID"], 'isInLocation');
	 $this->assertEquals($ws[25]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[25]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location]]', $ws[25]["WIKI"]);
	 $this->assertEquals($ws[25]["PAGENAME"], 'HasName');
	 $this->assertEquals($ws[25]["ID"], 'hasName');
	 $this->assertEquals($ws[26]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[26]["WIKI"]);
	 $this->assertContains('', $ws[26]["WIKI"]);
	 $this->assertContains('', $ws[26]["WIKI"]);
	 $this->assertContains('', $ws[26]["WIKI"]);
	 $this->assertEquals($ws[26]["PAGENAME"], 'Location');
	 $this->assertEquals($ws[26]["ID"], 'Location');
	 $this->assertEquals($ws[27]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[27]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[27]["WIKI"]);
	 $this->assertEquals($ws[27]["PAGENAME"], 'BelongsToChain');
	 $this->assertEquals($ws[27]["ID"], 'belongsToChain');
	 $this->assertEquals($ws[28]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[28]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[28]["WIKI"]);
	 $this->assertEquals($ws[28]["PAGENAME"], 'HasDistanceToSkiing');
	 $this->assertEquals($ws[28]["ID"], 'hasDistanceToSkiing');
	 $this->assertEquals($ws[29]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[29]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[29]["WIKI"]);
	 $this->assertEquals($ws[29]["PAGENAME"], 'HasDistanceToBeach');
	 $this->assertEquals($ws[29]["ID"], 'hasDistanceToBeach');
	 $this->assertEquals($ws[30]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[30]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[30]["WIKI"]);
	 $this->assertEquals($ws[30]["PAGENAME"], 'AreDogsAllowed');
	 $this->assertEquals($ws[30]["ID"], 'areDogsAllowed');
	 $this->assertEquals($ws[31]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[31]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[31]["WIKI"]);
	 $this->assertEquals($ws[31]["PAGENAME"], 'HasDescription');
	 $this->assertEquals($ws[31]["ID"], 'hasDescription');
	 $this->assertEquals($ws[32]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[32]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[32]["WIKI"]);
	 $this->assertEquals($ws[32]["PAGENAME"], 'HasRoomsAvailable');
	 $this->assertEquals($ws[32]["ID"], 'hasRoomsAvailable');
	 $this->assertEquals($ws[33]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[33]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[33]["WIKI"]);
	 $this->assertEquals($ws[33]["PAGENAME"], 'HasRooms');
	 $this->assertEquals($ws[33]["ID"], 'hasRooms');
	 $this->assertEquals($ws[34]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[34]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[34]["WIKI"]);
	 $this->assertEquals($ws[34]["PAGENAME"], 'HasCapacity');
	 $this->assertEquals($ws[34]["ID"], 'hasCapacity');
	 $this->assertEquals($ws[35]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[35]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[35]["WIKI"]);
	 $this->assertEquals($ws[35]["PAGENAME"], 'HasURL');
	 $this->assertEquals($ws[35]["ID"], 'hasURL');
	 $this->assertEquals($ws[36]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[36]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[36]["WIKI"]);
	 $this->assertEquals($ws[36]["PAGENAME"], 'HasPhoneNumber');
	 $this->assertEquals($ws[36]["ID"], 'hasPhoneNumber');
	 $this->assertEquals($ws[37]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[37]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[37]["WIKI"]);
	 $this->assertEquals($ws[37]["PAGENAME"], 'InStreet');
	 $this->assertEquals($ws[37]["ID"], 'inStreet');
	 $this->assertEquals($ws[38]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[38]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[38]["WIKI"]);
	 $this->assertEquals($ws[38]["PAGENAME"], 'HasStars');
	 $this->assertEquals($ws[38]["ID"], 'hasStars');
	 $this->assertEquals($ws[39]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertContains('', $ws[39]["WIKI"]);
	 $this->assertEquals($ws[39]["PAGENAME"], 'Hotel');
	 $this->assertEquals($ws[39]["ID"], 'Hotel');
	 $this->assertEquals($ws[40]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[40]["WIKI"]);
	 $this->assertEquals($ws[40]["PAGENAME"], 'RentalCar');
	 $this->assertEquals($ws[40]["ID"], 'RentalCar');
	 $this->assertEquals($ws[41]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[41]["WIKI"]);
	 $this->assertEquals($ws[41]["PAGENAME"], 'Taxi');
	 $this->assertEquals($ws[41]["ID"], 'Taxi');
	 $this->assertEquals($ws[42]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[42]["WIKI"]);
	 $this->assertEquals($ws[42]["PAGENAME"], 'Underground');
	 $this->assertEquals($ws[42]["ID"], 'Underground');
	 $this->assertEquals($ws[43]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[43]["WIKI"]);
	 $this->assertEquals($ws[43]["PAGENAME"], 'CityBus');
	 $this->assertEquals($ws[43]["ID"], 'CityBus');
	 $this->assertEquals($ws[44]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[44]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transfer; Category:TransferVehicle]]', $ws[44]["WIKI"]);
	 $this->assertEquals($ws[44]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[44]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[45]["NS"], 14);
	 $this->assertContains('[[Category:Transport]]', $ws[45]["WIKI"]);
	 $this->assertContains('', $ws[45]["WIKI"]);
	 $this->assertEquals($ws[45]["PAGENAME"], 'Transfer');
	 $this->assertEquals($ws[45]["ID"], 'Transfer');
	 $this->assertEquals($ws[46]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[46]["WIKI"]);
	 $this->assertEquals($ws[46]["PAGENAME"], 'Continent');
	 $this->assertEquals($ws[46]["ID"], 'Continent');
	 $this->assertEquals($ws[47]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[47]["WIKI"]);
	 $this->assertEquals($ws[47]["PAGENAME"], 'Country');
	 $this->assertEquals($ws[47]["ID"], 'Country');
	 $this->assertEquals($ws[48]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[48]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[48]["WIKI"]);
	 $this->assertEquals($ws[48]["PAGENAME"], 'AmPm');
	 $this->assertEquals($ws[48]["ID"], 'AmPm');
	 $this->assertEquals($ws[49]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[49]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[49]["WIKI"]);
	 $this->assertEquals($ws[49]["PAGENAME"], 'HasMinute');
	 $this->assertEquals($ws[49]["ID"], 'hasMinute');
	 $this->assertEquals($ws[50]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[50]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[50]["WIKI"]);
	 $this->assertEquals($ws[50]["PAGENAME"], 'HasHour');
	 $this->assertEquals($ws[50]["ID"], 'hasHour');
	 $this->assertEquals($ws[51]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[51]["WIKI"]);
	 $this->assertContains('', $ws[51]["WIKI"]);
	 $this->assertContains('', $ws[51]["WIKI"]);
	 $this->assertContains('', $ws[51]["WIKI"]);
	 $this->assertEquals($ws[51]["PAGENAME"], 'Time');
	 $this->assertEquals($ws[51]["ID"], 'Time');
	 $this->assertEquals($ws[52]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[52]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[52]["WIKI"]);
	 $this->assertEquals($ws[52]["PAGENAME"], 'HasYear');
	 $this->assertEquals($ws[52]["ID"], 'hasYear');
	 $this->assertEquals($ws[53]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[53]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[53]["WIKI"]);
	 $this->assertEquals($ws[53]["PAGENAME"], 'HasMonth');
	 $this->assertEquals($ws[53]["ID"], 'hasMonth');
	 $this->assertEquals($ws[54]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[54]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[54]["WIKI"]);
	 $this->assertEquals($ws[54]["PAGENAME"], 'HasDay');
	 $this->assertEquals($ws[54]["ID"], 'hasDay');
	 $this->assertEquals($ws[55]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[55]["WIKI"]);
	 $this->assertContains('', $ws[55]["WIKI"]);
	 $this->assertContains('', $ws[55]["WIKI"]);
	 $this->assertContains('', $ws[55]["WIKI"]);
	 $this->assertEquals($ws[55]["PAGENAME"], 'Date');
	 $this->assertEquals($ws[55]["ID"], 'Date');
	 $this->assertEquals($ws[56]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[56]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:City]]', $ws[56]["WIKI"]);
	 $this->assertEquals($ws[56]["PAGENAME"], 'HasWidth');
	 $this->assertEquals($ws[56]["ID"], 'hasWidth');
	 $this->assertEquals($ws[57]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[57]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:City]]', $ws[57]["WIKI"]);
	 $this->assertEquals($ws[57]["PAGENAME"], 'HasLength');
	 $this->assertEquals($ws[57]["ID"], 'hasLength');
	 $this->assertEquals($ws[58]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[58]["WIKI"]);
	 $this->assertContains('', $ws[58]["WIKI"]);
	 $this->assertContains('', $ws[58]["WIKI"]);
	 $this->assertEquals($ws[58]["PAGENAME"], 'City');
	 $this->assertEquals($ws[58]["ID"], 'City');
	 $this->assertEquals($ws[59]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[59]["WIKI"]);
	 $this->assertEquals($ws[59]["PAGENAME"], 'Airport');
	 $this->assertEquals($ws[59]["ID"], 'Airport');
	 $this->assertEquals($ws[60]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[60]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Customer; Category:Vehicle]]', $ws[60]["WIKI"]);
	 $this->assertEquals($ws[60]["PAGENAME"], 'HatesVehicle');
	 $this->assertEquals($ws[60]["ID"], 'hatesVehicle');
	 $this->assertEquals($ws[61]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[61]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Customer]]', $ws[61]["WIKI"]);
	 $this->assertEquals($ws[61]["PAGENAME"], 'HasName');
	 $this->assertEquals($ws[61]["ID"], 'hasName');
	 $this->assertEquals($ws[62]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[62]["WIKI"]);
	 $this->assertContains('', $ws[62]["WIKI"]);
	 $this->assertContains('', $ws[62]["WIKI"]);
	 $this->assertEquals($ws[62]["PAGENAME"], 'Customer');
	 $this->assertEquals($ws[62]["ID"], 'Customer');
	 $this->assertEquals($ws[63]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[63]["WIKI"]);
	 $this->assertEquals($ws[63]["PAGENAME"], 'Ship');
	 $this->assertEquals($ws[63]["ID"], 'Ship');
	 $this->assertEquals($ws[64]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[64]["WIKI"]);
	 $this->assertEquals($ws[64]["PAGENAME"], 'Motorbike');
	 $this->assertEquals($ws[64]["ID"], 'Motorbike');
	 $this->assertEquals($ws[65]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[65]["WIKI"]);
	 $this->assertEquals($ws[65]["PAGENAME"], 'Ferry');
	 $this->assertEquals($ws[65]["ID"], 'Ferry');
	 $this->assertEquals($ws[66]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[66]["WIKI"]);
	 $this->assertEquals($ws[66]["PAGENAME"], 'Car');
	 $this->assertEquals($ws[66]["ID"], 'Car');
	 $this->assertEquals($ws[67]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[67]["WIKI"]);
	 $this->assertEquals($ws[67]["PAGENAME"], 'Train');
	 $this->assertEquals($ws[67]["ID"], 'Train');
	 $this->assertEquals($ws[68]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[68]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Plane]]', $ws[68]["WIKI"]);
	 $this->assertEquals($ws[68]["PAGENAME"], 'HasProducer');
	 $this->assertEquals($ws[68]["ID"], 'hasProducer');
	 $this->assertEquals($ws[69]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[69]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Plane]]', $ws[69]["WIKI"]);
	 $this->assertEquals($ws[69]["PAGENAME"], 'HasModel');
	 $this->assertEquals($ws[69]["ID"], 'hasModel');
	 $this->assertEquals($ws[70]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[70]["WIKI"]);
	 $this->assertContains('', $ws[70]["WIKI"]);
	 $this->assertContains('', $ws[70]["WIKI"]);
	 $this->assertEquals($ws[70]["PAGENAME"], 'Plane');
	 $this->assertEquals($ws[70]["ID"], 'Plane');
	 $this->assertEquals($ws[71]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[71]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Trip; Category:Customer]]', $ws[71]["WIKI"]);
	 $this->assertEquals($ws[71]["PAGENAME"], 'ByCustomer');
	 $this->assertEquals($ws[71]["ID"], 'byCustomer');
	 $this->assertEquals($ws[72]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[72]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Trip; Category:Transport]]', $ws[72]["WIKI"]);
	 $this->assertEquals($ws[72]["PAGENAME"], 'HasTransports');
	 $this->assertEquals($ws[72]["ID"], 'hasTransports');
	 $this->assertEquals($ws[73]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[73]["WIKI"]);
	 $this->assertContains('', $ws[73]["WIKI"]);
	 $this->assertContains('', $ws[73]["WIKI"]);
	 $this->assertEquals($ws[73]["PAGENAME"], 'Trip');
	 $this->assertEquals($ws[73]["ID"], 'Trip');
	 $this->assertEquals($ws[74]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[74]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[74]["WIKI"]);
	 $this->assertEquals($ws[74]["PAGENAME"], 'HasPriceFirstClass');
	 $this->assertEquals($ws[74]["ID"], 'hasPriceFirstClass');
	 $this->assertEquals($ws[75]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[75]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[75]["WIKI"]);
	 $this->assertEquals($ws[75]["PAGENAME"], 'HasPriceEconomyClass');
	 $this->assertEquals($ws[75]["ID"], 'hasPriceEconomyClass');
	 $this->assertEquals($ws[76]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[76]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight; Category:Plane]]', $ws[76]["WIKI"]);
	 $this->assertEquals($ws[76]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[76]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[77]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[77]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[77]["WIKI"]);
	 $this->assertEquals($ws[77]["PAGENAME"], 'HasPriceBusinessClass');
	 $this->assertEquals($ws[77]["ID"], 'hasPriceBusinessClass');
	 $this->assertEquals($ws[78]["NS"], 14);
	 $this->assertContains('[[Category:Transport]]', $ws[78]["WIKI"]);
	 $this->assertContains('', $ws[78]["WIKI"]);
	 $this->assertContains('', $ws[78]["WIKI"]);
	 $this->assertContains('', $ws[78]["WIKI"]);
	 $this->assertContains('', $ws[78]["WIKI"]);
	 $this->assertEquals($ws[78]["PAGENAME"], 'Flight');
	 $this->assertEquals($ws[78]["ID"], 'Flight');
	 $this->assertEquals($ws[79]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[79]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Vehicle]]', $ws[79]["WIKI"]);
	 $this->assertEquals($ws[79]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[79]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[80]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[80]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Time]]', $ws[80]["WIKI"]);
	 $this->assertEquals($ws[80]["PAGENAME"], 'HasDepartureTime');
	 $this->assertEquals($ws[80]["ID"], 'hasDepartureTime');
	 $this->assertEquals($ws[81]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[81]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Time]]', $ws[81]["WIKI"]);
	 $this->assertEquals($ws[81]["PAGENAME"], 'HasArrivalTime');
	 $this->assertEquals($ws[81]["ID"], 'hasArrivalTime');
	 $this->assertEquals($ws[82]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[82]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Location]]', $ws[82]["WIKI"]);
	 $this->assertEquals($ws[82]["PAGENAME"], 'HasDepartureLocation');
	 $this->assertEquals($ws[82]["ID"], 'hasDepartureLocation');
	 $this->assertEquals($ws[83]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[83]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Location]]', $ws[83]["WIKI"]);
	 $this->assertEquals($ws[83]["PAGENAME"], 'HasArrivalLocation');
	 $this->assertEquals($ws[83]["ID"], 'hasArrivalLocation');
	 $this->assertEquals($ws[84]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[84]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Date]]', $ws[84]["WIKI"]);
	 $this->assertEquals($ws[84]["PAGENAME"], 'HasDepartureDate');
	 $this->assertEquals($ws[84]["ID"], 'hasDepartureDate');
	 $this->assertEquals($ws[85]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[85]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Date]]', $ws[85]["WIKI"]);
	 $this->assertEquals($ws[85]["PAGENAME"], 'HasArrivalDate');
	 $this->assertEquals($ws[85]["ID"], 'hasArrivalDate');
	 $this->assertEquals($ws[86]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[86]["WIKI"]);
	 $this->assertContains('', $ws[86]["WIKI"]);
	 $this->assertContains('', $ws[86]["WIKI"]);
	 $this->assertContains('', $ws[86]["WIKI"]);
	 $this->assertContains('', $ws[86]["WIKI"]);
	 $this->assertContains('', $ws[86]["WIKI"]);
	 $this->assertContains('', $ws[86]["WIKI"]);
	 $this->assertContains('', $ws[86]["WIKI"]);
	 $this->assertEquals($ws[86]["PAGENAME"], 'Transport');
	 $this->assertEquals($ws[86]["ID"], 'Transport');
	 $this->assertEquals($ws[87]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[87]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[87]["WIKI"]);
	 $this->assertEquals($ws[87]["PAGENAME"], 'HasInternetConnection');
	 $this->assertEquals($ws[87]["ID"], 'hasInternetConnection');
	 $this->assertEquals($ws[88]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[88]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[88]["WIKI"]);
	 $this->assertEquals($ws[88]["PAGENAME"], 'HasTV');
	 $this->assertEquals($ws[88]["ID"], 'hasTV');
	 $this->assertEquals($ws[89]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[89]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[89]["WIKI"]);
	 $this->assertEquals($ws[89]["PAGENAME"], 'HasBeds');
	 $this->assertEquals($ws[89]["ID"], 'hasBeds');
	 $this->assertEquals($ws[90]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[90]["WIKI"]);
	 $this->assertContains('', $ws[90]["WIKI"]);
	 $this->assertContains('', $ws[90]["WIKI"]);
	 $this->assertContains('', $ws[90]["WIKI"]);
	 $this->assertEquals($ws[90]["PAGENAME"], 'Room');
	 $this->assertEquals($ws[90]["ID"], 'Room');
	 $this->assertEquals($ws[91]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[91]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location]]', $ws[91]["WIKI"]);
	 $this->assertEquals($ws[91]["PAGENAME"], 'HasLandmark');
	 $this->assertEquals($ws[91]["ID"], 'hasLandmark');
	 $this->assertEquals($ws[92]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[92]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location; Category:Location]]', $ws[92]["WIKI"]);
	 $this->assertEquals($ws[92]["PAGENAME"], 'IsInLocation');
	 $this->assertEquals($ws[92]["ID"], 'isInLocation');
	 $this->assertEquals($ws[93]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[93]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location]]', $ws[93]["WIKI"]);
	 $this->assertEquals($ws[93]["PAGENAME"], 'HasName');
	 $this->assertEquals($ws[93]["ID"], 'hasName');
	 $this->assertEquals($ws[94]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[94]["WIKI"]);
	 $this->assertContains('', $ws[94]["WIKI"]);
	 $this->assertContains('', $ws[94]["WIKI"]);
	 $this->assertContains('', $ws[94]["WIKI"]);
	 $this->assertEquals($ws[94]["PAGENAME"], 'Location');
	 $this->assertEquals($ws[94]["ID"], 'Location');
	 $this->assertEquals($ws[95]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[95]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[95]["WIKI"]);
	 $this->assertEquals($ws[95]["PAGENAME"], 'BelongsToChain');
	 $this->assertEquals($ws[95]["ID"], 'belongsToChain');
	 $this->assertEquals($ws[96]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[96]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[96]["WIKI"]);
	 $this->assertEquals($ws[96]["PAGENAME"], 'HasDistanceToSkiing');
	 $this->assertEquals($ws[96]["ID"], 'hasDistanceToSkiing');
	 $this->assertEquals($ws[97]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[97]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[97]["WIKI"]);
	 $this->assertEquals($ws[97]["PAGENAME"], 'HasDistanceToBeach');
	 $this->assertEquals($ws[97]["ID"], 'hasDistanceToBeach');
	 $this->assertEquals($ws[98]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[98]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[98]["WIKI"]);
	 $this->assertEquals($ws[98]["PAGENAME"], 'AreDogsAllowed');
	 $this->assertEquals($ws[98]["ID"], 'areDogsAllowed');
	 $this->assertEquals($ws[99]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[99]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[99]["WIKI"]);
	 $this->assertEquals($ws[99]["PAGENAME"], 'HasDescription');
	 $this->assertEquals($ws[99]["ID"], 'hasDescription');
	 $this->assertEquals($ws[100]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[100]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[100]["WIKI"]);
	 $this->assertEquals($ws[100]["PAGENAME"], 'HasRoomsAvailable');
	 $this->assertEquals($ws[100]["ID"], 'hasRoomsAvailable');
	 $this->assertEquals($ws[101]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[101]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[101]["WIKI"]);
	 $this->assertEquals($ws[101]["PAGENAME"], 'HasRooms');
	 $this->assertEquals($ws[101]["ID"], 'hasRooms');
	 $this->assertEquals($ws[102]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[102]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[102]["WIKI"]);
	 $this->assertEquals($ws[102]["PAGENAME"], 'HasCapacity');
	 $this->assertEquals($ws[102]["ID"], 'hasCapacity');
	 $this->assertEquals($ws[103]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[103]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[103]["WIKI"]);
	 $this->assertEquals($ws[103]["PAGENAME"], 'HasURL');
	 $this->assertEquals($ws[103]["ID"], 'hasURL');
	 $this->assertEquals($ws[104]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[104]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[104]["WIKI"]);
	 $this->assertEquals($ws[104]["PAGENAME"], 'HasPhoneNumber');
	 $this->assertEquals($ws[104]["ID"], 'hasPhoneNumber');
	 $this->assertEquals($ws[105]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[105]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[105]["WIKI"]);
	 $this->assertEquals($ws[105]["PAGENAME"], 'InStreet');
	 $this->assertEquals($ws[105]["ID"], 'inStreet');
	 $this->assertEquals($ws[106]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[106]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[106]["WIKI"]);
	 $this->assertEquals($ws[106]["PAGENAME"], 'HasStars');
	 $this->assertEquals($ws[106]["ID"], 'hasStars');
	 $this->assertEquals($ws[107]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertContains('', $ws[107]["WIKI"]);
	 $this->assertEquals($ws[107]["PAGENAME"], 'Hotel');
	 $this->assertEquals($ws[107]["ID"], 'Hotel');
	 $this->assertEquals($ws[108]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[108]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transfer; Category:TransferVehicle]]', $ws[108]["WIKI"]);
	 $this->assertEquals($ws[108]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[108]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[109]["NS"], 14);
	 $this->assertContains('[[Category:Transport]]', $ws[109]["WIKI"]);
	 $this->assertContains('', $ws[109]["WIKI"]);
	 $this->assertEquals($ws[109]["PAGENAME"], 'Transfer');
	 $this->assertEquals($ws[109]["ID"], 'Transfer');
	 $this->assertEquals($ws[110]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[110]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[110]["WIKI"]);
	 $this->assertEquals($ws[110]["PAGENAME"], 'AmPm');
	 $this->assertEquals($ws[110]["ID"], 'AmPm');
	 $this->assertEquals($ws[111]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[111]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[111]["WIKI"]);
	 $this->assertEquals($ws[111]["PAGENAME"], 'HasMinute');
	 $this->assertEquals($ws[111]["ID"], 'hasMinute');
	 $this->assertEquals($ws[112]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[112]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[112]["WIKI"]);
	 $this->assertEquals($ws[112]["PAGENAME"], 'HasHour');
	 $this->assertEquals($ws[112]["ID"], 'hasHour');
	 $this->assertEquals($ws[113]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[113]["WIKI"]);
	 $this->assertContains('', $ws[113]["WIKI"]);
	 $this->assertContains('', $ws[113]["WIKI"]);
	 $this->assertContains('', $ws[113]["WIKI"]);
	 $this->assertEquals($ws[113]["PAGENAME"], 'Time');
	 $this->assertEquals($ws[113]["ID"], 'Time');
	 $this->assertEquals($ws[114]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[114]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[114]["WIKI"]);
	 $this->assertEquals($ws[114]["PAGENAME"], 'HasYear');
	 $this->assertEquals($ws[114]["ID"], 'hasYear');
	 $this->assertEquals($ws[115]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[115]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[115]["WIKI"]);
	 $this->assertEquals($ws[115]["PAGENAME"], 'HasMonth');
	 $this->assertEquals($ws[115]["ID"], 'hasMonth');
	 $this->assertEquals($ws[116]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[116]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[116]["WIKI"]);
	 $this->assertEquals($ws[116]["PAGENAME"], 'HasDay');
	 $this->assertEquals($ws[116]["ID"], 'hasDay');
	 $this->assertEquals($ws[117]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[117]["WIKI"]);
	 $this->assertContains('', $ws[117]["WIKI"]);
	 $this->assertContains('', $ws[117]["WIKI"]);
	 $this->assertContains('', $ws[117]["WIKI"]);
	 $this->assertEquals($ws[117]["PAGENAME"], 'Date');
	 $this->assertEquals($ws[117]["ID"], 'Date');
	 $this->assertEquals($ws[118]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[118]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:City]]', $ws[118]["WIKI"]);
	 $this->assertEquals($ws[118]["PAGENAME"], 'HasWidth');
	 $this->assertEquals($ws[118]["ID"], 'hasWidth');
	 $this->assertEquals($ws[119]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[119]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:City]]', $ws[119]["WIKI"]);
	 $this->assertEquals($ws[119]["PAGENAME"], 'HasLength');
	 $this->assertEquals($ws[119]["ID"], 'hasLength');
	 $this->assertEquals($ws[120]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[120]["WIKI"]);
	 $this->assertContains('', $ws[120]["WIKI"]);
	 $this->assertContains('', $ws[120]["WIKI"]);
	 $this->assertEquals($ws[120]["PAGENAME"], 'City');
	 $this->assertEquals($ws[120]["ID"], 'City');
	 $this->assertEquals($ws[121]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[121]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Customer; Category:Vehicle]]', $ws[121]["WIKI"]);
	 $this->assertEquals($ws[121]["PAGENAME"], 'HatesVehicle');
	 $this->assertEquals($ws[121]["ID"], 'hatesVehicle');
	 $this->assertEquals($ws[122]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[122]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Customer]]', $ws[122]["WIKI"]);
	 $this->assertEquals($ws[122]["PAGENAME"], 'HasName');
	 $this->assertEquals($ws[122]["ID"], 'hasName');
	 $this->assertEquals($ws[123]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[123]["WIKI"]);
	 $this->assertContains('', $ws[123]["WIKI"]);
	 $this->assertContains('', $ws[123]["WIKI"]);
	 $this->assertEquals($ws[123]["PAGENAME"], 'Customer');
	 $this->assertEquals($ws[123]["ID"], 'Customer');
	 $this->assertEquals($ws[124]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[124]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Plane]]', $ws[124]["WIKI"]);
	 $this->assertEquals($ws[124]["PAGENAME"], 'HasProducer');
	 $this->assertEquals($ws[124]["ID"], 'hasProducer');
	 $this->assertEquals($ws[125]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[125]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Plane]]', $ws[125]["WIKI"]);
	 $this->assertEquals($ws[125]["PAGENAME"], 'HasModel');
	 $this->assertEquals($ws[125]["ID"], 'hasModel');
	 $this->assertEquals($ws[126]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[126]["WIKI"]);
	 $this->assertContains('', $ws[126]["WIKI"]);
	 $this->assertContains('', $ws[126]["WIKI"]);
	 $this->assertEquals($ws[126]["PAGENAME"], 'Plane');
	 $this->assertEquals($ws[126]["ID"], 'Plane');
	 $this->assertEquals($ws[127]["NS"], 14);
	 $this->assertEquals($ws[127]["PAGENAME"], 'DEFAULT_ROOT_CONCEPT');
	 $this->assertEquals($ws[127]["ID"], 'DEFAULT_ROOT_CONCEPT');
	 $this->assertEquals($ws[128]["NS"], 14);
	 $this->assertContains('[[Category:Vehicle]]', $ws[128]["WIKI"]);
	 $this->assertEquals($ws[128]["PAGENAME"], 'TransferVehicle');
	 $this->assertEquals($ws[128]["ID"], 'TransferVehicle');
	 $this->assertEquals($ws[129]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[129]["WIKI"]);
	 $this->assertEquals($ws[129]["PAGENAME"], 'Vehicle');
	 $this->assertEquals($ws[129]["ID"], 'Vehicle');
	 $this->assertEquals($ws[130]["NS"], 14);
	 $this->assertContains('[[Category:Vehicle]]', $ws[130]["WIKI"]);
	 $this->assertEquals($ws[130]["PAGENAME"], 'TransportVehicle');
	 $this->assertEquals($ws[130]["ID"], 'TransportVehicle');
	 $this->assertEquals($ws[131]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[131]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Trip; Category:Customer]]', $ws[131]["WIKI"]);
	 $this->assertEquals($ws[131]["PAGENAME"], 'ByCustomer');
	 $this->assertEquals($ws[131]["ID"], 'byCustomer');
	 $this->assertEquals($ws[132]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[132]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Trip; Category:Transport]]', $ws[132]["WIKI"]);
	 $this->assertEquals($ws[132]["PAGENAME"], 'HasTransports');
	 $this->assertEquals($ws[132]["ID"], 'hasTransports');
	 $this->assertEquals($ws[133]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[133]["WIKI"]);
	 $this->assertContains('', $ws[133]["WIKI"]);
	 $this->assertContains('', $ws[133]["WIKI"]);
	 $this->assertEquals($ws[133]["PAGENAME"], 'Trip');
	 $this->assertEquals($ws[133]["ID"], 'Trip');
	 $this->assertEquals($ws[134]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[134]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[134]["WIKI"]);
	 $this->assertEquals($ws[134]["PAGENAME"], 'HasPriceFirstClass');
	 $this->assertEquals($ws[134]["ID"], 'hasPriceFirstClass');
	 $this->assertEquals($ws[135]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[135]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[135]["WIKI"]);
	 $this->assertEquals($ws[135]["PAGENAME"], 'HasPriceEconomyClass');
	 $this->assertEquals($ws[135]["ID"], 'hasPriceEconomyClass');
	 $this->assertEquals($ws[136]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[136]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight; Category:Plane]]', $ws[136]["WIKI"]);
	 $this->assertEquals($ws[136]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[136]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[137]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[137]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Flight]]', $ws[137]["WIKI"]);
	 $this->assertEquals($ws[137]["PAGENAME"], 'HasPriceBusinessClass');
	 $this->assertEquals($ws[137]["ID"], 'hasPriceBusinessClass');
	 $this->assertEquals($ws[138]["NS"], 14);
	 $this->assertContains('[[Category:Transport]]', $ws[138]["WIKI"]);
	 $this->assertContains('', $ws[138]["WIKI"]);
	 $this->assertContains('', $ws[138]["WIKI"]);
	 $this->assertContains('', $ws[138]["WIKI"]);
	 $this->assertContains('', $ws[138]["WIKI"]);
	 $this->assertEquals($ws[138]["PAGENAME"], 'Flight');
	 $this->assertEquals($ws[138]["ID"], 'Flight');
	 $this->assertEquals($ws[139]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[139]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Vehicle]]', $ws[139]["WIKI"]);
	 $this->assertEquals($ws[139]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[139]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[140]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[140]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Time]]', $ws[140]["WIKI"]);
	 $this->assertEquals($ws[140]["PAGENAME"], 'HasDepartureTime');
	 $this->assertEquals($ws[140]["ID"], 'hasDepartureTime');
	 $this->assertEquals($ws[141]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[141]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Time]]', $ws[141]["WIKI"]);
	 $this->assertEquals($ws[141]["PAGENAME"], 'HasArrivalTime');
	 $this->assertEquals($ws[141]["ID"], 'hasArrivalTime');
	 $this->assertEquals($ws[142]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[142]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Location]]', $ws[142]["WIKI"]);
	 $this->assertEquals($ws[142]["PAGENAME"], 'HasDepartureLocation');
	 $this->assertEquals($ws[142]["ID"], 'hasDepartureLocation');
	 $this->assertEquals($ws[143]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[143]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Location]]', $ws[143]["WIKI"]);
	 $this->assertEquals($ws[143]["PAGENAME"], 'HasArrivalLocation');
	 $this->assertEquals($ws[143]["ID"], 'hasArrivalLocation');
	 $this->assertEquals($ws[144]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[144]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Date]]', $ws[144]["WIKI"]);
	 $this->assertEquals($ws[144]["PAGENAME"], 'HasDepartureDate');
	 $this->assertEquals($ws[144]["ID"], 'hasDepartureDate');
	 $this->assertEquals($ws[145]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[145]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transport; Category:Date]]', $ws[145]["WIKI"]);
	 $this->assertEquals($ws[145]["PAGENAME"], 'HasArrivalDate');
	 $this->assertEquals($ws[145]["ID"], 'hasArrivalDate');
	 $this->assertEquals($ws[146]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[146]["WIKI"]);
	 $this->assertContains('', $ws[146]["WIKI"]);
	 $this->assertContains('', $ws[146]["WIKI"]);
	 $this->assertContains('', $ws[146]["WIKI"]);
	 $this->assertContains('', $ws[146]["WIKI"]);
	 $this->assertContains('', $ws[146]["WIKI"]);
	 $this->assertContains('', $ws[146]["WIKI"]);
	 $this->assertContains('', $ws[146]["WIKI"]);
	 $this->assertEquals($ws[146]["PAGENAME"], 'Transport');
	 $this->assertEquals($ws[146]["ID"], 'Transport');
	 $this->assertEquals($ws[147]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[147]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[147]["WIKI"]);
	 $this->assertEquals($ws[147]["PAGENAME"], 'HasInternetConnection');
	 $this->assertEquals($ws[147]["ID"], 'hasInternetConnection');
	 $this->assertEquals($ws[148]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[148]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[148]["WIKI"]);
	 $this->assertEquals($ws[148]["PAGENAME"], 'HasTV');
	 $this->assertEquals($ws[148]["ID"], 'hasTV');
	 $this->assertEquals($ws[149]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[149]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Room]]', $ws[149]["WIKI"]);
	 $this->assertEquals($ws[149]["PAGENAME"], 'HasBeds');
	 $this->assertEquals($ws[149]["ID"], 'hasBeds');
	 $this->assertEquals($ws[150]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[150]["WIKI"]);
	 $this->assertContains('', $ws[150]["WIKI"]);
	 $this->assertContains('', $ws[150]["WIKI"]);
	 $this->assertContains('', $ws[150]["WIKI"]);
	 $this->assertEquals($ws[150]["PAGENAME"], 'Room');
	 $this->assertEquals($ws[150]["ID"], 'Room');
	 $this->assertEquals($ws[151]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[151]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location]]', $ws[151]["WIKI"]);
	 $this->assertEquals($ws[151]["PAGENAME"], 'HasLandmark');
	 $this->assertEquals($ws[151]["ID"], 'hasLandmark');
	 $this->assertEquals($ws[152]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[152]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location; Category:Location]]', $ws[152]["WIKI"]);
	 $this->assertEquals($ws[152]["PAGENAME"], 'IsInLocation');
	 $this->assertEquals($ws[152]["ID"], 'isInLocation');
	 $this->assertEquals($ws[153]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[153]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Location]]', $ws[153]["WIKI"]);
	 $this->assertEquals($ws[153]["PAGENAME"], 'HasName');
	 $this->assertEquals($ws[153]["ID"], 'hasName');
	 $this->assertEquals($ws[154]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[154]["WIKI"]);
	 $this->assertContains('', $ws[154]["WIKI"]);
	 $this->assertContains('', $ws[154]["WIKI"]);
	 $this->assertContains('', $ws[154]["WIKI"]);
	 $this->assertEquals($ws[154]["PAGENAME"], 'Location');
	 $this->assertEquals($ws[154]["ID"], 'Location');
	 $this->assertEquals($ws[155]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[155]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[155]["WIKI"]);
	 $this->assertEquals($ws[155]["PAGENAME"], 'BelongsToChain');
	 $this->assertEquals($ws[155]["ID"], 'belongsToChain');
	 $this->assertEquals($ws[156]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[156]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[156]["WIKI"]);
	 $this->assertEquals($ws[156]["PAGENAME"], 'HasDistanceToSkiing');
	 $this->assertEquals($ws[156]["ID"], 'hasDistanceToSkiing');
	 $this->assertEquals($ws[157]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[157]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[157]["WIKI"]);
	 $this->assertEquals($ws[157]["PAGENAME"], 'HasDistanceToBeach');
	 $this->assertEquals($ws[157]["ID"], 'hasDistanceToBeach');
	 $this->assertEquals($ws[158]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Boolean]]', $ws[158]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[158]["WIKI"]);
	 $this->assertEquals($ws[158]["PAGENAME"], 'AreDogsAllowed');
	 $this->assertEquals($ws[158]["ID"], 'areDogsAllowed');
	 $this->assertEquals($ws[159]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[159]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[159]["WIKI"]);
	 $this->assertEquals($ws[159]["PAGENAME"], 'HasDescription');
	 $this->assertEquals($ws[159]["ID"], 'hasDescription');
	 $this->assertEquals($ws[160]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[160]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[160]["WIKI"]);
	 $this->assertEquals($ws[160]["PAGENAME"], 'HasRoomsAvailable');
	 $this->assertEquals($ws[160]["ID"], 'hasRoomsAvailable');
	 $this->assertEquals($ws[161]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[161]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[161]["WIKI"]);
	 $this->assertEquals($ws[161]["PAGENAME"], 'HasRooms');
	 $this->assertEquals($ws[161]["ID"], 'hasRooms');
	 $this->assertEquals($ws[162]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[162]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[162]["WIKI"]);
	 $this->assertEquals($ws[162]["PAGENAME"], 'HasCapacity');
	 $this->assertEquals($ws[162]["ID"], 'hasCapacity');
	 $this->assertEquals($ws[163]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[163]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[163]["WIKI"]);
	 $this->assertEquals($ws[163]["PAGENAME"], 'HasURL');
	 $this->assertEquals($ws[163]["ID"], 'hasURL');
	 $this->assertEquals($ws[164]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[164]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[164]["WIKI"]);
	 $this->assertEquals($ws[164]["PAGENAME"], 'HasPhoneNumber');
	 $this->assertEquals($ws[164]["ID"], 'hasPhoneNumber');
	 $this->assertEquals($ws[165]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[165]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[165]["WIKI"]);
	 $this->assertEquals($ws[165]["PAGENAME"], 'InStreet');
	 $this->assertEquals($ws[165]["ID"], 'inStreet');
	 $this->assertEquals($ws[166]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[166]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Hotel]]', $ws[166]["WIKI"]);
	 $this->assertEquals($ws[166]["PAGENAME"], 'HasStars');
	 $this->assertEquals($ws[166]["ID"], 'hasStars');
	 $this->assertEquals($ws[167]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertContains('', $ws[167]["WIKI"]);
	 $this->assertEquals($ws[167]["PAGENAME"], 'Hotel');
	 $this->assertEquals($ws[167]["ID"], 'Hotel');
	 $this->assertEquals($ws[168]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[168]["WIKI"]);
	 $this->assertEquals($ws[168]["PAGENAME"], 'RentalCar');
	 $this->assertEquals($ws[168]["ID"], 'RentalCar');
	 $this->assertEquals($ws[169]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[169]["WIKI"]);
	 $this->assertEquals($ws[169]["PAGENAME"], 'Taxi');
	 $this->assertEquals($ws[169]["ID"], 'Taxi');
	 $this->assertEquals($ws[170]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[170]["WIKI"]);
	 $this->assertEquals($ws[170]["PAGENAME"], 'Underground');
	 $this->assertEquals($ws[170]["ID"], 'Underground');
	 $this->assertEquals($ws[171]["NS"], 14);
	 $this->assertContains('[[Category:TransferVehicle]]', $ws[171]["WIKI"]);
	 $this->assertEquals($ws[171]["PAGENAME"], 'CityBus');
	 $this->assertEquals($ws[171]["ID"], 'CityBus');
	 $this->assertEquals($ws[172]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[172]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Transfer; Category:TransferVehicle]]', $ws[172]["WIKI"]);
	 $this->assertEquals($ws[172]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[172]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[173]["NS"], 14);
	 $this->assertContains('[[Category:Transport]]', $ws[173]["WIKI"]);
	 $this->assertContains('', $ws[173]["WIKI"]);
	 $this->assertEquals($ws[173]["PAGENAME"], 'Transfer');
	 $this->assertEquals($ws[173]["ID"], 'Transfer');
	 $this->assertEquals($ws[174]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[174]["WIKI"]);
	 $this->assertEquals($ws[174]["PAGENAME"], 'Continent');
	 $this->assertEquals($ws[174]["ID"], 'Continent');
	 $this->assertEquals($ws[175]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[175]["WIKI"]);
	 $this->assertEquals($ws[175]["PAGENAME"], 'Country');
	 $this->assertEquals($ws[175]["ID"], 'Country');
	 $this->assertEquals($ws[176]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[176]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[176]["WIKI"]);
	 $this->assertEquals($ws[176]["PAGENAME"], 'AmPm');
	 $this->assertEquals($ws[176]["ID"], 'AmPm');
	 $this->assertEquals($ws[177]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[177]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[177]["WIKI"]);
	 $this->assertEquals($ws[177]["PAGENAME"], 'HasMinute');
	 $this->assertEquals($ws[177]["ID"], 'hasMinute');
	 $this->assertEquals($ws[178]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[178]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Time]]', $ws[178]["WIKI"]);
	 $this->assertEquals($ws[178]["PAGENAME"], 'HasHour');
	 $this->assertEquals($ws[178]["ID"], 'hasHour');
	 $this->assertEquals($ws[179]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[179]["WIKI"]);
	 $this->assertContains('', $ws[179]["WIKI"]);
	 $this->assertContains('', $ws[179]["WIKI"]);
	 $this->assertContains('', $ws[179]["WIKI"]);
	 $this->assertEquals($ws[179]["PAGENAME"], 'Time');
	 $this->assertEquals($ws[179]["ID"], 'Time');
	 $this->assertEquals($ws[180]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[180]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[180]["WIKI"]);
	 $this->assertEquals($ws[180]["PAGENAME"], 'HasYear');
	 $this->assertEquals($ws[180]["ID"], 'hasYear');
	 $this->assertEquals($ws[181]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[181]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[181]["WIKI"]);
	 $this->assertEquals($ws[181]["PAGENAME"], 'HasMonth');
	 $this->assertEquals($ws[181]["ID"], 'hasMonth');
	 $this->assertEquals($ws[182]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Integer]]', $ws[182]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Date]]', $ws[182]["WIKI"]);
	 $this->assertEquals($ws[182]["PAGENAME"], 'HasDay');
	 $this->assertEquals($ws[182]["ID"], 'hasDay');
	 $this->assertEquals($ws[183]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[183]["WIKI"]);
	 $this->assertContains('', $ws[183]["WIKI"]);
	 $this->assertContains('', $ws[183]["WIKI"]);
	 $this->assertContains('', $ws[183]["WIKI"]);
	 $this->assertEquals($ws[183]["PAGENAME"], 'Date');
	 $this->assertEquals($ws[183]["ID"], 'Date');
	 $this->assertEquals($ws[184]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[184]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:City]]', $ws[184]["WIKI"]);
	 $this->assertEquals($ws[184]["PAGENAME"], 'HasWidth');
	 $this->assertEquals($ws[184]["ID"], 'hasWidth');
	 $this->assertEquals($ws[185]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Number]]', $ws[185]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:City]]', $ws[185]["WIKI"]);
	 $this->assertEquals($ws[185]["PAGENAME"], 'HasLength');
	 $this->assertEquals($ws[185]["ID"], 'hasLength');
	 $this->assertEquals($ws[186]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[186]["WIKI"]);
	 $this->assertContains('', $ws[186]["WIKI"]);
	 $this->assertContains('', $ws[186]["WIKI"]);
	 $this->assertEquals($ws[186]["PAGENAME"], 'City');
	 $this->assertEquals($ws[186]["ID"], 'City');
	 $this->assertEquals($ws[187]["NS"], 14);
	 $this->assertContains('[[Category:Location]]', $ws[187]["WIKI"]);
	 $this->assertEquals($ws[187]["PAGENAME"], 'Airport');
	 $this->assertEquals($ws[187]["ID"], 'Airport');
	 $this->assertEquals($ws[188]["NS"], 102);
	 $this->assertContains('[[Has type::Type:Page]]', $ws[188]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Customer; Category:Vehicle]]', $ws[188]["WIKI"]);
	 $this->assertEquals($ws[188]["PAGENAME"], 'HatesVehicle');
	 $this->assertEquals($ws[188]["ID"], 'hatesVehicle');
	 $this->assertEquals($ws[189]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[189]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Customer]]', $ws[189]["WIKI"]);
	 $this->assertEquals($ws[189]["PAGENAME"], 'HasName');
	 $this->assertEquals($ws[189]["ID"], 'hasName');
	 $this->assertEquals($ws[190]["NS"], 14);
	 $this->assertContains('[[Category:DEFAULT ROOT CONCEPT]]', $ws[190]["WIKI"]);
	 $this->assertContains('', $ws[190]["WIKI"]);
	 $this->assertContains('', $ws[190]["WIKI"]);
	 $this->assertEquals($ws[190]["PAGENAME"], 'Customer');
	 $this->assertEquals($ws[190]["ID"], 'Customer');
	 $this->assertEquals($ws[191]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[191]["WIKI"]);
	 $this->assertEquals($ws[191]["PAGENAME"], 'Ship');
	 $this->assertEquals($ws[191]["ID"], 'Ship');
	 $this->assertEquals($ws[192]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[192]["WIKI"]);
	 $this->assertEquals($ws[192]["PAGENAME"], 'Motorbike');
	 $this->assertEquals($ws[192]["ID"], 'Motorbike');
	 $this->assertEquals($ws[193]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[193]["WIKI"]);
	 $this->assertEquals($ws[193]["PAGENAME"], 'Ferry');
	 $this->assertEquals($ws[193]["ID"], 'Ferry');
	 $this->assertEquals($ws[194]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[194]["WIKI"]);
	 $this->assertEquals($ws[194]["PAGENAME"], 'Car');
	 $this->assertEquals($ws[194]["ID"], 'Car');
	 $this->assertEquals($ws[195]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[195]["WIKI"]);
	 $this->assertEquals($ws[195]["PAGENAME"], 'Train');
	 $this->assertEquals($ws[195]["ID"], 'Train');
	 $this->assertEquals($ws[196]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[196]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Plane]]', $ws[196]["WIKI"]);
	 $this->assertEquals($ws[196]["PAGENAME"], 'HasProducer');
	 $this->assertEquals($ws[196]["ID"], 'hasProducer');
	 $this->assertEquals($ws[197]["NS"], 102);
	 $this->assertContains('[[Has type::Type:String]]', $ws[197]["WIKI"]);
	 $this->assertContains('[[Has domain and range::Category:Plane]]', $ws[197]["WIKI"]);
	 $this->assertEquals($ws[197]["PAGENAME"], 'HasModel');
	 $this->assertEquals($ws[197]["ID"], 'hasModel');
	 $this->assertEquals($ws[198]["NS"], 14);
	 $this->assertContains('[[Category:TransportVehicle]]', $ws[198]["WIKI"]);
	 $this->assertContains('', $ws[198]["WIKI"]);
	 $this->assertContains('', $ws[198]["WIKI"]);
	 $this->assertEquals($ws[198]["PAGENAME"], 'Plane');
	 $this->assertEquals($ws[198]["ID"], 'Plane');
	 $this->assertEquals($ws[199]["NS"], 102);
	 $this->assertEquals($ws[199]["PAGENAME"], 'ByCustomer');
	 $this->assertEquals($ws[199]["ID"], 'byCustomer');
	 $this->assertEquals($ws[200]["NS"], 102);
	 $this->assertEquals($ws[200]["PAGENAME"], 'HasArrivalDate');
	 $this->assertEquals($ws[200]["ID"], 'hasArrivalDate');
	 $this->assertEquals($ws[201]["NS"], 102);
	 $this->assertEquals($ws[201]["PAGENAME"], 'HasArrivalLocation');
	 $this->assertEquals($ws[201]["ID"], 'hasArrivalLocation');
	 $this->assertEquals($ws[202]["NS"], 102);
	 $this->assertEquals($ws[202]["PAGENAME"], 'HasArrivalTime');
	 $this->assertEquals($ws[202]["ID"], 'hasArrivalTime');
	 $this->assertEquals($ws[203]["NS"], 102);
	 $this->assertEquals($ws[203]["PAGENAME"], 'HasDepartureDate');
	 $this->assertEquals($ws[203]["ID"], 'hasDepartureDate');
	 $this->assertEquals($ws[204]["NS"], 102);
	 $this->assertEquals($ws[204]["PAGENAME"], 'HasDepartureLocation');
	 $this->assertEquals($ws[204]["ID"], 'hasDepartureLocation');
	 $this->assertEquals($ws[205]["NS"], 102);
	 $this->assertEquals($ws[205]["PAGENAME"], 'HasDepartureTime');
	 $this->assertEquals($ws[205]["ID"], 'hasDepartureTime');
	 $this->assertEquals($ws[206]["NS"], 102);
	 $this->assertEquals($ws[206]["PAGENAME"], 'HasTransports');
	 $this->assertEquals($ws[206]["ID"], 'hasTransports');
	 $this->assertEquals($ws[207]["NS"], 102);
	 $this->assertEquals($ws[207]["PAGENAME"], 'HatesVehicle');
	 $this->assertEquals($ws[207]["ID"], 'hatesVehicle');
	 $this->assertEquals($ws[208]["NS"], 102);
	 $this->assertEquals($ws[208]["PAGENAME"], 'IsInLocation');
	 $this->assertEquals($ws[208]["ID"], 'isInLocation');
	 $this->assertEquals($ws[209]["NS"], 102);
	 $this->assertEquals($ws[209]["PAGENAME"], 'UsesVehicle');
	 $this->assertEquals($ws[209]["ID"], 'usesVehicle');
	 $this->assertEquals($ws[210]["NS"], 102);
	 $this->assertEquals($ws[210]["PAGENAME"], 'AmPm');
	 $this->assertEquals($ws[210]["ID"], 'AmPm');
	 $this->assertEquals($ws[211]["NS"], 102);
	 $this->assertEquals($ws[211]["PAGENAME"], 'AreDogsAllowed');
	 $this->assertEquals($ws[211]["ID"], 'areDogsAllowed');
	 $this->assertEquals($ws[212]["NS"], 102);
	 $this->assertEquals($ws[212]["PAGENAME"], 'BelongsToChain');
	 $this->assertEquals($ws[212]["ID"], 'belongsToChain');
	 $this->assertEquals($ws[213]["NS"], 102);
	 $this->assertEquals($ws[213]["PAGENAME"], 'HasBeds');
	 $this->assertEquals($ws[213]["ID"], 'hasBeds');
	 $this->assertEquals($ws[214]["NS"], 102);
	 $this->assertEquals($ws[214]["PAGENAME"], 'HasCapacity');
	 $this->assertEquals($ws[214]["ID"], 'hasCapacity');
	 $this->assertEquals($ws[215]["NS"], 102);
	 $this->assertEquals($ws[215]["PAGENAME"], 'HasDay');
	 $this->assertEquals($ws[215]["ID"], 'hasDay');
	 $this->assertEquals($ws[216]["NS"], 102);
	 $this->assertEquals($ws[216]["PAGENAME"], 'HasDescription');
	 $this->assertEquals($ws[216]["ID"], 'hasDescription');
	 $this->assertEquals($ws[217]["NS"], 102);
	 $this->assertEquals($ws[217]["PAGENAME"], 'HasDistanceToBeach');
	 $this->assertEquals($ws[217]["ID"], 'hasDistanceToBeach');
	 $this->assertEquals($ws[218]["NS"], 102);
	 $this->assertEquals($ws[218]["PAGENAME"], 'HasDistanceToSkiing');
	 $this->assertEquals($ws[218]["ID"], 'hasDistanceToSkiing');
	 $this->assertEquals($ws[219]["NS"], 102);
	 $this->assertEquals($ws[219]["PAGENAME"], 'HasHour');
	 $this->assertEquals($ws[219]["ID"], 'hasHour');
	 $this->assertEquals($ws[220]["NS"], 102);
	 $this->assertEquals($ws[220]["PAGENAME"], 'HasInternetConnection');
	 $this->assertEquals($ws[220]["ID"], 'hasInternetConnection');
	 $this->assertEquals($ws[221]["NS"], 102);
	 $this->assertEquals($ws[221]["PAGENAME"], 'HasLandmark');
	 $this->assertEquals($ws[221]["ID"], 'hasLandmark');
	 $this->assertEquals($ws[222]["NS"], 102);
	 $this->assertEquals($ws[222]["PAGENAME"], 'HasLength');
	 $this->assertEquals($ws[222]["ID"], 'hasLength');
	 $this->assertEquals($ws[223]["NS"], 102);
	 $this->assertEquals($ws[223]["PAGENAME"], 'HasMinute');
	 $this->assertEquals($ws[223]["ID"], 'hasMinute');
	 $this->assertEquals($ws[224]["NS"], 102);
	 $this->assertEquals($ws[224]["PAGENAME"], 'HasModel');
	 $this->assertEquals($ws[224]["ID"], 'hasModel');
	 $this->assertEquals($ws[225]["NS"], 102);
	 $this->assertEquals($ws[225]["PAGENAME"], 'HasMonth');
	 $this->assertEquals($ws[225]["ID"], 'hasMonth');
	 $this->assertEquals($ws[226]["NS"], 102);
	 $this->assertEquals($ws[226]["PAGENAME"], 'HasName');
	 $this->assertEquals($ws[226]["ID"], 'hasName');
	 $this->assertEquals($ws[227]["NS"], 102);
	 $this->assertEquals($ws[227]["PAGENAME"], 'HasPhoneNumber');
	 $this->assertEquals($ws[227]["ID"], 'hasPhoneNumber');
	 $this->assertEquals($ws[228]["NS"], 102);
	 $this->assertEquals($ws[228]["PAGENAME"], 'HasPriceBusinessClass');
	 $this->assertEquals($ws[228]["ID"], 'hasPriceBusinessClass');
	 $this->assertEquals($ws[229]["NS"], 102);
	 $this->assertEquals($ws[229]["PAGENAME"], 'HasPriceEconomyClass');
	 $this->assertEquals($ws[229]["ID"], 'hasPriceEconomyClass');
	 $this->assertEquals($ws[230]["NS"], 102);
	 $this->assertEquals($ws[230]["PAGENAME"], 'HasPriceFirstClass');
	 $this->assertEquals($ws[230]["ID"], 'hasPriceFirstClass');
	 $this->assertEquals($ws[231]["NS"], 102);
	 $this->assertEquals($ws[231]["PAGENAME"], 'HasProducer');
	 $this->assertEquals($ws[231]["ID"], 'hasProducer');
	 $this->assertEquals($ws[232]["NS"], 102);
	 $this->assertEquals($ws[232]["PAGENAME"], 'HasRooms');
	 $this->assertEquals($ws[232]["ID"], 'hasRooms');
	 $this->assertEquals($ws[233]["NS"], 102);
	 $this->assertEquals($ws[233]["PAGENAME"], 'HasRoomsAvailable');
	 $this->assertEquals($ws[233]["ID"], 'hasRoomsAvailable');
	 $this->assertEquals($ws[234]["NS"], 102);
	 $this->assertEquals($ws[234]["PAGENAME"], 'HasStars');
	 $this->assertEquals($ws[234]["ID"], 'hasStars');
	 $this->assertEquals($ws[235]["NS"], 102);
	 $this->assertEquals($ws[235]["PAGENAME"], 'HasTV');
	 $this->assertEquals($ws[235]["ID"], 'hasTV');
	 $this->assertEquals($ws[236]["NS"], 102);
	 $this->assertEquals($ws[236]["PAGENAME"], 'HasURL');
	 $this->assertEquals($ws[236]["ID"], 'hasURL');
	 $this->assertEquals($ws[237]["NS"], 102);
	 $this->assertEquals($ws[237]["PAGENAME"], 'HasWidth');
	 $this->assertEquals($ws[237]["ID"], 'hasWidth');
	 $this->assertEquals($ws[238]["NS"], 102);
	 $this->assertEquals($ws[238]["PAGENAME"], 'HasYear');
	 $this->assertEquals($ws[238]["ID"], 'hasYear');
	 $this->assertEquals($ws[239]["NS"], 102);
	 $this->assertEquals($ws[239]["PAGENAME"], 'InStreet');
	 $this->assertEquals($ws[239]["ID"], 'inStreet');
	 $this->assertEquals($ws[240]["NS"], 0);
	 $this->assertContains('[[HasDay::5]]', $ws[240]["WIKI"]);
	 $this->assertEquals($ws[240]["PAGENAME"], 'D1');
	 $this->assertEquals($ws[240]["ID"], 'hasDay');
	 $this->assertEquals($ws[241]["NS"], 0);
	 $this->assertContains('[[HasMonth::4]]', $ws[241]["WIKI"]);
	 $this->assertEquals($ws[241]["PAGENAME"], 'D1');
	 $this->assertEquals($ws[241]["ID"], 'hasMonth');
	 $this->assertEquals($ws[242]["NS"], 0);
	 $this->assertContains('[[HasYear::2002]]', $ws[242]["WIKI"]);
	 $this->assertEquals($ws[242]["PAGENAME"], 'D1');
	 $this->assertEquals($ws[242]["ID"], 'hasYear');
	 $this->assertEquals($ws[243]["NS"], 0);
	 $this->assertContains('[[Category:Date]]', $ws[243]["WIKI"]);
	 $this->assertEquals($ws[243]["PAGENAME"], 'D1');
	 $this->assertEquals($ws[243]["ID"], 'd1');
	 $this->assertEquals($ws[244]["NS"], 0);
	 $this->assertContains('[[HasDay::11]]', $ws[244]["WIKI"]);
	 $this->assertEquals($ws[244]["PAGENAME"], 'D2');
	 $this->assertEquals($ws[244]["ID"], 'hasDay');
	 $this->assertEquals($ws[245]["NS"], 0);
	 $this->assertContains('[[HasMonth::4]]', $ws[245]["WIKI"]);
	 $this->assertEquals($ws[245]["PAGENAME"], 'D2');
	 $this->assertEquals($ws[245]["ID"], 'hasMonth');
	 $this->assertEquals($ws[246]["NS"], 0);
	 $this->assertContains('[[HasYear::2002]]', $ws[246]["WIKI"]);
	 $this->assertEquals($ws[246]["PAGENAME"], 'D2');
	 $this->assertEquals($ws[246]["ID"], 'hasYear');
	 $this->assertEquals($ws[247]["NS"], 0);
	 $this->assertContains('[[Category:Date]]', $ws[247]["WIKI"]);
	 $this->assertEquals($ws[247]["PAGENAME"], 'D2');
	 $this->assertEquals($ws[247]["ID"], 'd2');
	 $this->assertEquals($ws[248]["NS"], 0);
	 $this->assertContains('[[HasDay::15]]', $ws[248]["WIKI"]);
	 $this->assertEquals($ws[248]["PAGENAME"], 'D3');
	 $this->assertEquals($ws[248]["ID"], 'hasDay');
	 $this->assertEquals($ws[249]["NS"], 0);
	 $this->assertContains('[[HasMonth::4]]', $ws[249]["WIKI"]);
	 $this->assertEquals($ws[249]["PAGENAME"], 'D3');
	 $this->assertEquals($ws[249]["ID"], 'hasMonth');
	 $this->assertEquals($ws[250]["NS"], 0);
	 $this->assertContains('[[HasYear::2002]]', $ws[250]["WIKI"]);
	 $this->assertEquals($ws[250]["PAGENAME"], 'D3');
	 $this->assertEquals($ws[250]["ID"], 'hasYear');
	 $this->assertEquals($ws[251]["NS"], 0);
	 $this->assertContains('[[Category:Date]]', $ws[251]["WIKI"]);
	 $this->assertEquals($ws[251]["PAGENAME"], 'D3');
	 $this->assertEquals($ws[251]["ID"], 'd3');
	 $this->assertEquals($ws[252]["NS"], 0);
	 $this->assertContains('[[BelongsToChain::Holiday Inn]]', $ws[252]["WIKI"]);
	 $this->assertEquals($ws[252]["PAGENAME"], 'H1');
	 $this->assertEquals($ws[252]["ID"], 'belongsToChain');
	 $this->assertEquals($ws[253]["NS"], 0);
	 $this->assertContains('[[IsInLocation::Newyork]]', $ws[253]["WIKI"]);
	 $this->assertEquals($ws[253]["PAGENAME"], 'H1');
	 $this->assertEquals($ws[253]["ID"], 'isInLocation');
	 $this->assertEquals($ws[254]["NS"], 0);
	 $this->assertContains('[[Category:Hotel]]', $ws[254]["WIKI"]);
	 $this->assertEquals($ws[254]["PAGENAME"], 'H1');
	 $this->assertEquals($ws[254]["ID"], 'h1');
	 $this->assertEquals($ws[255]["NS"], 0);
	 $this->assertContains('[[BelongsToChain::holiday inn]]', $ws[255]["WIKI"]);
	 $this->assertEquals($ws[255]["PAGENAME"], 'H2');
	 $this->assertEquals($ws[255]["ID"], 'belongsToChain');
	 $this->assertEquals($ws[256]["NS"], 0);
	 $this->assertContains('[[IsInLocation::Washington]]', $ws[256]["WIKI"]);
	 $this->assertEquals($ws[256]["PAGENAME"], 'H2');
	 $this->assertEquals($ws[256]["ID"], 'isInLocation');
	 $this->assertEquals($ws[257]["NS"], 0);
	 $this->assertContains('[[Category:Hotel]]', $ws[257]["WIKI"]);
	 $this->assertEquals($ws[257]["PAGENAME"], 'H2');
	 $this->assertEquals($ws[257]["ID"], 'h2');
	 $this->assertEquals($ws[258]["NS"], 0);
	 $this->assertContains('[[HasName::John]]', $ws[258]["WIKI"]);
	 $this->assertEquals($ws[258]["PAGENAME"], 'John');
	 $this->assertEquals($ws[258]["ID"], 'hasName');
	 $this->assertEquals($ws[259]["NS"], 0);
	 $this->assertContains('[[Category:Customer]]', $ws[259]["WIKI"]);
	 $this->assertEquals($ws[259]["PAGENAME"], 'John');
	 $this->assertEquals($ws[259]["ID"], 'john');
	 $this->assertEquals($ws[260]["NS"], 0);
	 $this->assertContains('[[HasName::Madrid]]', $ws[260]["WIKI"]);
	 $this->assertEquals($ws[260]["PAGENAME"], 'Madrid');
	 $this->assertEquals($ws[260]["ID"], 'hasName');
	 $this->assertEquals($ws[261]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[261]["WIKI"]);
	 $this->assertEquals($ws[261]["PAGENAME"], 'Madrid');
	 $this->assertEquals($ws[261]["ID"], 'madrid');
	 $this->assertEquals($ws[262]["NS"], 0);
	 $this->assertContains('[[HasLandmark::statue of liberty]]', $ws[262]["WIKI"]);
	 $this->assertEquals($ws[262]["PAGENAME"], 'Newyork');
	 $this->assertEquals($ws[262]["ID"], 'hasLandmark');
	 $this->assertEquals($ws[263]["NS"], 0);
	 $this->assertContains('[[HasName::New York]]', $ws[263]["WIKI"]);
	 $this->assertEquals($ws[263]["PAGENAME"], 'Newyork');
	 $this->assertEquals($ws[263]["ID"], 'hasName');
	 $this->assertEquals($ws[264]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[264]["WIKI"]);
	 $this->assertEquals($ws[264]["PAGENAME"], 'Newyork');
	 $this->assertEquals($ws[264]["ID"], 'newyork');
	 $this->assertEquals($ws[265]["NS"], 0);
	 $this->assertContains('[[HasArrivalDate::D1]]', $ws[265]["WIKI"]);
	 $this->assertEquals($ws[265]["PAGENAME"], 'T1');
	 $this->assertEquals($ws[265]["ID"], 'hasArrivalDate');
	 $this->assertEquals($ws[266]["NS"], 0);
	 $this->assertContains('[[HasArrivalLocation::Newyork]]', $ws[266]["WIKI"]);
	 $this->assertEquals($ws[266]["PAGENAME"], 'T1');
	 $this->assertEquals($ws[266]["ID"], 'hasArrivalLocation');
	 $this->assertEquals($ws[267]["NS"], 0);
	 $this->assertContains('[[HasDepartureDate::D1]]', $ws[267]["WIKI"]);
	 $this->assertEquals($ws[267]["PAGENAME"], 'T1');
	 $this->assertEquals($ws[267]["ID"], 'hasDepartureDate');
	 $this->assertEquals($ws[268]["NS"], 0);
	 $this->assertContains('[[HasDepartureLocation::Madrid]]', $ws[268]["WIKI"]);
	 $this->assertEquals($ws[268]["PAGENAME"], 'T1');
	 $this->assertEquals($ws[268]["ID"], 'hasDepartureLocation');
	 $this->assertEquals($ws[269]["NS"], 0);
	 $this->assertContains('[[Category:Transport]]', $ws[269]["WIKI"]);
	 $this->assertEquals($ws[269]["PAGENAME"], 'T1');
	 $this->assertEquals($ws[269]["ID"], 't1');
	 $this->assertEquals($ws[270]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[270]["WIKI"]);
	 $this->assertEquals($ws[270]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[270]["ID"], 'hasName');
	 $this->assertEquals($ws[271]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[271]["WIKI"]);
	 $this->assertEquals($ws[271]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[271]["ID"], 'washington');
	 $this->assertEquals($ws[272]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[272]["WIKI"]);
	 $this->assertEquals($ws[272]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[272]["ID"], 'hasName');
	 $this->assertEquals($ws[273]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[273]["WIKI"]);
	 $this->assertEquals($ws[273]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[273]["ID"], 'washington');
	 $this->assertEquals($ws[274]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[274]["WIKI"]);
	 $this->assertEquals($ws[274]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[274]["ID"], 'hasName');
	 $this->assertEquals($ws[275]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[275]["WIKI"]);
	 $this->assertEquals($ws[275]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[275]["ID"], 'washington');
	 $this->assertEquals($ws[276]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[276]["WIKI"]);
	 $this->assertEquals($ws[276]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[276]["ID"], 'hasName');
	 $this->assertEquals($ws[277]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[277]["WIKI"]);
	 $this->assertEquals($ws[277]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[277]["ID"], 'washington');
	 $this->assertEquals($ws[278]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[278]["WIKI"]);
	 $this->assertEquals($ws[278]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[278]["ID"], 'hasName');
	 $this->assertEquals($ws[279]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[279]["WIKI"]);
	 $this->assertEquals($ws[279]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[279]["ID"], 'washington');
	 $this->assertEquals($ws[280]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[280]["WIKI"]);
	 $this->assertEquals($ws[280]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[280]["ID"], 'hasName');
	 $this->assertEquals($ws[281]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[281]["WIKI"]);
	 $this->assertEquals($ws[281]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[281]["ID"], 'washington');
	 $this->assertEquals($ws[282]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[282]["WIKI"]);
	 $this->assertEquals($ws[282]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[282]["ID"], 'hasName');
	 $this->assertEquals($ws[283]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[283]["WIKI"]);
	 $this->assertEquals($ws[283]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[283]["ID"], 'washington');
	 $this->assertEquals($ws[284]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[284]["WIKI"]);
	 $this->assertEquals($ws[284]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[284]["ID"], 'hasName');
	 $this->assertEquals($ws[285]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[285]["WIKI"]);
	 $this->assertEquals($ws[285]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[285]["ID"], 'washington');
	 $this->assertEquals($ws[286]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[286]["WIKI"]);
	 $this->assertEquals($ws[286]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[286]["ID"], 'hasName');
	 $this->assertEquals($ws[287]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[287]["WIKI"]);
	 $this->assertEquals($ws[287]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[287]["ID"], 'washington');
	 $this->assertEquals($ws[288]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[288]["WIKI"]);
	 $this->assertEquals($ws[288]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[288]["ID"], 'hasName');
	 $this->assertEquals($ws[289]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[289]["WIKI"]);
	 $this->assertEquals($ws[289]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[289]["ID"], 'washington');
	 $this->assertEquals($ws[290]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[290]["WIKI"]);
	 $this->assertEquals($ws[290]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[290]["ID"], 'hasName');
	 $this->assertEquals($ws[291]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[291]["WIKI"]);
	 $this->assertEquals($ws[291]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[291]["ID"], 'washington');
	 $this->assertEquals($ws[292]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[292]["WIKI"]);
	 $this->assertEquals($ws[292]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[292]["ID"], 'hasName');
	 $this->assertEquals($ws[293]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[293]["WIKI"]);
	 $this->assertEquals($ws[293]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[293]["ID"], 'washington');
	 $this->assertEquals($ws[294]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[294]["WIKI"]);
	 $this->assertEquals($ws[294]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[294]["ID"], 'hasName');
	 $this->assertEquals($ws[295]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[295]["WIKI"]);
	 $this->assertEquals($ws[295]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[295]["ID"], 'washington');
	 $this->assertEquals($ws[296]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[296]["WIKI"]);
	 $this->assertEquals($ws[296]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[296]["ID"], 'hasName');
	 $this->assertEquals($ws[297]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[297]["WIKI"]);
	 $this->assertEquals($ws[297]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[297]["ID"], 'washington');
	 $this->assertEquals($ws[298]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[298]["WIKI"]);
	 $this->assertEquals($ws[298]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[298]["ID"], 'hasName');
	 $this->assertEquals($ws[299]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[299]["WIKI"]);
	 $this->assertEquals($ws[299]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[299]["ID"], 'washington');
	 $this->assertEquals($ws[300]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[300]["WIKI"]);
	 $this->assertEquals($ws[300]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[300]["ID"], 'hasName');
	 $this->assertEquals($ws[301]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[301]["WIKI"]);
	 $this->assertEquals($ws[301]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[301]["ID"], 'washington');
	 $this->assertEquals($ws[302]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[302]["WIKI"]);
	 $this->assertEquals($ws[302]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[302]["ID"], 'hasName');
	 $this->assertEquals($ws[303]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[303]["WIKI"]);
	 $this->assertEquals($ws[303]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[303]["ID"], 'washington');
	 $this->assertEquals($ws[304]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[304]["WIKI"]);
	 $this->assertEquals($ws[304]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[304]["ID"], 'hasName');
	 $this->assertEquals($ws[305]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[305]["WIKI"]);
	 $this->assertEquals($ws[305]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[305]["ID"], 'washington');
	 $this->assertEquals($ws[306]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[306]["WIKI"]);
	 $this->assertEquals($ws[306]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[306]["ID"], 'hasName');
	 $this->assertEquals($ws[307]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[307]["WIKI"]);
	 $this->assertEquals($ws[307]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[307]["ID"], 'washington');
	 $this->assertEquals($ws[308]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[308]["WIKI"]);
	 $this->assertEquals($ws[308]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[308]["ID"], 'hasName');
	 $this->assertEquals($ws[309]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[309]["WIKI"]);
	 $this->assertEquals($ws[309]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[309]["ID"], 'washington');
	 $this->assertEquals($ws[310]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[310]["WIKI"]);
	 $this->assertEquals($ws[310]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[310]["ID"], 'hasName');
	 $this->assertEquals($ws[311]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[311]["WIKI"]);
	 $this->assertEquals($ws[311]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[311]["ID"], 'washington');
	 $this->assertEquals($ws[312]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[312]["WIKI"]);
	 $this->assertEquals($ws[312]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[312]["ID"], 'hasName');
	 $this->assertEquals($ws[313]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[313]["WIKI"]);
	 $this->assertEquals($ws[313]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[313]["ID"], 'washington');
	 $this->assertEquals($ws[314]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[314]["WIKI"]);
	 $this->assertEquals($ws[314]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[314]["ID"], 'hasName');
	 $this->assertEquals($ws[315]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[315]["WIKI"]);
	 $this->assertEquals($ws[315]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[315]["ID"], 'washington');
	 $this->assertEquals($ws[316]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[316]["WIKI"]);
	 $this->assertEquals($ws[316]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[316]["ID"], 'hasName');
	 $this->assertEquals($ws[317]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[317]["WIKI"]);
	 $this->assertEquals($ws[317]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[317]["ID"], 'washington');
	 $this->assertEquals($ws[318]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[318]["WIKI"]);
	 $this->assertEquals($ws[318]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[318]["ID"], 'hasName');
	 $this->assertEquals($ws[319]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[319]["WIKI"]);
	 $this->assertEquals($ws[319]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[319]["ID"], 'washington');
	 $this->assertEquals($ws[320]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[320]["WIKI"]);
	 $this->assertEquals($ws[320]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[320]["ID"], 'hasName');
	 $this->assertEquals($ws[321]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[321]["WIKI"]);
	 $this->assertEquals($ws[321]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[321]["ID"], 'washington');
	 $this->assertEquals($ws[322]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[322]["WIKI"]);
	 $this->assertEquals($ws[322]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[322]["ID"], 'hasName');
	 $this->assertEquals($ws[323]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[323]["WIKI"]);
	 $this->assertEquals($ws[323]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[323]["ID"], 'washington');
	 $this->assertEquals($ws[324]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[324]["WIKI"]);
	 $this->assertEquals($ws[324]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[324]["ID"], 'hasName');
	 $this->assertEquals($ws[325]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[325]["WIKI"]);
	 $this->assertEquals($ws[325]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[325]["ID"], 'washington');
	 $this->assertEquals($ws[326]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[326]["WIKI"]);
	 $this->assertEquals($ws[326]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[326]["ID"], 'hasName');
	 $this->assertEquals($ws[327]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[327]["WIKI"]);
	 $this->assertEquals($ws[327]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[327]["ID"], 'washington');
	 $this->assertEquals($ws[328]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[328]["WIKI"]);
	 $this->assertEquals($ws[328]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[328]["ID"], 'hasName');
	 $this->assertEquals($ws[329]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[329]["WIKI"]);
	 $this->assertEquals($ws[329]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[329]["ID"], 'washington');
	 $this->assertEquals($ws[330]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[330]["WIKI"]);
	 $this->assertEquals($ws[330]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[330]["ID"], 'hasName');
	 $this->assertEquals($ws[331]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[331]["WIKI"]);
	 $this->assertEquals($ws[331]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[331]["ID"], 'washington');
	 $this->assertEquals($ws[332]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[332]["WIKI"]);
	 $this->assertEquals($ws[332]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[332]["ID"], 'hasName');
	 $this->assertEquals($ws[333]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[333]["WIKI"]);
	 $this->assertEquals($ws[333]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[333]["ID"], 'washington');
	 $this->assertEquals($ws[334]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[334]["WIKI"]);
	 $this->assertEquals($ws[334]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[334]["ID"], 'hasName');
	 $this->assertEquals($ws[335]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[335]["WIKI"]);
	 $this->assertEquals($ws[335]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[335]["ID"], 'washington');
	 $this->assertEquals($ws[336]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[336]["WIKI"]);
	 $this->assertEquals($ws[336]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[336]["ID"], 'hasName');
	 $this->assertEquals($ws[337]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[337]["WIKI"]);
	 $this->assertEquals($ws[337]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[337]["ID"], 'washington');
	 $this->assertEquals($ws[338]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[338]["WIKI"]);
	 $this->assertEquals($ws[338]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[338]["ID"], 'hasName');
	 $this->assertEquals($ws[339]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[339]["WIKI"]);
	 $this->assertEquals($ws[339]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[339]["ID"], 'washington');
	 $this->assertEquals($ws[340]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[340]["WIKI"]);
	 $this->assertEquals($ws[340]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[340]["ID"], 'hasName');
	 $this->assertEquals($ws[341]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[341]["WIKI"]);
	 $this->assertEquals($ws[341]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[341]["ID"], 'washington');
	 $this->assertEquals($ws[342]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[342]["WIKI"]);
	 $this->assertEquals($ws[342]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[342]["ID"], 'hasName');
	 $this->assertEquals($ws[343]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[343]["WIKI"]);
	 $this->assertEquals($ws[343]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[343]["ID"], 'washington');
	 $this->assertEquals($ws[344]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[344]["WIKI"]);
	 $this->assertEquals($ws[344]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[344]["ID"], 'hasName');
	 $this->assertEquals($ws[345]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[345]["WIKI"]);
	 $this->assertEquals($ws[345]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[345]["ID"], 'washington');
	 $this->assertEquals($ws[346]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[346]["WIKI"]);
	 $this->assertEquals($ws[346]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[346]["ID"], 'hasName');
	 $this->assertEquals($ws[347]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[347]["WIKI"]);
	 $this->assertEquals($ws[347]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[347]["ID"], 'washington');
	 $this->assertEquals($ws[348]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[348]["WIKI"]);
	 $this->assertEquals($ws[348]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[348]["ID"], 'hasName');
	 $this->assertEquals($ws[349]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[349]["WIKI"]);
	 $this->assertEquals($ws[349]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[349]["ID"], 'washington');
	 $this->assertEquals($ws[350]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[350]["WIKI"]);
	 $this->assertEquals($ws[350]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[350]["ID"], 'hasName');
	 $this->assertEquals($ws[351]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[351]["WIKI"]);
	 $this->assertEquals($ws[351]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[351]["ID"], 'washington');
	 $this->assertEquals($ws[352]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[352]["WIKI"]);
	 $this->assertEquals($ws[352]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[352]["ID"], 'hasName');
	 $this->assertEquals($ws[353]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[353]["WIKI"]);
	 $this->assertEquals($ws[353]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[353]["ID"], 'washington');
	 $this->assertEquals($ws[354]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[354]["WIKI"]);
	 $this->assertEquals($ws[354]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[354]["ID"], 'hasName');
	 $this->assertEquals($ws[355]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[355]["WIKI"]);
	 $this->assertEquals($ws[355]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[355]["ID"], 'washington');
	 $this->assertEquals($ws[356]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[356]["WIKI"]);
	 $this->assertEquals($ws[356]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[356]["ID"], 'hasName');
	 $this->assertEquals($ws[357]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[357]["WIKI"]);
	 $this->assertEquals($ws[357]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[357]["ID"], 'washington');
	 $this->assertEquals($ws[358]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[358]["WIKI"]);
	 $this->assertEquals($ws[358]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[358]["ID"], 'hasName');
	 $this->assertEquals($ws[359]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[359]["WIKI"]);
	 $this->assertEquals($ws[359]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[359]["ID"], 'washington');
	 $this->assertEquals($ws[360]["NS"], 0);
	 $this->assertContains('[[HasName::Washington]]', $ws[360]["WIKI"]);
	 $this->assertEquals($ws[360]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[360]["ID"], 'hasName');
	 $this->assertEquals($ws[361]["NS"], 0);
	 $this->assertContains('[[Category:City]]', $ws[361]["WIKI"]);
	 $this->assertEquals($ws[361]["PAGENAME"], 'Washington');
	 $this->assertEquals($ws[361]["ID"], 'washington');

	}

	function replaceWhitespaces(& $ws) {
		for($j = 0; $j < count($ws); $j++) {
			for($i = 0; $i < count($ws[$j]['WIKI']); $i++) {
				$ws[$j]['WIKI'][$i] = str_replace("\n", "", $ws[$j]['WIKI'][$i]);
				$ws[$j]['WIKI'][$i] = str_replace("\r", "", $ws[$j]['WIKI'][$i]);
				$ws[$j]['WIKI'][$i] = trim($ws[$j]['WIKI'][$i]);

			}
		}
	}

	function createAssertions() {
		$i = 0;
		$handle = fopen("output1","w");
		foreach($ws as $s) {
			fwrite($handle, '$this->assertEquals($ws['.$i.']["NS"], '.$s["NS"].");\n");
			foreach($s['WIKI'] as $wm) {
				fwrite($handle,  '$this->assertContains(\''.$wm.'\', $ws['.$i.']["WIKI"]);'."\n");
			}
			fwrite($handle,  '$this->assertEquals($ws['.$i.']["PAGENAME"], \''.$s["PAGENAME"]."');\n");
			fwrite($handle,  '$this->assertEquals($ws['.$i.']["ID"], \''.$s["ID"]."');\n");
			$i++;
		}
		fclose($handle);
	}

}


